Project:               hello_world
File:                  file:/home/jonas/workspace/esp32workspace/get-started/hello_world/main/jonas_proj.h
Language:              GNU C
Index Version:         206.0
Build Configuration:   Default
Context:               file:/home/jonas/workspace/esp32workspace/get-started/hello_world/components/espmqtt-master/mqtt.c
   C, {}
Versions in Index:     2
   C++: {}; 6 macros, 1 includes, 16 names;
   C: {}; 6 macros, 1 includes, 19 names;

Include Search Path (option -I):
   /home/jonas/workspace/esp32workspace/get-started/hello_world/components/espmqtt-master/include
   /home/jonas/esp32/esp-idf/components/app_update/include
   /home/jonas/esp32/esp-idf/components/bootloader_support/include
   /home/jonas/esp32/esp-idf/components/bt/include
   /home/jonas/esp32/esp-idf/components/coap/port/include
   /home/jonas/esp32/esp-idf/components/coap/port/include/coap
   /home/jonas/esp32/esp-idf/components/coap/libcoap/include
   /home/jonas/esp32/esp-idf/components/coap/libcoap/include/coap
   /home/jonas/esp32/esp-idf/components/cxx/include
   /home/jonas/esp32/esp-idf/components/driver/include
   /home/jonas/esp32/esp-idf/components/esp32/include
   /home/jonas/esp32/esp-idf/components/ethernet/include
   /home/jonas/esp32/esp-idf/components/expat/port/include
   /home/jonas/esp32/esp-idf/components/expat/include/expat
   /home/jonas/esp32/esp-idf/components/fatfs/src
   /home/jonas/esp32/esp-idf/components/freertos/include
   /home/jonas/esp32/esp-idf/components/jsmn/include
   /home/jonas/esp32/esp-idf/components/json/include
   /home/jonas/esp32/esp-idf/components/json/port/include
   /home/jonas/esp32/esp-idf/components/log/include
   /home/jonas/esp32/esp-idf/components/lwip/include/lwip
   /home/jonas/esp32/esp-idf/components/lwip/include/lwip/port
   /home/jonas/esp32/esp-idf/components/lwip/include/lwip/posix
   /home/jonas/esp32/esp-idf/components/lwip/apps/ping
   /home/jonas/esp32/esp-idf/components/mbedtls/port/include
   /home/jonas/esp32/esp-idf/components/mbedtls/include
   /home/jonas/esp32/esp-idf/components/mdns/include
   /home/jonas/esp32/esp-idf/components/micro-ecc/micro-ecc
   /home/jonas/esp32/esp-idf/components/newlib/include
   /home/jonas/esp32/esp-idf/components/newlib/platform_include
   /home/jonas/esp32/esp-idf/components/nghttp/port/include
   /home/jonas/esp32/esp-idf/components/nghttp/include
   /home/jonas/esp32/esp-idf/components/nvs_flash/include
   /home/jonas/esp32/esp-idf/components/openssl/include
   /home/jonas/esp32/esp-idf/components/sdmmc/include
   /home/jonas/esp32/esp-idf/components/soc/esp32/include
   /home/jonas/workspace/esp32workspace/get-started/hello_world/components/sparkfunLcdDriver/include
   /home/jonas/esp32/esp-idf/components/spi_flash/include
   /home/jonas/esp32/esp-idf/components/tcpip_adapter/include
   /home/jonas/esp32/esp-idf/components/ulp/include
   /home/jonas/esp32/esp-idf/components/vfs/include
   /home/jonas/esp32/esp-idf/components/wear_levelling/include
   /home/jonas/esp32/esp-idf/components/wpa_supplicant/include
   /home/jonas/esp32/esp-idf/components/wpa_supplicant/port/include
   /home/jonas/esp32/esp-idf/components/xtensa-debug-module/include
   /home/jonas/workspace/esp32workspace/get-started/hello_world/build/include
   /home/jonas/workspace/esp32workspace/get-started/hello_world/build/espmqtt-master
   /opt/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/include
   /opt/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/include-fixed
   /opt/xtensa-esp32-elf/xtensa-esp32-elf/include
   /opt/xtensa-esp32-elf/xtensa-esp32-elf/sysroot/usr/include
   /home/jonas/esp32/esp-idf/components/esp32/include
   /home/jonas/esp32/esp-idf/components/newlib/include
   /home/jonas/esp32/esp-idf/components/freertos/include
   /home/jonas/esp32/esp-idf/components/nvs_flash/include
   /home/jonas/esp32/esp-idf/components/driver/include
   /home/jonas/esp32/esp-idf/components/log/include
   /home/jonas/esp32/esp-idf/components/tcpip_adapter/include
   /home/jonas/esp32/esp-idf/components/lwip/include/lwip
   /home/jonas/esp32/esp-idf/components/spi_flash/include
   /home/jonas/workspace/myapp
   /home/jonas/workspace/esp32workspace/get-started/hello_world
   /home/jonas/esp32/esp-idf/components
   /home/jonas/workspace/esp32workspace/get-started/hello_world/build/include
   /home/jonas/workspace/esp32workspace/get-started/hello_world/main
   /home/jonas/esp32/esp-idf/tuanpmt-mqtt/espmqtt/include

Macro definitions (option -D):
   ESP_PLATFORM=
   HAVE_CONFIG_H=
   idfpath=${IDF_PATH}
   IDF_VER="v2.0-rc1-845-ga38cece"
   MBEDTLS_CONFIG_FILE="mbedtls/esp_config.h"
   WITH_POSIX=
   __ATOMIC_ACQUIRE=2
   __ATOMIC_ACQ_REL=4
   __ATOMIC_CONSUME=1
   __ATOMIC_RELAXED=0
   __ATOMIC_RELEASE=3
   __ATOMIC_SEQ_CST=5
   __BIGGEST_ALIGNMENT__=16
   __BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__
   __CHAR16_TYPE__=short unsigned int
   __CHAR32_TYPE__=long unsigned int
   __CHAR_BIT__=8
   __CHAR_UNSIGNED__=1
   __DBL_DECIMAL_DIG__=17
   __DBL_DENORM_MIN__=((double)4.9406564584124654e-324L)
   __DBL_DIG__=15
   __DBL_EPSILON__=((double)2.2204460492503131e-16L)
   __DBL_HAS_DENORM__=1
   __DBL_HAS_INFINITY__=1
   __DBL_HAS_QUIET_NAN__=1
   __DBL_MANT_DIG__=53
   __DBL_MAX_10_EXP__=308
   __DBL_MAX_EXP__=1024
   __DBL_MAX__=((double)1.7976931348623157e+308L)
   __DBL_MIN_10_EXP__=(-307)
   __DBL_MIN_EXP__=(-1021)
   __DBL_MIN__=((double)2.2250738585072014e-308L)
   __DEC128_EPSILON__=1E-33DL
   __DEC128_MANT_DIG__=34
   __DEC128_MAX_EXP__=6145
   __DEC128_MAX__=9.999999999999999999999999999999999E6144DL
   __DEC128_MIN_EXP__=(-6142)
   __DEC128_MIN__=1E-6143DL
   __DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL
   __DEC32_EPSILON__=1E-6DF
   __DEC32_MANT_DIG__=7
   __DEC32_MAX_EXP__=97
   __DEC32_MAX__=9.999999E96DF
   __DEC32_MIN_EXP__=(-94)
   __DEC32_MIN__=1E-95DF
   __DEC32_SUBNORMAL_MIN__=0.000001E-95DF
   __DEC64_EPSILON__=1E-15DD
   __DEC64_MANT_DIG__=16
   __DEC64_MAX_EXP__=385
   __DEC64_MAX__=9.999999999999999E384DD
   __DEC64_MIN_EXP__=(-382)
   __DEC64_MIN__=1E-383DD
   __DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD
   __DECIMAL_DIG__=17
   __DEC_EVAL_METHOD__=2
   __ELF__=1
   __FINITE_MATH_ONLY__=0
   __FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__
   __FLT_DECIMAL_DIG__=9
   __FLT_DENORM_MIN__=1.4012984643248171e-45F
   __FLT_DIG__=6
   __FLT_EPSILON__=1.1920928955078125e-7F
   __FLT_EVAL_METHOD__=0
   __FLT_HAS_DENORM__=1
   __FLT_HAS_INFINITY__=1
   __FLT_HAS_QUIET_NAN__=1
   __FLT_MANT_DIG__=24
   __FLT_MAX_10_EXP__=38
   __FLT_MAX_EXP__=128
   __FLT_MAX__=3.4028234663852886e+38F
   __FLT_MIN_10_EXP__=(-37)
   __FLT_MIN_EXP__=(-125)
   __FLT_MIN__=1.1754943508222875e-38F
   __FLT_RADIX__=2
   __FP_FAST_FMAF=1
   __GCC_ATOMIC_BOOL_LOCK_FREE=2
   __GCC_ATOMIC_CHAR16_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR32_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR_LOCK_FREE=2
   __GCC_ATOMIC_INT_LOCK_FREE=2
   __GCC_ATOMIC_LLONG_LOCK_FREE=1
   __GCC_ATOMIC_LONG_LOCK_FREE=2
   __GCC_ATOMIC_POINTER_LOCK_FREE=2
   __GCC_ATOMIC_SHORT_LOCK_FREE=2
   __GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1
   __GCC_ATOMIC_WCHAR_T_LOCK_FREE=2
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1
   __GCC_IEC_559=0
   __GCC_IEC_559_COMPLEX=0
   __GNUC_MINOR__=2
   __GNUC_PATCHLEVEL__=0
   __GNUC_STDC_INLINE__=1
   __GNUC__=5
   __GXX_ABI_VERSION=1009
   __has_include(STR)=__has_include__(STR)
   __has_include_next(STR)=__has_include_next__(STR)
   __INT16_C(c)=c
   __INT16_MAX__=0x7fff
   __INT16_TYPE__=short int
   __INT32_C(c)=c ## L
   __INT32_MAX__=0x7fffffffL
   __INT32_TYPE__=long int
   __INT64_C(c)=c ## LL
   __INT64_MAX__=0x7fffffffffffffffLL
   __INT64_TYPE__=long long int
   __INT8_C(c)=c
   __INT8_MAX__=0x7f
   __INT8_TYPE__=signed char
   __INTMAX_C(c)=c ## LL
   __INTMAX_MAX__=0x7fffffffffffffffLL
   __INTMAX_TYPE__=long long int
   __INTPTR_MAX__=0x7fffffff
   __INTPTR_TYPE__=int
   __INT_FAST16_MAX__=0x7fffffff
   __INT_FAST16_TYPE__=int
   __INT_FAST32_MAX__=0x7fffffff
   __INT_FAST32_TYPE__=int
   __INT_FAST64_MAX__=0x7fffffffffffffffLL
   __INT_FAST64_TYPE__=long long int
   __INT_FAST8_MAX__=0x7fffffff
   __INT_FAST8_TYPE__=int
   __INT_LEAST16_MAX__=0x7fff
   __INT_LEAST16_TYPE__=short int
   __INT_LEAST32_MAX__=0x7fffffffL
   __INT_LEAST32_TYPE__=long int
   __INT_LEAST64_MAX__=0x7fffffffffffffffLL
   __INT_LEAST64_TYPE__=long long int
   __INT_LEAST8_MAX__=0x7f
   __INT_LEAST8_TYPE__=signed char
   __INT_MAX__=0x7fffffff
   __LDBL_DENORM_MIN__=4.9406564584124654e-324L
   __LDBL_DIG__=15
   __LDBL_EPSILON__=2.2204460492503131e-16L
   __LDBL_HAS_DENORM__=1
   __LDBL_HAS_INFINITY__=1
   __LDBL_HAS_QUIET_NAN__=1
   __LDBL_MANT_DIG__=53
   __LDBL_MAX_10_EXP__=308
   __LDBL_MAX_EXP__=1024
   __LDBL_MAX__=1.7976931348623157e+308L
   __LDBL_MIN_10_EXP__=(-307)
   __LDBL_MIN_EXP__=(-1021)
   __LDBL_MIN__=2.2250738585072014e-308L
   __LONG_LONG_MAX__=0x7fffffffffffffffLL
   __LONG_MAX__=0x7fffffffL
   __NO_INLINE__=1
   __ORDER_BIG_ENDIAN__=4321
   __ORDER_LITTLE_ENDIAN__=1234
   __ORDER_PDP_ENDIAN__=3412
   __PRAGMA_REDEFINE_EXTNAME=1
   __PTRDIFF_MAX__=0x7fffffff
   __PTRDIFF_TYPE__=int
   __REGISTER_PREFIX__=
   __SCHAR_MAX__=0x7f
   __SHRT_MAX__=0x7fff
   __SIG_ATOMIC_MAX__=0x7fffffff
   __SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)
   __SIG_ATOMIC_TYPE__=int
   __SIZEOF_DOUBLE__=8
   __SIZEOF_FLOAT__=4
   __SIZEOF_INT__=4
   __SIZEOF_LONG_DOUBLE__=8
   __SIZEOF_LONG_LONG__=8
   __SIZEOF_LONG__=4
   __SIZEOF_POINTER__=4
   __SIZEOF_PTRDIFF_T__=4
   __SIZEOF_SHORT__=2
   __SIZEOF_SIZE_T__=4
   __SIZEOF_WCHAR_T__=2
   __SIZEOF_WINT_T__=4
   __SIZE_MAX__=0xffffffffU
   __SIZE_TYPE__=unsigned int
   __STDC_HOSTED__=1
   __STDC_UTF_16__=1
   __STDC_UTF_32__=1
   __STDC_VERSION__=201112L
   __STDC__=1
   __UINT16_C(c)=c
   __UINT16_MAX__=0xffff
   __UINT16_TYPE__=short unsigned int
   __UINT32_C(c)=c ## UL
   __UINT32_MAX__=0xffffffffUL
   __UINT32_TYPE__=long unsigned int
   __UINT64_C(c)=c ## ULL
   __UINT64_MAX__=0xffffffffffffffffULL
   __UINT64_TYPE__=long long unsigned int
   __UINT8_C(c)=c
   __UINT8_MAX__=0xff
   __UINT8_TYPE__=unsigned char
   __UINTMAX_C(c)=c ## ULL
   __UINTMAX_MAX__=0xffffffffffffffffULL
   __UINTMAX_TYPE__=long long unsigned int
   __UINTPTR_MAX__=0xffffffffU
   __UINTPTR_TYPE__=unsigned int
   __UINT_FAST16_MAX__=0xffffffffU
   __UINT_FAST16_TYPE__=unsigned int
   __UINT_FAST32_MAX__=0xffffffffU
   __UINT_FAST32_TYPE__=unsigned int
   __UINT_FAST64_MAX__=0xffffffffffffffffULL
   __UINT_FAST64_TYPE__=long long unsigned int
   __UINT_FAST8_MAX__=0xffffffffU
   __UINT_FAST8_TYPE__=unsigned int
   __UINT_LEAST16_MAX__=0xffff
   __UINT_LEAST16_TYPE__=short unsigned int
   __UINT_LEAST32_MAX__=0xffffffffUL
   __UINT_LEAST32_TYPE__=long unsigned int
   __UINT_LEAST64_MAX__=0xffffffffffffffffULL
   __UINT_LEAST64_TYPE__=long long unsigned int
   __UINT_LEAST8_MAX__=0xff
   __UINT_LEAST8_TYPE__=unsigned char
   __USER_LABEL_PREFIX__=
   __VERSION__="5.2.0"
   __WCHAR_MAX__=0xffff
   __WCHAR_MIN__=0
   __WCHAR_TYPE__=short unsigned int
   __WINT_MAX__=0xffffffffU
   __WINT_MIN__=0U
   __WINT_TYPE__=unsigned int
   __XTENSA_EL__=1
   __XTENSA_WINDOWED_ABI__=1
   __XTENSA__=1

Macro definitions (from language + headers in index):
   accept(s,addr,addrlen)=lwip_accept(s,addr,addrlen)
   ACCHI=17
   ACCLO=16
   AF_INET6=AF_UNSPEC
   AF_INET=2
   AF_UNSPEC=0
   ALIGNPAD=((3 + XCHAL_HAVE_LOOPS*1 + XCHAL_HAVE_MAC16*2 + CALL0_ABI*1) & 3)
   ALIGNUP(n,val)=(((val) + (n)-1) & -(n))
   alloca(size)=__builtin_alloca(size)
   API_LIB_DEBUG=LWIP_DBG_OFF
   API_MSG_DEBUG=LWIP_DBG_OFF
   ARG_MAX=4096
   ARP_MAXAGE=300
   ARP_QUEUEING=0
   ARP_QUEUE_LEN=3
   ARP_TABLE_SIZE=10
   ATOMCTL=99
   AUTOIP_DEBUG=LWIP_DBG_OFF
   BIG_ENDIAN=4321
   bind(s,name,namelen)=lwip_bind(s,name,namelen)
   bool=_Bool
   BR=4
   BUFSIZ=__BUFSIZ__
   CALL0_ABI=0
   CCOMPARE=240
   CCOMPARE_0=240
   CCOMPARE_1=241
   CCOMPARE_2=242
   CCOUNT=234
   CHAR_BIT=__CHAR_BIT__
   CHAR_MAX=UCHAR_MAX
   CHAR_MIN=0
   CHECKSUM_CHECK_ICMP6=1
   CHECKSUM_CHECK_ICMP=1
   CHECKSUM_CHECK_IP=1
   CHECKSUM_CHECK_TCP=1
   CHECKSUM_CHECK_UDP=1
   CHECKSUM_GEN_ICMP6=1
   CHECKSUM_GEN_ICMP=1
   CHECKSUM_GEN_IP=1
   CHECKSUM_GEN_TCP=1
   CHECKSUM_GEN_UDP=1
   close(s)=lwip_close(s)
   closesocket(s)=lwip_close(s)
   configAPPLICATION_ALLOCATED_HEAP=1
   configASSERT(a)=if (!(a)) { ets_printf("%s:%d (%s)- assert failed!\n", __FILE__, __LINE__, __FUNCTION__); abort(); }
   configASSERT_2=0
   configASSERT_DEFINED=1
   configBENCHMARK=0
   configCHECK_FOR_STACK_OVERFLOW=2
   configENABLE_BACKWARD_COMPATIBILITY=1
   configENABLE_MEMORY_DEBUG=0
   configENABLE_TASK_SNAPSHOT=1
   configESP32_PER_TASK_DATA=1
   configEXPECTED_IDLE_TIME_BEFORE_SLEEP=2
   configGENERATE_RUN_TIME_STATS=0
   configIDLE_SHOULD_YIELD=0
   configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS=0
   configISR_STACK_SIZE=CONFIG_FREERTOS_ISR_STACKSIZE
   configKERNEL_INTERRUPT_PRIORITY=1
   configLIST_VOLATILE=
   configMAX_CO_ROUTINE_PRIORITIES=( 2 )
   configMAX_PRIORITIES=( 25 )
   configMAX_SYSCALL_INTERRUPT_PRIORITY=XCHAL_EXCM_LEVEL
   configMAX_TASK_NAME_LEN=( CONFIG_FREERTOS_MAX_TASK_NAME_LEN )
   configMINIMAL_STACK_SIZE=(XT_STACK_MIN_SIZE > 1024 ? XT_STACK_MIN_SIZE : 1024)
   configNUM_THREAD_LOCAL_STORAGE_POINTERS=CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS
   configPOST_SLEEP_PROCESSING(x)=
   configPRE_SLEEP_PROCESSING(x)=
   configQUEUE_REGISTRY_SIZE=0
   configSUPPORT_DYNAMIC_ALLOCATION=1
   configSUPPORT_STATIC_ALLOCATION=CONFIG_SUPPORT_STATIC_ALLOCATION
   configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS=1
   configTICK_RATE_HZ=( CONFIG_FREERTOS_HZ )
   configTIMER_QUEUE_LENGTH=CONFIG_TIMER_QUEUE_LENGTH
   configTIMER_TASK_PRIORITY=CONFIG_TIMER_TASK_PRIORITY
   configTIMER_TASK_STACK_DEPTH=CONFIG_TIMER_TASK_STACK_DEPTH
   configTOTAL_HEAP_SIZE=(&_heap_end - &_heap_start)
   configUSE_16_BIT_TICKS=0
   configUSE_ALTERNATIVE_API=0
   configUSE_APPLICATION_TASK_TAG=0
   configUSE_COUNTING_SEMAPHORES=1
   configUSE_CO_ROUTINES=0
   configUSE_IDLE_HOOK=( CONFIG_FREERTOS_LEGACY_IDLE_HOOK )
   configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES=0
   configUSE_MALLOC_FAILED_HOOK=0
   configUSE_MUTEX=1
   configUSE_MUTEXES=1
   configUSE_NEWLIB_REENTRANT=1
   configUSE_PORT_OPTIMISED_TASK_SELECTION=0
   configUSE_PREEMPTION=1
   configUSE_QUEUE_SETS=1
   configUSE_RECURSIVE_MUTEXES=1
   configUSE_STATS_FORMATTING_FUNCTIONS=0
   configUSE_TASK_NOTIFICATIONS=1
   configUSE_TICKLESS_IDLE=0
   configUSE_TICK_HOOK=( CONFIG_FREERTOS_LEGACY_TICK_HOOK )
   configUSE_TIMERS=1
   configUSE_TIME_SLICING=1
   configUSE_TRACE_FACILITY=0
   configUSE_TRACE_FACILITY_2=0
   configXT_BOARD=1
   configXT_SIMULATOR=0
   CONFIG_APP_OFFSET=0x10000
   CONFIG_BT_RESERVE_DRAM=0x0
   CONFIG_CONSOLE_UART_BAUDRATE=115200
   CONFIG_CONSOLE_UART_DEFAULT=1
   CONFIG_CONSOLE_UART_NUM=0
   CONFIG_DHCP_STA_LIST=1
   CONFIG_ESP32_APPTRACE_DEST_NONE=1
   CONFIG_ESP32_CORE_DUMP_LOG_LEVEL=1
   CONFIG_ESP32_CORE_DUMP_UART_DELAY=0
   CONFIG_ESP32_DEBUG_OCDAWARE=1
   CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY=0
   CONFIG_ESP32_DEFAULT_CPU_FREQ_240=1
   CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ=240
   CONFIG_ESP32_ENABLE_COREDUMP=1
   CONFIG_ESP32_ENABLE_COREDUMP_TO_UART=1
   CONFIG_ESP32_PANIC_GDBSTUB=1
   CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE=1
   CONFIG_ESP32_PHY_MAX_TX_POWER=20
   CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER=20
   CONFIG_ESP32_RTC_CLK_CAL_CYCLES=1024
   CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC=1
   CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1=1
   CONFIG_ESP32_WIFI_AMPDU_ENABLED=1
   CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM=0
   CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER=1
   CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM=32
   CONFIG_ESP32_WIFI_NVS_ENABLED=1
   CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM=10
   CONFIG_ESP32_WIFI_TX_BUFFER_TYPE=1
   CONFIG_ESP32_XTAL_FREQ=0
   CONFIG_ESP32_XTAL_FREQ_AUTO=1
   CONFIG_ESPTOOLPY_AFTER="hard_reset"
   CONFIG_ESPTOOLPY_AFTER_RESET=1
   CONFIG_ESPTOOLPY_BAUD=921600
   CONFIG_ESPTOOLPY_BAUD_921600B=1
   CONFIG_ESPTOOLPY_BAUD_OTHER_VAL=115200
   CONFIG_ESPTOOLPY_BEFORE="default_reset"
   CONFIG_ESPTOOLPY_BEFORE_RESET=1
   CONFIG_ESPTOOLPY_COMPRESSED=1
   CONFIG_ESPTOOLPY_FLASHFREQ="40m"
   CONFIG_ESPTOOLPY_FLASHFREQ_40M=1
   CONFIG_ESPTOOLPY_FLASHMODE="dio"
   CONFIG_ESPTOOLPY_FLASHSIZE="2MB"
   CONFIG_ESPTOOLPY_FLASHSIZE_2MB=1
   CONFIG_ESPTOOLPY_FLASHSIZE_DETECT=1
   CONFIG_ESPTOOLPY_PORT="/dev/ttyUSB0"
   CONFIG_FATFS_CODEPAGE=1
   CONFIG_FATFS_CODEPAGE_ASCII=1
   CONFIG_FATFS_MAX_LFN=255
   CONFIG_FLASHMODE_DIO=1
   CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS=1
   CONFIG_FREERTOS_ASSERT_FAIL_ABORT=1
   CONFIG_FREERTOS_ASSERT_ON_UNTESTED_FUNCTION=1
   CONFIG_FREERTOS_BREAK_ON_SCHEDULER_START_JTAG=1
   CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY=1
   CONFIG_FREERTOS_CORETIMER_0=1
   CONFIG_FREERTOS_HZ=100
   CONFIG_FREERTOS_ISR_STACKSIZE=1536
   CONFIG_FREERTOS_MAX_TASK_NAME_LEN=16
   CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS=1
   CONFIG_INT_WDT=1
   CONFIG_INT_WDT_CHECK_CPU1=1
   CONFIG_INT_WDT_TIMEOUT_MS=300
   CONFIG_LOG_BOOTLOADER_LEVEL=3
   CONFIG_LOG_BOOTLOADER_LEVEL_INFO=1
   CONFIG_LOG_COLORS=1
   CONFIG_LOG_DEFAULT_LEVEL=5
   CONFIG_LOG_DEFAULT_LEVEL_VERBOSE=1
   CONFIG_LWIP_DHCP_DOES_ARP_CHECK=1
   CONFIG_LWIP_DHCP_MAX_NTP_SERVERS=1
   CONFIG_LWIP_MAX_SOCKETS=10
   CONFIG_LWIP_THREAD_LOCAL_STORAGE_INDEX=0
   CONFIG_MAIN_TASK_STACK_SIZE=4096
   CONFIG_MBEDTLS_HARDWARE_AES=1
   CONFIG_MBEDTLS_HARDWARE_MPI=1
   CONFIG_MBEDTLS_HARDWARE_SHA=1
   CONFIG_MBEDTLS_HAVE_TIME=1
   CONFIG_MBEDTLS_MPI_USE_INTERRUPT=1
   CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=16384
   CONFIG_MEMMAP_SMP=1
   CONFIG_MONITOR_BAUD=115200
   CONFIG_MONITOR_BAUD_115200B=1
   CONFIG_MONITOR_BAUD_OTHER_VAL=115200
   CONFIG_MQTT_BUFFER_SIZE_BYTE=1024
   CONFIG_MQTT_LOG_ERROR_ON=1
   CONFIG_MQTT_LOG_INFO_ON=1
   CONFIG_MQTT_LOG_WARN_ON=1
   CONFIG_MQTT_MAX_CLIENT_LEN=32
   CONFIG_MQTT_MAX_HOST_LEN=64
   CONFIG_MQTT_MAX_LWT_MSG=32
   CONFIG_MQTT_MAX_LWT_TOPIC=32
   CONFIG_MQTT_MAX_PASSWORD_LEN=32
   CONFIG_MQTT_MAX_USERNAME_LEN=32
   CONFIG_MQTT_PRIORITY=5
   CONFIG_MQTT_PROTOCOL_311=1
   CONFIG_MQTT_QUEUE_BUFFER_SIZE_WORD=1024
   CONFIG_MQTT_RECONNECT_TIMEOUT=15
   CONFIG_NEWLIB_STDOUT_ADDCR=1
   CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS=4
   CONFIG_OPENSSL_ASSERT_DO_NOTHING=1
   CONFIG_OPTIMIZATION_LEVEL_DEBUG=1
   CONFIG_PARTITION_TABLE_CUSTOM_APP_BIN_OFFSET=0x10000
   CONFIG_PARTITION_TABLE_CUSTOM_FILENAME="partitions.csv"
   CONFIG_PARTITION_TABLE_FILENAME="partitions_singleapp.csv"
   CONFIG_PARTITION_TABLE_SINGLE_APP=1
   CONFIG_PHY_ENABLED=1
   CONFIG_PYTHON="python"
   CONFIG_SPI_FLASH_ROM_DRIVER_PATCH=1
   CONFIG_SYSTEM_EVENT_QUEUE_SIZE=32
   CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE=4096
   CONFIG_TASK_WDT=1
   CONFIG_TASK_WDT_CHECK_IDLE_TASK=1
   CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU1=1
   CONFIG_TASK_WDT_TIMEOUT_S=5
   CONFIG_TCPIP_LWIP=1
   CONFIG_TCPIP_TASK_STACK_SIZE=2560
   CONFIG_TCP_MAXRTX=12
   CONFIG_TCP_SYNMAXRTX=6
   CONFIG_TIMER_QUEUE_LENGTH=10
   CONFIG_TIMER_TASK_PRIORITY=1
   CONFIG_TIMER_TASK_STACK_DEPTH=2048
   CONFIG_TOOLPREFIX="xtensa-esp32-elf-"
   CONFIG_TRACEMEM_RESERVE_DRAM=0x0
   CONFIG_uart_num=2
   CONFIG_uart_TXD=4
   CONFIG_ULP_COPROC_ENABLED=1
   CONFIG_ULP_COPROC_RESERVE_MEM=512
   CONFIG_WIFI_ENABLED=1
   connect(s,name,namelen)=lwip_connect(s,name,namelen)
   CORE_STATE_SIGNATURE=0xB1C5AFED
   CPENABLE=224
   DBREAKA=144
   DBREAKA_0=144
   DBREAKA_1=145
   DBREAKC=160
   DBREAKC_0=160
   DBREAKC_1=161
   DBREAKC_LOADBREAK_MASK=0x40000000
   DBREAKC_LOADBREAK_SHIFT=30
   DBREAKC_MASK_MASK=0x0000003F
   DBREAKC_MASK_SHIFT=0
   DBREAKC_STOREBREAK_MASK=0x80000000
   DBREAKC_STOREBREAK_SHIFT=31
   DDR=104
   DEBUGCAUSE=233
   DEBUGCAUSE_BREAKN_MASK=0x10
   DEBUGCAUSE_BREAKN_SHIFT=4
   DEBUGCAUSE_BREAK_MASK=0x08
   DEBUGCAUSE_BREAK_SHIFT=3
   DEBUGCAUSE_DBREAK_MASK=0x04
   DEBUGCAUSE_DBREAK_SHIFT=2
   DEBUGCAUSE_DEBUGINT_MASK=0x20
   DEBUGCAUSE_DEBUGINT_SHIFT=5
   DEBUGCAUSE_IBREAK_MASK=0x02
   DEBUGCAUSE_IBREAK_SHIFT=1
   DEBUGCAUSE_ICOUNT_MASK=0x01
   DEBUGCAUSE_ICOUNT_SHIFT=0
   DEFAULT_ACCEPTMBOX_SIZE=0
   DEFAULT_RAW_RECVMBOX_SIZE=0
   DEFAULT_TCP_RECVMBOX_SIZE=0
   DEFAULT_THREAD_NAME="lwIP"
   DEFAULT_THREAD_PRIO=1
   DEFAULT_THREAD_STACKSIZE=0
   DEFAULT_UDP_RECVMBOX_SIZE=0
   DEPC=192
   DEPRECATED_DEFINITIONS_H=
   DHCPS_COARSE_TIMER_SECS=1
   DHCPS_LEASE_TIME_DEF=(120)
   DHCPS_MAX_LEASE=0x64
   dhcps_router_enabled(offer)=((offer & OFFER_ROUTER) != 0)
   DHCP_DEBUG=LWIP_DBG_OFF
   DHCP_DOES_ARP_CHECK=((LWIP_DHCP) && (LWIP_ARP))
   DNS_DEBUG=LWIP_DBG_OFF
   DNS_DOES_NAME_CHECK=1
   DNS_LOCAL_HOSTLIST=0
   DNS_LOCAL_HOSTLIST_IS_DYNAMIC=0
   DNS_MAX_NAME_LENGTH=256
   DNS_MAX_SERVERS=2
   DNS_TABLE_SIZE=4
   EOF=(-1)
   EPC=176
   EPC_1=177
   EPC_2=178
   EPC_3=179
   EPC_4=180
   EPC_5=181
   EPC_6=182
   EPC_7=183
   EPS=192
   EPS_2=194
   EPS_3=195
   EPS_4=196
   EPS_5=197
   EPS_6=198
   EPS_7=199
   errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY=( -1 )
   errQUEUE_BLOCKED=( -4 )
   errQUEUE_EMPTY=( ( BaseType_t ) 0 )
   errQUEUE_FULL=( ( BaseType_t ) 0 )
   errQUEUE_YIELD=( -5 )
   ERR_ABRT=-13
   ERR_ALREADY=-9
   ERR_ARG=-16
   ERR_BUF=-2
   ERR_CLSD=-15
   ERR_CONN=-11
   ERR_IF=-12
   ERR_INPROGRESS=-5
   ERR_ISCONN=-10
   ERR_IS_FATAL(e)=((e) <= ERR_ABRT)
   ERR_MEM=-1
   ERR_OK=0
   ERR_RST=-14
   ERR_RTE=-4
   ERR_TIMEOUT=-3
   ERR_USE=-8
   ERR_VAL=-6
   ERR_WOULDBLOCK=-7
   ESP_ERR_TCPIP_ADAPTER_BASE=0x5000
   ESP_ERR_TCPIP_ADAPTER_DHCPC_START_FAILED=ESP_ERR_TCPIP_ADAPTER_BASE + 0x02
   ESP_ERR_TCPIP_ADAPTER_DHCP_ALREADY_STARTED=ESP_ERR_TCPIP_ADAPTER_BASE + 0x03
   ESP_ERR_TCPIP_ADAPTER_DHCP_ALREADY_STOPPED=ESP_ERR_TCPIP_ADAPTER_BASE + 0x04
   ESP_ERR_TCPIP_ADAPTER_DHCP_NOT_STOPPED=ESP_ERR_TCPIP_ADAPTER_BASE + 0x06
   ESP_ERR_TCPIP_ADAPTER_IF_NOT_READY=ESP_ERR_TCPIP_ADAPTER_BASE + 0x01
   ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS=ESP_ERR_TCPIP_ADAPTER_BASE + 0x00
   ESP_ERR_TCPIP_ADAPTER_NO_MEM=ESP_ERR_TCPIP_ADAPTER_BASE + 0x05
   ESP_ERR_WIFI_ARG=ESP_ERR_INVALID_ARG
   ESP_ERR_WIFI_CONN=(ESP_ERR_WIFI_BASE + 7)
   ESP_ERR_WIFI_FAIL=ESP_FAIL
   ESP_ERR_WIFI_IF=(ESP_ERR_WIFI_BASE + 4)
   ESP_ERR_WIFI_MAC=(ESP_ERR_WIFI_BASE + 9)
   ESP_ERR_WIFI_MODE=(ESP_ERR_WIFI_BASE + 5)
   ESP_ERR_WIFI_NOT_INIT=(ESP_ERR_WIFI_BASE + 1)
   ESP_ERR_WIFI_NOT_STARTED=(ESP_ERR_WIFI_BASE + 2)
   ESP_ERR_WIFI_NOT_STOPPED=(ESP_ERR_WIFI_BASE + 3)
   ESP_ERR_WIFI_NOT_SUPPORT=ESP_ERR_NOT_SUPPORTED
   ESP_ERR_WIFI_NO_MEM=ESP_ERR_NO_MEM
   ESP_ERR_WIFI_NVS=(ESP_ERR_WIFI_BASE + 8)
   ESP_ERR_WIFI_OK=ESP_OK
   ESP_ERR_WIFI_PASSWORD=(ESP_ERR_WIFI_BASE + 11)
   ESP_ERR_WIFI_SSID=(ESP_ERR_WIFI_BASE + 10)
   ESP_ERR_WIFI_STATE=(ESP_ERR_WIFI_BASE + 6)
   ESP_ERR_WIFI_TIMEOUT=(ESP_ERR_WIFI_BASE + 12)
   ESP_ERR_WIFI_WAKE_FAIL=(ESP_ERR_WIFI_BASE + 13)
   ESP_L2_TO_L3_COPY=0
   ESP_THREAD_SAFE_DEBUG=0
   ESP_WIFI_MAX_CONN_NUM=(10)
   eTaskStateGet=eTaskGetState
   ETHARP_DEBUG=LWIP_DBG_OFF
   ETHARP_STATS=0
   ETHARP_SUPPORT_STATIC_ENTRIES=0
   ETHARP_SUPPORT_VLAN=0
   ETHARP_TABLE_MATCH_NETIF=0
   ETHARP_TRUST_IP_MAC=0
   ETH_PAD_SIZE=0
   ETS_ASSERT(v)=do { if (!(v)) { ets_printf("%s %u \n", __FILE__, __LINE__); while (1) {}; } } while (0);
   ETS_MEM_BAR()=asm volatile ( "" : : : "memory" )
   ETS_PRINTF(...)=ets_printf(...)
   EXCCAUSE=232
   EXCCAUSE_ALLOCA=5
   EXCCAUSE_CP0_DISABLED=32
   EXCCAUSE_CP1_DISABLED=33
   EXCCAUSE_CP2_DISABLED=34
   EXCCAUSE_CP3_DISABLED=35
   EXCCAUSE_CP4_DISABLED=36
   EXCCAUSE_CP5_DISABLED=37
   EXCCAUSE_CP6_DISABLED=38
   EXCCAUSE_CP7_DISABLED=39
   EXCCAUSE_CP_DISABLED(n)=(32+(n))
   EXCCAUSE_DIVIDE_BY_ZERO=6
   EXCCAUSE_DTLB_MISS=24
   EXCCAUSE_DTLB_MULTIHIT=25
   EXCCAUSE_EXCCAUSE_MASK=0x3F
   EXCCAUSE_EXCCAUSE_SHIFT=0
   EXCCAUSE_IFETCHERROR=2
   EXCCAUSE_ILLEGAL=0
   EXCCAUSE_INSTR_ADDR_ERROR=14
   EXCCAUSE_INSTR_DATA_ERROR=12
   EXCCAUSE_INSTR_ERROR=2
   EXCCAUSE_INSTR_PROHIBITED=20
   EXCCAUSE_INSTR_RING=18
   EXCCAUSE_ITLB_MISS=16
   EXCCAUSE_ITLB_MULTIHIT=17
   EXCCAUSE_LEVEL1INTERRUPT=4
   EXCCAUSE_LEVEL1_INTERRUPT=4
   EXCCAUSE_LOADSTOREERROR=3
   EXCCAUSE_LOAD_PROHIBITED=28
   EXCCAUSE_LOAD_STORE_ADDR_ERROR=15
   EXCCAUSE_LOAD_STORE_DATA_ERROR=13
   EXCCAUSE_LOAD_STORE_ERROR=3
   EXCCAUSE_LOAD_STORE_RING=26
   EXCCAUSE_PRIVILEGED=8
   EXCCAUSE_SPECULATION=7
   EXCCAUSE_STORE_PROHIBITED=29
   EXCCAUSE_SYSCALL=1
   EXCCAUSE_UNALIGNED=9
   EXCSAVE=208
   EXCSAVE_1=209
   EXCSAVE_2=210
   EXCSAVE_3=211
   EXCSAVE_4=212
   EXCSAVE_5=213
   EXCSAVE_6=214
   EXCSAVE_7=215
   EXCVADDR=238
   EXIT_FAILURE=1
   EXIT_SUCCESS=0
   false=0
   fast_putc(x,p)=(--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))
   fcntl(s,cmd,val)=lwip_fcntl(s,cmd,val)
   FD_CLR(n,p)=((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
   FD_ISSET(n,p)=((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
   FD_SET(n,p)=((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
   fd_set=_types_fd_set
   FD_SETSIZE=64
   FD_ZERO(p)=(__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
   FILENAME_MAX=1024
   FIONBIO=_IOW('f', 126, unsigned long)
   FIONREAD=_IOR('f', 127, unsigned long)
   FOPEN_MAX=20
   FREERTOS_CONFIG_H=
   fropen(__cookie,__fn)=funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)
   fwopen(__cookie,__fn)=funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
   F_GETFL=3
   F_SETFL=4
   getc(fp)=__sgetc_r(_REENT, fp)
   getchar()=getc(stdin)
   getchar_unlocked()=getc_unlocked(stdin)
   getpeername(s,name,namelen)=lwip_getpeername(s,name,namelen)
   getsockname(s,name,namelen)=lwip_getsockname(s,name,namelen)
   getsockopt(s,level,optname,opval,optlen)=lwip_getsockopt(s,level,optname,opval,optlen)
   HAVE_GETOPT=
   HAVE_INITFINI_ARRAY=1
   howmany(x,y)=(((x)+((y)-1))/(y))
   htonl(x)=lwip_htonl(x)
   htons(x)=lwip_htons(x)
   IBREAKA=128
   IBREAKA_0=128
   IBREAKA_1=129
   IBREAKENABLE=96
   ICMP6_STATS=0
   ICMP_DEBUG=LWIP_DBG_OFF
   ICMP_STATS=0
   ICMP_TTL=(IP_DEFAULT_TTL)
   ICOUNT=236
   ICOUNTLEVEL=237
   IGMP_DEBUG=LWIP_DBG_OFF
   IGMP_STATS=0
   IN6ADDR_ANY_INIT={{{0,0,0,0}}}
   IN6ADDR_LOOPBACK_INIT={{{0,0,0,PP_HTONL(1)}}}
   INADDR_ANY=IPADDR_ANY
   INADDR_BROADCAST=IPADDR_BROADCAST
   INADDR_LOOPBACK=IPADDR_LOOPBACK
   INADDR_NONE=IPADDR_NONE
   INCLUDE_eTaskGetState=1
   INCLUDE_pcTaskGetTaskName=1
   INCLUDE_uxTaskGetStackHighWaterMark=1
   INCLUDE_uxTaskPriorityGet=1
   INCLUDE_vTaskCleanUpResources=0
   INCLUDE_vTaskDelay=1
   INCLUDE_vTaskDelayUntil=1
   INCLUDE_vTaskDelete=1
   INCLUDE_vTaskPrioritySet=1
   INCLUDE_vTaskSuspend=1
   INCLUDE_xEventGroupSetBitFromISR=0
   INCLUDE_xQueueGetMutexHolder=0
   INCLUDE_xSemaphoreGetMutexHolder=1
   INCLUDE_xTaskGetCurrentTaskHandle=0
   INCLUDE_xTaskGetIdleTaskHandle=0
   INCLUDE_xTaskGetSchedulerState=0
   INCLUDE_xTaskResumeFromISR=1
   INCLUDE_xTimerGetTimerDaemonTaskHandle=0
   INCLUDE_xTimerPendFunctionCall=1
   INC_FREERTOS_H=
   INC_TASK_H=
   inet_addr(cp)=ipaddr_addr(cp)
   INET_ADDRSTRLEN=IP4ADDR_STRLEN_MAX
   inet_addr_from_ipaddr(target_inaddr,source_ipaddr)=((target_inaddr)->s_addr = ip4_addr_get_u32(source_ipaddr))
   inet_addr_to_ipaddr(target_ipaddr,source_inaddr)=(ip4_addr_set_u32(target_ipaddr, (source_inaddr)->s_addr))
   inet_addr_to_ipaddr_p(target_ipaddr_p,source_inaddr)=((target_ipaddr_p) = (ip_addr_t*)&((source_inaddr)->s_addr))
   inet_aton(cp,addr)=ip4addr_aton(cp, (ip4_addr_t*)addr)
   INET_DEBUG=LWIP_DBG_OFF
   inet_ntoa(addr)=ip4addr_ntoa((const ip4_addr_t*)&(addr))
   inet_ntoa_r(addr,buf,buflen)=ip4addr_ntoa_r((const ip4_addr_t*)&(addr), buf, buflen)
   inet_ntop(af,src,dst,size)=(((af) == AF_INET) ? ip4addr_ntoa_r((const ip4_addr_t*)(src),(dst),(size)) : NULL)
   inet_pton(af,src,dst)=(((af) == AF_INET) ? ip4addr_aton((src),(ip4_addr_t*)(dst)) : 0)
   INT16_C(x)=__INT16_C(x)
   INT16_MAX=__INT16_MAX__
   INT16_MIN=(-__INT16_MAX__ - 1)
   INT32_C(x)=__INT32_C(x)
   INT32_MAX=__INT32_MAX__
   INT32_MIN=(-__INT32_MAX__ - 1)
   INT64_C(x)=__INT64_C(x)
   INT64_MAX=__INT64_MAX__
   INT64_MIN=(-__INT64_MAX__ - 1)
   INT8_C(x)=__INT8_C(x)
   INT8_MAX=__INT8_MAX__
   INT8_MIN=(-__INT8_MAX__ - 1)
   INTCLEAR=227
   INTENABLE=228
   INTERRUPT=226
   INTMAX_C(x)=__INTMAX_C(x)
   INTMAX_MAX=__INTMAX_MAX__
   INTMAX_MIN=(-INTMAX_MAX - 1)
   INTPTR_MAX=__INTPTR_MAX__
   INTPTR_MIN=(-__INTPTR_MAX__ - 1)
   INTREAD=226
   INTSET=226
   INT_FAST16_MAX=__INT_FAST16_MAX__
   INT_FAST16_MIN=(-__INT_FAST16_MAX__ - 1)
   INT_FAST32_MAX=__INT_FAST32_MAX__
   INT_FAST32_MIN=(-__INT_FAST32_MAX__ - 1)
   INT_FAST64_MAX=__INT_FAST64_MAX__
   INT_FAST64_MIN=(-__INT_FAST64_MAX__ - 1)
   INT_FAST8_MAX=__INT_FAST8_MAX__
   INT_FAST8_MIN=(-__INT_FAST8_MAX__ - 1)
   INT_LEAST16_MAX=__INT_LEAST16_MAX__
   INT_LEAST16_MIN=(-__INT_LEAST16_MAX__ - 1)
   INT_LEAST32_MAX=__INT_LEAST32_MAX__
   INT_LEAST32_MIN=(-__INT_LEAST32_MAX__ - 1)
   INT_LEAST64_MAX=__INT_LEAST64_MAX__
   INT_LEAST64_MIN=(-__INT_LEAST64_MAX__ - 1)
   INT_LEAST8_MAX=__INT_LEAST8_MAX__
   INT_LEAST8_MIN=(-__INT_LEAST8_MAX__ - 1)
   INT_MAX=__INT_MAX__
   INT_MIN=(-INT_MAX - 1)
   IN_BADCLASS(a)=IP_BADCLASS(a)
   IN_CLASSA(a)=IP_CLASSA(a)
   IN_CLASSA_HOST=IP_CLASSA_HOST
   IN_CLASSA_MAX=IP_CLASSA_MAX
   IN_CLASSA_NET=IP_CLASSA_NET
   IN_CLASSA_NSHIFT=IP_CLASSA_NSHIFT
   IN_CLASSB(b)=IP_CLASSB(b)
   IN_CLASSB_HOST=IP_CLASSB_HOST
   IN_CLASSB_MAX=IP_CLASSB_MAX
   IN_CLASSB_NET=IP_CLASSB_NET
   IN_CLASSB_NSHIFT=IP_CLASSB_NSHIFT
   IN_CLASSC(c)=IP_CLASSC(c)
   IN_CLASSC_HOST=IP_CLASSC_HOST
   IN_CLASSC_MAX=IP_CLASSC_MAX
   IN_CLASSC_NET=IP_CLASSC_NET
   IN_CLASSC_NSHIFT=IP_CLASSC_NSHIFT
   IN_CLASSD(d)=IP_CLASSD(d)
   IN_CLASSD_HOST=IP_CLASSD_HOST
   IN_CLASSD_MAX=IP_CLASSD_MAX
   IN_CLASSD_NET=IP_CLASSD_NET
   IN_CLASSD_NSHIFT=IP_CLASSD_NSHIFT
   IN_EXPERIMENTAL(a)=IP_EXPERIMENTAL(a)
   IN_LOOPBACKNET=IP_LOOPBACKNET
   IN_MULTICAST(a)=IP_MULTICAST(a)
   IOCPARM_MASK=0x7fU
   ioctl(s,cmd,argp)=lwip_ioctl(s,cmd,argp)
   ioctlsocket(s,cmd,argp)=lwip_ioctl(s,cmd,argp)
   IOC_IN=0x80000000UL
   IOC_INOUT=(IOC_IN|IOC_OUT)
   IOC_OUT=0x40000000UL
   IOC_VOID=0x20000000UL
   IP2STR(ipaddr)=ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)
   IP4ADDR_STRLEN_MAX=16
   IP4_ADDR(ipaddr,a,b,c,d)=(ipaddr)->addr = ((u32_t)((d) & 0xff) << 24) | ((u32_t)((c) & 0xff) << 16) | ((u32_t)((b) & 0xff) << 8) | (u32_t)((a) & 0xff)
   ip4_addr1(ipaddr)=(((const u8_t*)(&(ipaddr)->addr))[0])
   ip4_addr1_16(ipaddr)=((u16_t)ip4_addr1(ipaddr))
   ip4_addr2(ipaddr)=(((const u8_t*)(&(ipaddr)->addr))[1])
   ip4_addr2_16(ipaddr)=((u16_t)ip4_addr2(ipaddr))
   ip4_addr3(ipaddr)=(((const u8_t*)(&(ipaddr)->addr))[2])
   ip4_addr3_16(ipaddr)=((u16_t)ip4_addr3(ipaddr))
   ip4_addr4(ipaddr)=(((const u8_t*)(&(ipaddr)->addr))[3])
   ip4_addr4_16(ipaddr)=((u16_t)ip4_addr4(ipaddr))
   IP4_ADDR_ANY=(ip_2_ip4(&ip_addr_any))
   IP4_ADDR_BROADCAST=(ip_2_ip4(&ip_addr_broadcast))
   ip4_addr_cmp(addr1,addr2)=((addr1)->addr == (addr2)->addr)
   ip4_addr_copy(dest,src)=((dest).addr = (src).addr)
   ip4_addr_debug_print(debug,ipaddr)=ip4_addr_debug_print_parts(debug, (ipaddr) != NULL ? ip4_addr1_16(ipaddr) : 0, (ipaddr) != NULL ? ip4_addr2_16(ipaddr) : 0, (ipaddr) != NULL ? ip4_addr3_16(ipaddr) : 0, (ipaddr) != NULL ? ip4_addr4_16(ipaddr) : 0)
   ip4_addr_debug_print_parts(debug,a,b,c,d)=LWIP_DEBUGF(debug, ("%" U16_F ".%" U16_F ".%" U16_F ".%" U16_F, a, b, c, d))
   ip4_addr_debug_print_val(debug,ipaddr)=ip4_addr_debug_print_parts(debug, ip4_addr1_16(&(ipaddr)), ip4_addr2_16(&(ipaddr)), ip4_addr3_16(&(ipaddr)), ip4_addr4_16(&(ipaddr)))
   ip4_addr_get_network(target,host,netmask)=do { ((target)->addr = ((host)->addr) & ((netmask)->addr)); } while(0)
   ip4_addr_get_u32(src_ipaddr)=((src_ipaddr)->addr)
   ip4_addr_isany(addr1)=((addr1) == NULL || ip4_addr_isany_val(*(addr1)))
   ip4_addr_isany_val(addr1)=((addr1).addr == IPADDR_ANY)
   ip4_addr_isbroadcast(addr1,netif)=ip4_addr_isbroadcast_u32((addr1)->addr, netif)
   ip4_addr_islinklocal(addr1)=(((addr1)->addr & PP_HTONL(0xffff0000UL)) == PP_HTONL(0xa9fe0000UL))
   ip4_addr_isloopback(ipaddr)=(((ipaddr)->addr & PP_HTONL(IP_CLASSA_NET)) == PP_HTONL(((u32_t)IP_LOOPBACKNET) << 24))
   ip4_addr_ismulticast(addr1)=(((addr1)->addr & PP_HTONL(0xf0000000UL)) == PP_HTONL(0xe0000000UL))
   ip4_addr_netcmp(addr1,addr2,mask)=(((addr1)->addr & (mask)->addr) == ((addr2)->addr & (mask)->addr))
   ip4_addr_set(dest,src)=((dest)->addr = ((src) == NULL ? 0 : (src)->addr))
   ip4_addr_set_any(ipaddr)=((ipaddr)->addr = IPADDR_ANY)
   ip4_addr_set_hton(dest,src)=((dest)->addr = ((src) == NULL ? 0: htonl((src)->addr)))
   ip4_addr_set_loopback(ipaddr)=((ipaddr)->addr = PP_HTONL(IPADDR_LOOPBACK))
   ip4_addr_set_u32(dest_ipaddr,src_u32)=((dest_ipaddr)->addr = (src_u32))
   ip4_addr_set_zero(ipaddr)=((ipaddr)->addr = 0)
   IP6_DEBUG=LWIP_DBG_OFF
   IP6_FRAG_STATS=0
   IP6_STATS=0
   IPADDR2_COPY(dest,src)=SMEMCPY(dest, src, sizeof(ip4_addr_t))
   IPADDR4_INIT(u32val)={ u32val }
   IPADDR_ANY=((u32_t)0x00000000UL)
   ipaddr_aton(cp,addr)=ip4addr_aton(cp, addr)
   IPADDR_BROADCAST=((u32_t)0xffffffffUL)
   IPADDR_LOOPBACK=((u32_t)0x7f000001UL)
   IPADDR_NONE=((u32_t)0xffffffffUL)
   ipaddr_ntoa(ipaddr)=ip4addr_ntoa(ipaddr)
   ipaddr_ntoa_r(ipaddr,buf,buflen)=ip4addr_ntoa_r(ipaddr, buf, buflen)
   IPADDR_STRLEN_MAX=IP4ADDR_STRLEN_MAX
   IPADDR_TYPE_ANY=46U
   IPADDR_TYPE_V4=0U
   IPADDR_TYPE_V6=6U
   IPFRAG_STATS=0
   IPPROTO_ICMP=1
   IPPROTO_IP=0
   IPPROTO_RAW=255
   IPPROTO_TCP=6
   IPPROTO_UDP=17
   IPPROTO_UDPLITE=136
   IPSTR="%d.%d.%d.%d"
   IPTOS_LOWCOST=0x02
   IPTOS_LOWDELAY=0x10
   IPTOS_MINCOST=IPTOS_LOWCOST
   IPTOS_PREC(tos)=((tos) & IPTOS_PREC_MASK)
   IPTOS_PREC_CRITIC_ECP=0xa0
   IPTOS_PREC_FLASH=0x60
   IPTOS_PREC_FLASHOVERRIDE=0x80
   IPTOS_PREC_IMMEDIATE=0x40
   IPTOS_PREC_INTERNETCONTROL=0xc0
   IPTOS_PREC_MASK=0xe0
   IPTOS_PREC_NETCONTROL=0xe0
   IPTOS_PREC_PRIORITY=0x20
   IPTOS_PREC_ROUTINE=0x00
   IPTOS_RELIABILITY=0x04
   IPTOS_THROUGHPUT=0x08
   IPTOS_TOS(tos)=((tos) & IPTOS_TOS_MASK)
   IPTOS_TOS_MASK=0x1E
   IPV62STR(ipaddr)=IP6_ADDR_BLOCK1(&(ipaddr)), IP6_ADDR_BLOCK2(&(ipaddr)), IP6_ADDR_BLOCK3(&(ipaddr)), IP6_ADDR_BLOCK4(&(ipaddr)), IP6_ADDR_BLOCK5(&(ipaddr)), IP6_ADDR_BLOCK6(&(ipaddr)), IP6_ADDR_BLOCK7(&(ipaddr)), IP6_ADDR_BLOCK8(&(ipaddr))
   IPV6STR="%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x"
   ip_2_ip4(ipaddr)=(ipaddr)
   IP_ADDR4(ipaddr,a,b,c,d)=IP4_ADDR(ipaddr,a,b,c,d)
   IP_ADDR_ANY=(&ip_addr_any)
   IP_ADDR_BROADCAST=(&ip_addr_broadcast)
   ip_addr_cmp(addr1,addr2)=ip4_addr_cmp(addr1, addr2)
   ip_addr_copy(dest,src)=ip4_addr_copy(dest, src)
   ip_addr_copy_from_ip4(dest,src)=ip4_addr_copy(dest, src)
   ip_addr_debug_print(debug,ipaddr)=ip4_addr_debug_print(debug, ipaddr)
   ip_addr_debug_print_val(debug,ipaddr)=ip4_addr_debug_print_val(debug, ipaddr)
   ip_addr_get_ip4_u32(ipaddr)=ip4_addr_get_u32(ip_2_ip4(ipaddr))
   ip_addr_get_network(target,host,mask)=ip4_addr_get_network(target, host, mask)
   ip_addr_isany(ipaddr)=ip4_addr_isany(ipaddr)
   ip_addr_isany_val(ipaddr)=ip4_addr_isany_val(ipaddr)
   ip_addr_isbroadcast(addr,netif)=ip4_addr_isbroadcast(addr, netif)
   ip_addr_islinklocal(ipaddr)=ip4_addr_islinklocal(ipaddr)
   ip_addr_isloopback(ipaddr)=ip4_addr_isloopback(ipaddr)
   ip_addr_ismulticast(ipaddr)=ip4_addr_ismulticast(ipaddr)
   ip_addr_netcmp(addr1,addr2,mask)=ip4_addr_netcmp(addr1, addr2, mask)
   ip_addr_netmask_valid(netmask)=ip4_addr_netmask_valid((netmask)->addr)
   IP_ADDR_PCB_VERSION_MATCH(addr,pcb)=1
   IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb,ipaddr)=1
   ip_addr_set(dest,src)=ip4_addr_set(dest, src)
   ip_addr_set_any(is_ipv6,ipaddr)=ip4_addr_set_any(ipaddr)
   ip_addr_set_hton(dest,src)=ip4_addr_set_hton(dest, src)
   ip_addr_set_ip4_u32(ipaddr,val)=ip4_addr_set_u32(ip_2_ip4(ipaddr), val)
   ip_addr_set_ipaddr(dest,src)=ip4_addr_set(dest, src)
   ip_addr_set_loopback(is_ipv6,ipaddr)=ip4_addr_set_loopback(ipaddr)
   ip_addr_set_zero(ipaddr)=ip4_addr_set_zero(ipaddr)
   ip_addr_set_zero_ip4(ipaddr)=ip4_addr_set_zero(ipaddr)
   IP_ADD_MEMBERSHIP=3
   IP_ANY_TYPE=IP_ADDR_ANY
   IP_BADCLASS(a)=(((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
   IP_CLASSA(a)=((((u32_t)(a)) & 0x80000000UL) == 0)
   IP_CLASSA_HOST=(0xffffffff & ~IP_CLASSA_NET)
   IP_CLASSA_MAX=128
   IP_CLASSA_NET=0xff000000
   IP_CLASSA_NSHIFT=24
   IP_CLASSB(a)=((((u32_t)(a)) & 0xc0000000UL) == 0x80000000UL)
   IP_CLASSB_HOST=(0xffffffff & ~IP_CLASSB_NET)
   IP_CLASSB_MAX=65536
   IP_CLASSB_NET=0xffff0000
   IP_CLASSB_NSHIFT=16
   IP_CLASSC(a)=((((u32_t)(a)) & 0xe0000000UL) == 0xc0000000UL)
   IP_CLASSC_HOST=(0xffffffff & ~IP_CLASSC_NET)
   IP_CLASSC_NET=0xffffff00
   IP_CLASSC_NSHIFT=8
   IP_CLASSD(a)=(((u32_t)(a) & 0xf0000000UL) == 0xe0000000UL)
   IP_CLASSD_HOST=0x0fffffff
   IP_CLASSD_NET=0xf0000000
   IP_CLASSD_NSHIFT=28
   IP_DEBUG=LWIP_DBG_OFF
   IP_DEFAULT_TTL=255
   IP_DROP_MEMBERSHIP=4
   IP_EXPERIMENTAL(a)=(((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
   IP_FORWARD=0
   IP_FORWARD_ALLOW_TX_ON_RX_NETIF=0
   IP_FRAG=1
   IP_FRAG_USES_STATIC_BUF=0
   IP_GET_TYPE(ipaddr)=IPADDR_TYPE_V4
   IP_IS_ANY_TYPE_VAL(ipaddr)=0
   IP_IS_V6(ipaddr)=0
   IP_IS_V6_VAL(ipaddr)=0
   IP_LOOPBACKNET=127
   IP_MULTICAST(a)=IP_CLASSD(a)
   IP_MULTICAST_IF=6
   IP_MULTICAST_LOOP=7
   IP_MULTICAST_TTL=5
   ip_ntoa(ipaddr)=ipaddr_ntoa(ipaddr)
   IP_OPTIONS_ALLOWED=1
   IP_REASSEMBLY=1
   IP_REASS_DEBUG=LWIP_DBG_OFF
   IP_REASS_MAXAGE=3
   IP_REASS_MAX_PBUFS=10
   IP_SET_TYPE(ipaddr,iptype)=
   IP_SET_TYPE_VAL(ipaddr,iptype)=
   IP_SOF_BROADCAST=0
   IP_SOF_BROADCAST_RECV=0
   IP_STATS=0
   IP_TOS=1
   IP_TTL=2
   KERNELSTACKSIZE=1024
   LBEG=0
   LCOUNT=2
   LEND=1
   LINK_STATS=0
   listCURRENT_LIST_LENGTH(pxList)=( ( pxList )->uxNumberOfItems )
   listen(s,backlog)=lwip_listen(s,backlog)
   listFIRST_LIST_INTEGRITY_CHECK_VALUE=
   listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE=
   listGET_END_MARKER(pxList)=( ( ListItem_t const * ) ( &( ( pxList )->xListEnd ) ) )
   listGET_HEAD_ENTRY(pxList)=( ( ( pxList )->xListEnd ).pxNext )
   listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList)=( ( ( pxList )->xListEnd ).pxNext->xItemValue )
   listGET_LIST_ITEM_OWNER(pxListItem)=( ( pxListItem )->pvOwner )
   listGET_LIST_ITEM_VALUE(pxListItem)=( ( pxListItem )->xItemValue )
   listGET_NEXT(pxListItem)=( ( pxListItem )->pxNext )
   listGET_OWNER_OF_HEAD_ENTRY(pxList)=( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )
   listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList)={ List_t * const pxConstList = ( pxList ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB ) = ( pxConstList )->pxIndex->pvOwner; }
   listIS_CONTAINED_WITHIN(pxList,pxListItem)=( ( BaseType_t ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) ) )
   listLIST_IS_EMPTY(pxList)=( ( BaseType_t ) ( ( pxList )->uxNumberOfItems == ( UBaseType_t ) 0 ) )
   listLIST_IS_INITIALISED(pxList)=( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
   listLIST_ITEM_CONTAINER(pxListItem)=( ( pxListItem )->pvContainer )
   listSECOND_LIST_INTEGRITY_CHECK_VALUE=
   listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE=
   listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem)=
   listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList)=
   listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList)=
   listSET_LIST_ITEM_OWNER(pxListItem,pxOwner)=( ( pxListItem )->pvOwner = ( void * ) ( pxOwner ) )
   listSET_LIST_ITEM_VALUE(pxListItem,xValue)=( ( pxListItem )->xItemValue = ( xValue ) )
   listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem)=
   listTEST_LIST_INTEGRITY(pxList)=
   listTEST_LIST_ITEM_INTEGRITY(pxItem)=
   LIST_EMPTY(head)=((head)->lh_first == NULL)
   LIST_ENTRY(type)=struct { struct type *le_next; struct type **le_prev; }
   LIST_FIRST(head)=((head)->lh_first)
   LIST_FOREACH(var,head,field)=for ((var) = LIST_FIRST((head)); (var); (var) = LIST_NEXT((var), field))
   LIST_FOREACH_SAFE(var,head,field,tvar)=for ((var) = LIST_FIRST((head)); (var) && ((tvar) = LIST_NEXT((var), field), 1); (var) = (tvar))
   LIST_H=
   LIST_HEAD(name,type)=struct name { struct type *lh_first; }
   LIST_HEAD_INITIALIZER(head)={ NULL }
   LIST_INIT(head)=do { LIST_FIRST((head)) = NULL; } while (0)
   LIST_INSERT_AFTER(listelm,elm,field)=do { QMD_LIST_CHECK_NEXT(listelm, field); if ((LIST_NEXT((elm), field) = LIST_NEXT((listelm), field)) != NULL) LIST_NEXT((listelm), field)->field.le_prev = &LIST_NEXT((elm), field); LIST_NEXT((listelm), field) = (elm); (elm)->field.le_prev = &LIST_NEXT((listelm), field); } while (0)
   LIST_INSERT_BEFORE(listelm,elm,field)=do { QMD_LIST_CHECK_PREV(listelm, field); (elm)->field.le_prev = (listelm)->field.le_prev; LIST_NEXT((elm), field) = (listelm); *(listelm)->field.le_prev = (elm); (listelm)->field.le_prev = &LIST_NEXT((elm), field); } while (0)
   LIST_INSERT_HEAD(head,elm,field)=do { QMD_LIST_CHECK_HEAD((head), field); if ((LIST_NEXT((elm), field) = LIST_FIRST((head))) != NULL) LIST_FIRST((head))->field.le_prev = &LIST_NEXT((elm), field); LIST_FIRST((head)) = (elm); (elm)->field.le_prev = &LIST_FIRST((head)); } while (0)
   LIST_NEXT(elm,field)=((elm)->field.le_next)
   LIST_REMOVE(elm,field)=do { QMD_SAVELINK(oldnext, (elm)->field.le_next); QMD_SAVELINK(oldprev, (elm)->field.le_prev); QMD_LIST_CHECK_NEXT(elm, field); QMD_LIST_CHECK_PREV(elm, field); if (LIST_NEXT((elm), field) != NULL) LIST_NEXT((elm), field)->field.le_prev = (elm)->field.le_prev; *(elm)->field.le_prev = LIST_NEXT((elm), field); TRASHIT(*oldnext); TRASHIT(*oldprev); } while (0)
   LIST_SWAP(head1,head2,type,field)=do { struct type *swap_tmp = LIST_FIRST((head1)); LIST_FIRST((head1)) = LIST_FIRST((head2)); LIST_FIRST((head2)) = swap_tmp; if ((swap_tmp = LIST_FIRST((head1))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head1)); if ((swap_tmp = LIST_FIRST((head2))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head2)); } while (0)
   LITTLE_ENDIAN=1234
   LLONG_MAX=__LONG_LONG_MAX__
   LLONG_MIN=(-LLONG_MAX - 1LL)
   LONG_LONG_MAX=__LONG_LONG_MAX__
   LONG_LONG_MIN=(-LONG_LONG_MAX - 1LL)
   LONG_MAX=__LONG_MAX__
   LONG_MIN=(-LONG_MAX - 1L)
   LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT=0
   LWIP_ARP=1
   LWIP_ARRAYSIZE(x)=(sizeof(x)/sizeof((x)[0]))
   LWIP_ASSERT(message,assertion)=do { if(!(assertion)) LWIP_PLATFORM_ASSERT(message); } while(0)
   LWIP_AUTOIP=0
   LWIP_BROADCAST_PING=0
   LWIP_CALLBACK_API=1
   LWIP_CHECKSUM_CTRL_PER_NETIF=0
   LWIP_CHECKSUM_ON_COPY=0
   LWIP_COMPAT_SOCKETS=1
   LWIP_DBG_FRESH=0x10U
   LWIP_DBG_HALT=0x08U
   LWIP_DBG_LEVEL_ALL=0x00
   LWIP_DBG_LEVEL_OFF=LWIP_DBG_LEVEL_ALL
   LWIP_DBG_LEVEL_SERIOUS=0x02
   LWIP_DBG_LEVEL_SEVERE=0x03
   LWIP_DBG_LEVEL_WARNING=0x01
   LWIP_DBG_MASK_LEVEL=0x03
   LWIP_DBG_MIN_LEVEL=LWIP_DBG_LEVEL_ALL
   LWIP_DBG_OFF=0x00U
   LWIP_DBG_ON=0x80U
   LWIP_DBG_STATE=0x20U
   LWIP_DBG_TRACE=0x40U
   LWIP_DBG_TYPES_ON=LWIP_DBG_ON
   LWIP_DEBUGF(debug,message)=
   LWIP_DHCP=0
   LWIP_DHCP_AUTOIP_COOP=0
   LWIP_DHCP_AUTOIP_COOP_TRIES=9
   LWIP_DHCP_BOOTP_FILE=0
   LWIP_DHCP_CHECK_LINK_UP=0
   LWIP_DHCP_GET_NTP_SRV=0
   LWIP_DHCP_MAX_NTP_SERVERS=1
   LWIP_DNS=0
   LWIP_DNS_SECURE=(LWIP_DNS_SECURE_RAND_XID | LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING | LWIP_DNS_SECURE_RAND_SRC_PORT)
   LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING=2
   LWIP_DNS_SECURE_RAND_SRC_PORT=4
   LWIP_DNS_SECURE_RAND_XID=1
   LWIP_ERROR(message,expression,handler)=do { if (!(expression)) { LWIP_PLATFORM_ERROR(message); handler;}} while(0)
   LWIP_ETHERNET=(LWIP_ARP || PPPOE_SUPPORT)
   LWIP_EVENT_API=0
   LWIP_FIONREAD_LINUXMODE=0
   LWIP_HAVE_LOOPIF=LWIP_NETIF_LOOPBACK
   LWIP_HAVE_SLIPIF=0
   LWIP_HDR_ARCH_H=
   LWIP_HDR_DEBUG_H=
   LWIP_HDR_DEF_H=
   LWIP_HDR_DNS_H=
   LWIP_HDR_ERR_H=
   LWIP_HDR_INET_H=
   LWIP_HDR_IP4_ADDR_H=
   LWIP_HDR_IP6_ADDR_H=
   LWIP_HDR_IP_ADDR_H__=
   LWIP_HDR_NETDB_H=
   LWIP_HDR_OPT_H=
   LWIP_HDR_SOCKETS_H=
   LWIP_ICMP6=(LWIP_IPV6)
   LWIP_ICMP6_DATASIZE=8
   LWIP_ICMP6_HL=255
   LWIP_ICMP=1
   LWIP_IGMP=1
   LWIP_IPV4=1
   LWIP_IPV6=0
   LWIP_IPV6_AUTOCONFIG=(LWIP_IPV6)
   LWIP_IPV6_DHCP6=0
   LWIP_IPV6_DUP_DETECT_ATTEMPTS=1
   LWIP_IPV6_FORWARD=0
   LWIP_IPV6_FRAG=0
   LWIP_IPV6_MLD=(LWIP_IPV6)
   LWIP_IPV6_NUM_ADDRESSES=3
   LWIP_IPV6_REASS=(LWIP_IPV6)
   LWIP_IPV6_SEND_ROUTER_SOLICIT=1
   LWIP_LOOPBACK_MAX_PBUFS=0
   LWIP_LOOPIF_MULTICAST=0
   LWIP_MAKE_U16(a,b)=((b << 8) | a)
   LWIP_MAX(x,y)=(((x) > (y)) ? (x) : (y))
   LWIP_MIB2_CALLBACKS=0
   LWIP_MIN(x,y)=(((x) < (y)) ? (x) : (y))
   LWIP_MPU_COMPATIBLE=0
   LWIP_MULTICAST_PING=0
   LWIP_MULTICAST_TX_OPTIONS=LWIP_IGMP
   LWIP_ND6_ALLOW_RA_UPDATES=1
   LWIP_ND6_DELAY_FIRST_PROBE_TIME=5000
   LWIP_ND6_MAX_ANYCAST_DELAY_TIME=1000
   LWIP_ND6_MAX_MULTICAST_SOLICIT=3
   LWIP_ND6_MAX_NEIGHBOR_ADVERTISEMENT=3
   LWIP_ND6_MAX_UNICAST_SOLICIT=3
   LWIP_ND6_NUM_DESTINATIONS=10
   LWIP_ND6_NUM_NEIGHBORS=10
   LWIP_ND6_NUM_PREFIXES=5
   LWIP_ND6_NUM_ROUTERS=3
   LWIP_ND6_QUEUEING=(LWIP_IPV6)
   LWIP_ND6_REACHABLE_TIME=30000
   LWIP_ND6_RETRANS_TIMER=1000
   LWIP_ND6_TCP_REACHABILITY_HINTS=1
   LWIP_NETBUF_RECVINFO=0
   LWIP_NETCONN=1
   LWIP_NETCONN_FULLDUPLEX=0
   LWIP_NETCONN_SEM_PER_THREAD=0
   LWIP_NETIF_API=0
   LWIP_NETIF_HOSTNAME=0
   LWIP_NETIF_HWADDRHINT=0
   LWIP_NETIF_LINK_CALLBACK=0
   LWIP_NETIF_LOOPBACK=0
   LWIP_NETIF_LOOPBACK_MULTITHREADING=(!NO_SYS)
   LWIP_NETIF_REMOVE_CALLBACK=0
   LWIP_NETIF_STATUS_CALLBACK=0
   LWIP_NETIF_TX_SINGLE_PBUF=0
   LWIP_PERF=0
   LWIP_PLATFORM_BYTESWAP=0
   LWIP_PLATFORM_ERROR(message)=LWIP_PLATFORM_ASSERT(message)
   LWIP_POSIX_SOCKETS_IO_NAMES=1
   LWIP_PPP_API=(PPP_SUPPORT && (NO_SYS == 0))
   LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS=0
   LWIP_RAW=0
   LWIP_SETGETSOCKOPT_MAXOPTLEN=16
   LWIP_SOCKET=1
   lwip_socket_init()=
   LWIP_SOCKET_OFFSET=0
   LWIP_SOCKET_SET_ERRNO=1
   LWIP_SO_LINGER=0
   LWIP_SO_RCVBUF=0
   LWIP_SO_RCVTIMEO=0
   LWIP_SO_SNDRCVTIMEO_NONSTANDARD=0
   LWIP_SO_SNDTIMEO=0
   LWIP_STATS=0
   LWIP_STATS_DISPLAY=0
   lwip_strerr(x)=""
   LWIP_TCP=1
   LWIP_TCPIP_CORE_LOCKING=0
   LWIP_TCPIP_CORE_LOCKING_INPUT=0
   LWIP_TCPIP_TIMEOUT=0
   LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT=20000
   LWIP_TCP_KEEPALIVE=0
   LWIP_TCP_TIMESTAMPS=0
   LWIP_TIMEVAL_PRIVATE=1
   LWIP_UDP=1
   LWIP_UDPLITE=0
   LWIP_UNUSED_ARG(x)=(void)x
   LWIP_WND_SCALE=0
   L_cuserid=9
   L_tmpnam=FILENAME_MAX
   MAC2STR(a)=(a)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]
   MACSTR="%02x:%02x:%02x:%02x:%02x:%02x"
   MALLOC_ALIGNMENT=((XCHAL_DATA_WIDTH) < 16 ? 16 : (XCHAL_DATA_WIDTH))
   MB_CUR_MAX=__locale_mb_cur_max()
   MB_LEN_MAX=_MB_LEN_MAX
   MEMCPY(dst,src,len)=memcpy(dst,src,len)
   MEMCTL=97
   MEMCTL_DCWA_BITS=5
   MEMCTL_DCWA_CLR_MASK=~(MEMCTL_DCWA_MASK)
   MEMCTL_DCWA_MASK=0x0003E000
   MEMCTL_DCWA_SHIFT=13
   MEMCTL_DCWU_BITS=5
   MEMCTL_DCWU_CLR_MASK=~(MEMCTL_DCWU_MASK)
   MEMCTL_DCWU_MASK=0x00001F00
   MEMCTL_DCWU_SHIFT=8
   MEMCTL_DCW_CLR_MASK=(MEMCTL_DCWU_CLR_MASK | MEMCTL_DCWA_CLR_MASK)
   MEMCTL_ICWU_BITS=5
   MEMCTL_ICWU_CLR_MASK=~(MEMCTL_ICWU_MASK)
   MEMCTL_ICWU_MASK=0x007C0000
   MEMCTL_ICWU_SHIFT=18
   MEMCTL_IDCW_CLR_MASK=(MEMCTL_DCW_CLR_MASK | MEMCTL_ICWU_CLR_MASK)
   MEMCTL_INV_EN=0x00800000
   MEMCTL_INV_EN_SHIFT=23
   MEMCTL_L0IBUF_EN=0x01
   MEMCTL_L0IBUF_EN_SHIFT=0
   MEMCTL_SNOOP_EN=0x02
   MEMCTL_SNOOP_EN_SHIFT=1
   MEMP_DEBUG=LWIP_DBG_OFF
   MEMP_MEM_MALLOC=0
   MEMP_NUM_API_MSG=MEMP_NUM_TCPIP_MSG_API
   MEMP_NUM_ARP_QUEUE=30
   MEMP_NUM_DNS_API_MSG=MEMP_NUM_TCPIP_MSG_API
   MEMP_NUM_FRAG_PBUF=15
   MEMP_NUM_IGMP_GROUP=8
   MEMP_NUM_LOCALHOSTLIST=1
   MEMP_NUM_MLD6_GROUP=4
   MEMP_NUM_ND6_QUEUE=20
   MEMP_NUM_NETBUF=2
   MEMP_NUM_NETCONN=4
   MEMP_NUM_NETDB=1
   MEMP_NUM_NETIFAPI_MSG=MEMP_NUM_TCPIP_MSG_API
   MEMP_NUM_PBUF=16
   MEMP_NUM_PPPOE_INTERFACES=1
   MEMP_NUM_PPPOL2TP_INTERFACES=1
   MEMP_NUM_PPPOS_INTERFACES=MEMP_NUM_PPP_PCB
   MEMP_NUM_PPP_PCB=1
   MEMP_NUM_RAW_PCB=4
   MEMP_NUM_REASSDATA=5
   MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA=MEMP_NUM_TCPIP_MSG_API
   MEMP_NUM_SYS_TIMEOUT=(LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + (PPP_SUPPORT*6*MEMP_NUM_PPP_PCB) + (LWIP_IPV6 ? (1 + LWIP_IPV6_REASS + LWIP_IPV6_MLD) : 0))
   MEMP_NUM_TCPIP_MSG_API=8
   MEMP_NUM_TCPIP_MSG_INPKT=8
   MEMP_NUM_TCP_PCB=5
   MEMP_NUM_TCP_PCB_LISTEN=8
   MEMP_NUM_TCP_SEG=16
   MEMP_NUM_UDP_PCB=4
   MEMP_OVERFLOW_CHECK=0
   MEMP_SANITY_CHECK=0
   MEMP_STATS=0
   MEMP_USE_CUSTOM_POOLS=0
   MEM_ALIGNMENT=1
   MEM_DEBUG=LWIP_DBG_OFF
   MEM_LIBC_MALLOC=0
   MEM_SIZE=1600
   MEM_STATS=0
   MEM_USE_POOLS=0
   MEM_USE_POOLS_TRY_BIGGER_POOL=0
   MESR_ACCTYPE_SHIFT=20
   MESR_DATEXC=0x00000400
   MESR_DATEXC_SHIFT=10
   MESR_DME=0x00000002
   MESR_DME_SHIFT=1
   MESR_ERRENAB=0x00000100
   MESR_ERRENAB_SHIFT=8
   MESR_ERRTEST=0x00000200
   MESR_ERRTEST_SHIFT=9
   MESR_ERRTYPE_SHIFT=30
   MESR_INSEXC=0x00000800
   MESR_INSEXC_SHIFT=11
   MESR_LCE=
   MESR_LCE_L=
   MESR_LCE_SHIFT=?
   MESR_MEME=0x00000001
   MESR_MEME_SHIFT=0
   MESR_MEMTYPE_SHIFT=24
   MESR_RCE=0x00000010
   MESR_RCE_SHIFT=4
   MESR_WAYNUM_SHIFT=16
   MIB2_STATS=0
   MISC_REG_0=244
   MISC_REG_1=245
   MISC_REG_2=246
   MISC_REG_3=247
   MLD6_STATS=0
   MPU_WRAPPERS_H=
   mqtt_error(format,...)=printf( "[MQTT ERROR] " format "\n", ##__VA_ARGS__)
   mqtt_info(format,...)=printf( "[MQTT INFO] " format "\n", ##__VA_ARGS__)
   MQTT_MSG_H=
   mqtt_warn(format,...)=printf( "[MQTT WARN] " format "\n", ##__VA_ARGS__)
   MR=32
   MR_0=32
   MR_1=33
   MR_2=34
   MR_3=35
   MSG_DONTWAIT=0x08
   MSG_MORE=0x10
   MSG_OOB=0x04
   MSG_PEEK=0x01
   MSG_WAITALL=0x02
   mtCOVERAGE_TEST_MARKER()=
   NBBY=8
   ND6_STATS=0
   NETIF_DEBUG=LWIP_DBG_OFF
   NFDBITS=(sizeof (fd_mask) * NBBY)
   NL_ARGMAX=32
   NO_SYS=0
   NO_SYS_NO_TIMERS=0
   ntohl(x)=lwip_ntohl(x)
   ntohs(x)=lwip_ntohs(x)
   NULL=((void *)0)
   offsetof(TYPE,MEMBER)=__builtin_offsetof (TYPE, MEMBER)
   O_NDELAY=1
   O_NONBLOCK=1
   PACK_STRUCT_BEGIN=
   PACK_STRUCT_END=
   PACK_STRUCT_FIELD(x)=x
   PACK_STRUCT_FLD_8(x)=PACK_STRUCT_FIELD(x)
   PACK_STRUCT_FLD_S(x)=PACK_STRUCT_FIELD(x)
   PACK_STRUCT_STRUCT=
   PATH_MAX=4096
   PBUF_DEBUG=LWIP_DBG_OFF
   PBUF_LINK_ENCAPSULATION_HLEN=0
   PBUF_LINK_HLEN=(14 + ETH_PAD_SIZE)
   PBUF_POOL_BUFSIZE=LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_ENCAPSULATION_HLEN+PBUF_LINK_HLEN)
   PBUF_POOL_SIZE=16
   pdFAIL=( pdFALSE )
   pdFALSE=( ( BaseType_t ) 0 )
   pdINTEGRITY_CHECK_VALUE=0x5a5a5a5aUL
   pdMS_TO_TICKS(xTimeInMs)=( ( ( TickType_t ) ( xTimeInMs ) * configTICK_RATE_HZ ) / ( TickType_t ) 1000 )
   pdPASS=( pdTRUE )
   pdTASK_CODE=TaskFunction_t
   pdTASK_HOOK_CODE=TaskHookFunction_t
   pdTRUE=( ( BaseType_t ) 1 )
   PERF_START=
   PERF_STOP(x)=
   PF_INET6=AF_INET6
   PF_INET=AF_INET
   PF_UNSPEC=AF_UNSPEC
   physadr=physadr_t
   PORTABLE_H=
   portASSERT_IF_INTERRUPT_PRIORITY_INVALID()=
   portASSERT_IF_IN_ISR()=vPortAssertIfInISR()
   portBASE_TYPE=int
   portbenchmarkINTERRUPT_DISABLE()=
   portbenchmarkINTERRUPT_RESTORE(newstate)=
   portbenchmarkIntLatency()=
   portbenchmarkIntWait()=
   portbenchmarkPrint()=
   portbenchmarkReset()=
   PORTBENCHMARK_H=
   portBYTE_ALIGNMENT=4
   portBYTE_ALIGNMENT_MASK=( 0x0003 )
   portCHAR=int8_t
   portCLEAN_UP_TCB(pxTCB)=( void ) pxTCB
   portCLEAR_INTERRUPT_MASK_FROM_ISR(state)=portEXIT_CRITICAL_NESTED(state)
   portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()=
   portCRITICAL_NESTING_IN_TCB=1
   portDISABLE_INTERRUPTS()=do { XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL); portbenchmarkINTERRUPT_DISABLE(); } while (0)
   portDOUBLE=double
   portENABLE_INTERRUPTS()=do { portbenchmarkINTERRUPT_RESTORE(0); XTOS_SET_INTLEVEL(0); } while (0)
   portENTER_CRITICAL(mux)=vTaskEnterCritical(mux)
   portENTER_CRITICAL_ISR(mux)=vPortCPUAcquireMutex(mux)
   portEXIT_CRITICAL(mux)=vTaskExitCritical(mux)
   portEXIT_CRITICAL_ISR(mux)=vPortCPUReleaseMutex(mux)
   portEXIT_CRITICAL_NESTED(state)=do { portbenchmarkINTERRUPT_RESTORE(state); XTOS_RESTORE_JUST_INTLEVEL(state); } while (0)
   portFIRST_TASK_HOOK=CONFIG_FREERTOS_BREAK_ON_SCHEDULER_START_JTAG
   portFLOAT=float
   portGET_RUN_TIME_COUNTER_VALUE()=xthal_get_ccount()
   portLONG=int32_t
   PORTMACRO_H=
   portMAX_DELAY=( TickType_t ) 0xffffffffUL
   portMUX_CNT_MASK=0x0000FF00
   portMUX_CNT_SHIFT=8
   portMUX_FREE_VAL=0xB33FFFFF
   portMUX_INITIALIZER_UNLOCKED={ .mux = portMUX_MAGIC_VAL|portMUX_FREE_VAL }
   portMUX_MAGIC_MASK=0xFFFF0000
   portMUX_MAGIC_SHIFT=16
   portMUX_MAGIC_VAL=0xB33F0000
   portMUX_VAL_MASK=0x000000FF
   portMUX_VAL_SHIFT=0
   portNOP()=XT_NOP()
   portNUM_CONFIGURABLE_REGIONS=1
   portNUM_PROCESSORS=2
   portPOINTER_SIZE_TYPE=uint32_t
   portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPending)=
   portPRIVILEGE_BIT=( ( UBaseType_t ) 0x00 )
   portSETUP_TCB(pxTCB)=( void ) pxTCB
   portSET_INTERRUPT_MASK_FROM_ISR()=portENTER_CRITICAL_NESTED()
   portSHORT=int16_t
   portSTACK_GROWTH=( -1 )
   portSTACK_TYPE=uint8_t
   portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime)=
   portTASK_FUNCTION(vFunction,pvParameters)=void vFunction( void *pvParameters )
   portTASK_FUNCTION_PROTO(vFunction,pvParameters)=void vFunction( void *pvParameters )
   portTASK_USES_FLOATING_POINT()=
   portTickType=TickType_t
   portTICK_PERIOD_MS=( ( TickType_t ) 1000 / configTICK_RATE_HZ )
   portTICK_RATE_MS=portTICK_PERIOD_MS
   portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR(x)=portCLEAR_INTERRUPT_MASK_FROM_ISR( ( x ) )
   portTICK_TYPE_ENTER_CRITICAL(mux)=portENTER_CRITICAL(mux)
   portTICK_TYPE_EXIT_CRITICAL(mux)=portEXIT_CRITICAL(mux)
   portTICK_TYPE_IS_ATOMIC=0
   portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR()=portSET_INTERRUPT_MASK_FROM_ISR()
   portUSING_MPU_WRAPPERS=0
   portUSING_MPU_WRAPPERS=1
   portYIELD()=vPortYield()
   portYIELD_FROM_ISR()=_frxt_setup_switch()
   portYIELD_WITHIN_API()=esp_crosscore_int_send_yield(xPortGetCoreID())
   PPPOE_SUPPORT=0
   PPPOL2TP_AUTH_SUPPORT=PPPOL2TP_SUPPORT
   PPPOL2TP_SUPPORT=0
   PPPOS_SUPPORT=PPP_SUPPORT
   PPP_DEBUG=LWIP_DBG_OFF
   PPP_SUPPORT=0
   PP_HTONL(x)=((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | (((x) & 0xff0000UL) >> 8) | (((x) & 0xff000000UL) >> 24))
   PP_HTONS(x)=((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
   PP_NTOHL(x)=PP_HTONL(x)
   PP_NTOHS(x)=PP_HTONS(x)
   PRID=235
   PRIVILEGED_DATA=
   PRIVILEGED_FUNCTION=
   PROJDEFS_H=
   PS=230
   PS_CALLINC(n)=(((n)&3)<<PS_CALLINC_SHIFT)
   PS_CALLINC_MASK=0x00030000
   PS_CALLINC_SHIFT=16
   PS_EXCM=PS_EXCM_MASK
   PS_EXCM_MASK=0x00000010
   PS_EXCM_SHIFT=4
   PS_INTLEVEL(n)=((n)&PS_INTLEVEL_MASK)
   PS_INTLEVEL_MASK=0x0000000F
   PS_INTLEVEL_SHIFT=0
   PS_OWB(n)=(((n)&15)<<PS_OWB_SHIFT)
   PS_OWB_MASK=0x00000F00
   PS_OWB_SHIFT=8
   PS_PROG=PS_UM
   PS_PROGSTACK_MASK=PS_UM_MASK
   PS_PROGSTACK_SHIFT=PS_UM_SHIFT
   PS_PROG_MASK=PS_UM_MASK
   PS_PROG_SHIFT=PS_UM_SHIFT
   PS_RING(n)=(((n)&3)<<PS_RING_SHIFT)
   PS_RING_MASK=0x000000C0
   PS_RING_SHIFT=6
   PS_UM=PS_UM_MASK
   PS_UM_MASK=0x00000020
   PS_UM_SHIFT=5
   PS_WOE=PS_WOE_MASK
   PS_WOE_MASK=0x00040000
   PS_WOE_SHIFT=18
   PTRDIFF_MAX=__PTRDIFF_MAX__
   PTRDIFF_MIN=(-PTRDIFF_MAX - 1)
   putc(x,fp)=__sputc_r(_REENT, x, fp)
   putchar(x)=putc(x, stdout)
   putchar_unlocked(x)=putc_unlocked(x, stdout)
   pvPortMallocAligned(x,puxStackBuffer)=( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )
   P_tmpdir="/tmp"
   QMD_LIST_CHECK_HEAD(head,field)=
   QMD_LIST_CHECK_NEXT(elm,field)=
   QMD_LIST_CHECK_PREV(elm,field)=
   QMD_SAVELINK(name,link)=
   QMD_TAILQ_CHECK_HEAD(head,field)=
   QMD_TAILQ_CHECK_NEXT(elm,field)=
   QMD_TAILQ_CHECK_PREV(elm,field)=
   QMD_TAILQ_CHECK_TAIL(head,headname)=
   QMD_TRACE_ELEM(elem)=
   QMD_TRACE_HEAD(head)=
   quad=quad_t
   queueOVERWRITE=( ( BaseType_t ) 2 )
   queueQUEUE_TYPE_BASE=( ( uint8_t ) 0U )
   queueQUEUE_TYPE_BINARY_SEMAPHORE=( ( uint8_t ) 3U )
   queueQUEUE_TYPE_COUNTING_SEMAPHORE=( ( uint8_t ) 2U )
   queueQUEUE_TYPE_MUTEX=( ( uint8_t ) 1U )
   queueQUEUE_TYPE_RECURSIVE_MUTEX=( ( uint8_t ) 4U )
   queueQUEUE_TYPE_SET=( ( uint8_t ) 0U )
   queueSEND_TO_BACK=( ( BaseType_t ) 0 )
   queueSEND_TO_FRONT=( ( BaseType_t ) 1 )
   QUEUE_H=
   RAND_MAX=__RAND_MAX
   RAW_DEBUG=LWIP_DBG_OFF
   RAW_TTL=(IP_DEFAULT_TTL)
   read(s,mem,len)=lwip_read(s,mem,len)
   recv(s,mem,len,flags)=lwip_recv(s,mem,len,flags)
   recvfrom(s,mem,len,flags,from,fromlen)=lwip_recvfrom(s,mem,len,flags,from,fromlen)
   RECV_BUFSIZE_DEFAULT=INT_MAX
   s6_addr=un.u8_addr
   SAR=3
   SCHAR_MAX=__SCHAR_MAX__
   SCHAR_MIN=(-SCHAR_MAX - 1)
   SCOMPARE1=12
   SEEK_CUR=1
   SEEK_END=2
   SEEK_SET=0
   select(maxfdp1,readset,writeset,exceptset,timeout)=lwip_select(maxfdp1,readset,writeset,exceptset,timeout)
   SEMAPHORE_H=
   semBINARY_SEMAPHORE_QUEUE_LENGTH=( ( uint8_t ) 1U )
   semGIVE_BLOCK_TIME=( ( TickType_t ) 0U )
   semSEMAPHORE_QUEUE_ITEM_LENGTH=( ( uint8_t ) 0U )
   send(s,dataptr,size,flags)=lwip_send(s,dataptr,size,flags)
   sendmsg(s,message,flags)=lwip_sendmsg(s,message,flags)
   sendto(s,dataptr,size,flags,to,tolen)=lwip_sendto(s,dataptr,size,flags,to,tolen)
   setsockopt(s,level,optname,opval,optlen)=lwip_setsockopt(s,level,optname,opval,optlen)
   SHRT_MAX=__SHRT_MAX__
   SHRT_MIN=(-SHRT_MAX - 1)
   shutdown(s,how)=lwip_shutdown(s,how)
   SHUT_RD=0
   SHUT_RDWR=2
   SHUT_WR=1
   SIG_ATOMIC_MAX=__STDINT_EXP(INT_MAX)
   SIG_ATOMIC_MIN=(-__STDINT_EXP(INT_MAX) - 1)
   SIN_ZERO_LEN=8
   SIOCATMARK=_IOR('s', 7, unsigned long)
   SIOCGHIWAT=_IOR('s', 1, unsigned long)
   SIOCGLOWAT=_IOR('s', 3, unsigned long)
   SIOCSHIWAT=_IOW('s', 0, unsigned long)
   SIOCSLOWAT=_IOW('s', 2, unsigned long)
   SIZE_MAX=__SIZE_MAX__
   SLIPIF_THREAD_NAME="slipif_loop"
   SLIPIF_THREAD_PRIO=1
   SLIPIF_THREAD_STACKSIZE=0
   SLIP_DEBUG=LWIP_DBG_OFF
   SLIST_EMPTY(head)=((head)->slh_first == NULL)
   SLIST_ENTRY(type)=struct { struct type *sle_next; }
   SLIST_FIRST(head)=((head)->slh_first)
   SLIST_FOREACH(var,head,field)=for ((var) = SLIST_FIRST((head)); (var); (var) = SLIST_NEXT((var), field))
   SLIST_FOREACH_PREVPTR(var,varp,head,field)=for ((varp) = &SLIST_FIRST((head)); ((var) = *(varp)) != NULL; (varp) = &SLIST_NEXT((var), field))
   SLIST_FOREACH_SAFE(var,head,field,tvar)=for ((var) = SLIST_FIRST((head)); (var) && ((tvar) = SLIST_NEXT((var), field), 1); (var) = (tvar))
   SLIST_HEAD(name,type)=struct name { struct type *slh_first; }
   SLIST_HEAD_INITIALIZER(head)={ NULL }
   SLIST_INIT(head)=do { SLIST_FIRST((head)) = NULL; } while (0)
   SLIST_INSERT_AFTER(slistelm,elm,field)=do { SLIST_NEXT((elm), field) = SLIST_NEXT((slistelm), field); SLIST_NEXT((slistelm), field) = (elm); } while (0)
   SLIST_INSERT_HEAD(head,elm,field)=do { SLIST_NEXT((elm), field) = SLIST_FIRST((head)); SLIST_FIRST((head)) = (elm); } while (0)
   SLIST_NEXT(elm,field)=((elm)->field.sle_next)
   SLIST_REMOVE(head,elm,type,field)=do { QMD_SAVELINK(oldnext, (elm)->field.sle_next); if (SLIST_FIRST((head)) == (elm)) { SLIST_REMOVE_HEAD((head), field); } else { struct type *curelm = SLIST_FIRST((head)); while (SLIST_NEXT(curelm, field) != (elm)) curelm = SLIST_NEXT(curelm, field); SLIST_REMOVE_AFTER(curelm, field); } TRASHIT(*oldnext); } while (0)
   SLIST_REMOVE_AFTER(elm,field)=do { SLIST_NEXT(elm, field) = SLIST_NEXT(SLIST_NEXT(elm, field), field); } while (0)
   SLIST_REMOVE_HEAD(head,field)=do { SLIST_FIRST((head)) = SLIST_NEXT(SLIST_FIRST((head)), field); } while (0)
   SMEMCPY(dst,src,len)=memcpy(dst,src,len)
   socket(domain,type,protocol)=lwip_socket(domain,type,protocol)
   SOCKETS_DEBUG=LWIP_DBG_OFF
   SOCK_DGRAM=2
   SOCK_RAW=3
   SOCK_STREAM=1
   SOL_SOCKET=0xfff
   SO_ACCEPTCONN=0x0002
   SO_BROADCAST=0x0020
   SO_CONTIMEO=0x1009
   SO_DEBUG=0x0001
   SO_DONTLINGER=((int)(~SO_LINGER))
   SO_DONTROUTE=0x0010
   SO_ERROR=0x1007
   SO_KEEPALIVE=0x0008
   SO_LINGER=0x0080
   SO_NO_CHECK=0x100a
   SO_OOBINLINE=0x0100
   SO_RCVBUF=0x1002
   SO_RCVLOWAT=0x1004
   SO_RCVTIMEO=0x1006
   SO_REUSE=0
   SO_REUSEADDR=0x0004
   SO_REUSEPORT=0x0200
   SO_REUSE_RXTOALL=0
   SO_SNDBUF=0x1001
   SO_SNDLOWAT=0x1003
   SO_SNDTIMEO=0x1005
   SO_TYPE=0x1008
   SO_USELOOPBACK=0x0040
   STAILQ_CONCAT(head1,head2)=do { if (!STAILQ_EMPTY((head2))) { *(head1)->stqh_last = (head2)->stqh_first; (head1)->stqh_last = (head2)->stqh_last; STAILQ_INIT((head2)); } } while (0)
   STAILQ_EMPTY(head)=((head)->stqh_first == NULL)
   STAILQ_ENTRY(type)=struct { struct type *stqe_next; }
   STAILQ_FIRST(head)=((head)->stqh_first)
   STAILQ_FOREACH(var,head,field)=for((var) = STAILQ_FIRST((head)); (var); (var) = STAILQ_NEXT((var), field))
   STAILQ_FOREACH_SAFE(var,head,field,tvar)=for ((var) = STAILQ_FIRST((head)); (var) && ((tvar) = STAILQ_NEXT((var), field), 1); (var) = (tvar))
   STAILQ_HEAD(name,type)=struct name { struct type *stqh_first; struct type **stqh_last; }
   STAILQ_HEAD_INITIALIZER(head)={ NULL, &(head).stqh_first }
   STAILQ_INIT(head)=do { STAILQ_FIRST((head)) = NULL; (head)->stqh_last = &STAILQ_FIRST((head)); } while (0)
   STAILQ_INSERT_AFTER(head,tqelm,elm,field)=do { if ((STAILQ_NEXT((elm), field) = STAILQ_NEXT((tqelm), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_NEXT((tqelm), field) = (elm); } while (0)
   STAILQ_INSERT_CHAIN_HEAD(head,elm_chead,elm_ctail,field)=do { if ((STAILQ_NEXT(elm_ctail, field) = STAILQ_FIRST(head)) == NULL ) { (head)->stqh_last = &STAILQ_NEXT(elm_ctail, field); } STAILQ_FIRST(head) = (elm_chead); } while (0)
   STAILQ_INSERT_HEAD(head,elm,field)=do { if ((STAILQ_NEXT((elm), field) = STAILQ_FIRST((head))) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_FIRST((head)) = (elm); } while (0)
   STAILQ_INSERT_TAIL(head,elm,field)=do { STAILQ_NEXT((elm), field) = NULL; *(head)->stqh_last = (elm); (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0)
   STAILQ_LAST(head,type,field)=(STAILQ_EMPTY((head)) ? NULL : ((struct type *)(void *) ((char *)((head)->stqh_last) - __offsetof(struct type, field))))
   STAILQ_NEXT(elm,field)=((elm)->field.stqe_next)
   STAILQ_REMOVE(head,elm,type,field)=do { QMD_SAVELINK(oldnext, (elm)->field.stqe_next); if (STAILQ_FIRST((head)) == (elm)) { STAILQ_REMOVE_HEAD((head), field); } else { struct type *curelm = STAILQ_FIRST((head)); while (STAILQ_NEXT(curelm, field) != (elm)) curelm = STAILQ_NEXT(curelm, field); STAILQ_REMOVE_AFTER(head, curelm, field); } TRASHIT(*oldnext); } while (0)
   STAILQ_REMOVE_AFTER(head,elm,field)=do { if ((STAILQ_NEXT(elm, field) = STAILQ_NEXT(STAILQ_NEXT(elm, field), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0)
   STAILQ_REMOVE_HEAD(head,field)=do { if ((STAILQ_FIRST((head)) = STAILQ_NEXT(STAILQ_FIRST((head)), field)) == NULL) (head)->stqh_last = &STAILQ_FIRST((head)); } while (0)
   STAILQ_SWAP(head1,head2,type)=do { struct type *swap_first = STAILQ_FIRST(head1); struct type **swap_last = (head1)->stqh_last; STAILQ_FIRST(head1) = STAILQ_FIRST(head2); (head1)->stqh_last = (head2)->stqh_last; STAILQ_FIRST(head2) = swap_first; (head2)->stqh_last = swap_last; if (STAILQ_EMPTY(head1)) (head1)->stqh_last = &STAILQ_FIRST(head1); if (STAILQ_EMPTY(head2)) (head2)->stqh_last = &STAILQ_FIRST(head2); } while (0)
   stderr=(_REENT->_stderr)
   stdin=(_REENT->_stdin)
   stdout=(_REENT->_stdout)
   STK_INTEXC_EXTRA=0
   strtodf=strtof
   STRUCT_AFIELD(ctype,size,asname,name,n)=ctype name[n];
   STRUCT_AFIELD(ctype,size,pre,name,n)=ctype name[n];
   STRUCT_AFIELD_A(ctype,size,align,pre,name,n)=ctype name[n] __attribute__((aligned(align)));
   STRUCT_BEGIN=typedef struct {
   STRUCT_END(sname)=} sname;
   STRUCT_FIELD(ctype,size,asname,name)=ctype name;
   STRUCT_FIELD(ctype,size,pre,name)=ctype name;
   SYS_DEBUG=LWIP_DBG_OFF
   SYS_LIGHTWEIGHT_PROT=0
   SYS_STATS=0
   SZT_F=U32_F
   TAILQ_CONCAT(head1,head2,field)=do { if (!TAILQ_EMPTY(head2)) { *(head1)->tqh_last = (head2)->tqh_first; (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last; (head1)->tqh_last = (head2)->tqh_last; TAILQ_INIT((head2)); QMD_TRACE_HEAD(head1); QMD_TRACE_HEAD(head2); } } while (0)
   TAILQ_EMPTY(head)=((head)->tqh_first == NULL)
   TAILQ_ENTRY(type)=struct { struct type *tqe_next; struct type **tqe_prev; TRACEBUF }
   TAILQ_FIRST(head)=((head)->tqh_first)
   TAILQ_FOREACH(var,head,field)=for ((var) = TAILQ_FIRST((head)); (var); (var) = TAILQ_NEXT((var), field))
   TAILQ_FOREACH_REVERSE(var,head,headname,field)=for ((var) = TAILQ_LAST((head), headname); (var); (var) = TAILQ_PREV((var), headname, field))
   TAILQ_FOREACH_REVERSE_SAFE(var,head,headname,field,tvar)=for ((var) = TAILQ_LAST((head), headname); (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1); (var) = (tvar))
   TAILQ_FOREACH_SAFE(var,head,field,tvar)=for ((var) = TAILQ_FIRST((head)); (var) && ((tvar) = TAILQ_NEXT((var), field), 1); (var) = (tvar))
   TAILQ_HEAD(name,type)=struct name { struct type *tqh_first; struct type **tqh_last; TRACEBUF }
   TAILQ_HEAD_INITIALIZER(head)={ NULL, &(head).tqh_first }
   TAILQ_INIT(head)=do { TAILQ_FIRST((head)) = NULL; (head)->tqh_last = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); } while (0)
   TAILQ_INSERT_AFTER(head,listelm,elm,field)=do { QMD_TAILQ_CHECK_NEXT(listelm, field); if ((TAILQ_NEXT((elm), field) = TAILQ_NEXT((listelm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = &TAILQ_NEXT((elm), field); else { (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); } TAILQ_NEXT((listelm), field) = (elm); (elm)->field.tqe_prev = &TAILQ_NEXT((listelm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0)
   TAILQ_INSERT_BEFORE(listelm,elm,field)=do { QMD_TAILQ_CHECK_PREV(listelm, field); (elm)->field.tqe_prev = (listelm)->field.tqe_prev; TAILQ_NEXT((elm), field) = (listelm); *(listelm)->field.tqe_prev = (elm); (listelm)->field.tqe_prev = &TAILQ_NEXT((elm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0)
   TAILQ_INSERT_HEAD(head,elm,field)=do { QMD_TAILQ_CHECK_HEAD(head, field); if ((TAILQ_NEXT((elm), field) = TAILQ_FIRST((head))) != NULL) TAILQ_FIRST((head))->field.tqe_prev = &TAILQ_NEXT((elm), field); else (head)->tqh_last = &TAILQ_NEXT((elm), field); TAILQ_FIRST((head)) = (elm); (elm)->field.tqe_prev = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0)
   TAILQ_INSERT_TAIL(head,elm,field)=do { QMD_TAILQ_CHECK_TAIL(head, field); TAILQ_NEXT((elm), field) = NULL; (elm)->field.tqe_prev = (head)->tqh_last; *(head)->tqh_last = (elm); (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0)
   TAILQ_LAST(head,headname)=(*(((struct headname *)((head)->tqh_last))->tqh_last))
   TAILQ_NEXT(elm,field)=((elm)->field.tqe_next)
   TAILQ_PREV(elm,headname,field)=(*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))
   TAILQ_REMOVE(head,elm,field)=do { QMD_SAVELINK(oldnext, (elm)->field.tqe_next); QMD_SAVELINK(oldprev, (elm)->field.tqe_prev); QMD_TAILQ_CHECK_NEXT(elm, field); QMD_TAILQ_CHECK_PREV(elm, field); if ((TAILQ_NEXT((elm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = (elm)->field.tqe_prev; else { (head)->tqh_last = (elm)->field.tqe_prev; QMD_TRACE_HEAD(head); } *(elm)->field.tqe_prev = TAILQ_NEXT((elm), field); TRASHIT(*oldnext); TRASHIT(*oldprev); QMD_TRACE_ELEM(&(elm)->field); } while (0)
   TAILQ_SWAP(head1,head2,type,field)=do { struct type *swap_first = (head1)->tqh_first; struct type **swap_last = (head1)->tqh_last; (head1)->tqh_first = (head2)->tqh_first; (head1)->tqh_last = (head2)->tqh_last; (head2)->tqh_first = swap_first; (head2)->tqh_last = swap_last; if ((swap_first = (head1)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head1)->tqh_first; else (head1)->tqh_last = &(head1)->tqh_first; if ((swap_first = (head2)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head2)->tqh_first; else (head2)->tqh_last = &(head2)->tqh_first; } while (0)
   taskDISABLE_INTERRUPTS()=portDISABLE_INTERRUPTS()
   taskENABLE_INTERRUPTS()=portENABLE_INTERRUPTS()
   taskENTER_CRITICAL(mux)=portENTER_CRITICAL(mux)
   taskENTER_CRITICAL_ISR(mux)=portENTER_CRITICAL_ISR(mux)
   taskEXIT_CRITICAL(mux)=portEXIT_CRITICAL(mux)
   taskEXIT_CRITICAL_ISR(mux)=portEXIT_CRITICAL_ISR(mux)
   taskSCHEDULER_NOT_STARTED=( ( BaseType_t ) 1 )
   taskSCHEDULER_RUNNING=( ( BaseType_t ) 2 )
   taskSCHEDULER_SUSPENDED=( ( BaseType_t ) 0 )
   taskYIELD()=portYIELD()
   TCPIP_ADAPTER_IPC_CALL(_if,_mac,_ip,_hostname,_fn)=do { tcpip_adapter_api_msg_t msg; memset(&msg, 0, sizeof(msg)); msg.tcpip_if = (_if); msg.mac = (_mac); msg.ip_info = (_ip); msg.hostname = (_hostname); msg.api_fn = (_fn); if (TCPIP_ADAPTER_IPC_REMOTE == tcpip_adapter_ipc_check(&msg)) { ESP_LOGD(TAG, "check: remote, if=%d fn=%p\n", (_if), (_fn)); return msg.ret; } else { ESP_LOGD(TAG, "check: local, if=%d fn=%p\n", (_if), (_fn)); }}while(0)
   TCPIP_ADAPTER_IPC_LOCAL=0
   TCPIP_ADAPTER_IPC_REMOTE=1
   TCPIP_ADAPTER_TRHEAD_SAFE=1
   TCPIP_DEBUG=LWIP_DBG_OFF
   TCPIP_HOSTNAME_MAX_SIZE=32
   TCPIP_MBOX_SIZE=0
   TCPIP_THREAD_NAME="tcpip_thread"
   TCPIP_THREAD_PRIO=1
   TCPIP_THREAD_STACKSIZE=0
   TCP_CALCULATE_EFF_SEND_MSS=1
   TCP_CWND_DEBUG=LWIP_DBG_OFF
   TCP_DEBUG=LWIP_DBG_OFF
   TCP_DEFAULT_LISTEN_BACKLOG=0xff
   TCP_FR_DEBUG=LWIP_DBG_OFF
   TCP_INPUT_DEBUG=LWIP_DBG_OFF
   TCP_KEEPALIVE=0x02
   TCP_KEEPCNT=0x05
   TCP_KEEPIDLE=0x03
   TCP_KEEPINTVL=0x04
   TCP_LISTEN_BACKLOG=0
   TCP_MAXRTX=12
   TCP_MSS=536
   TCP_NODELAY=0x01
   TCP_OOSEQ_MAX_BYTES=0
   TCP_OOSEQ_MAX_PBUFS=0
   TCP_OUTPUT_DEBUG=LWIP_DBG_OFF
   TCP_OVERSIZE=TCP_MSS
   TCP_QLEN_DEBUG=LWIP_DBG_OFF
   TCP_QUEUE_OOSEQ=(LWIP_TCP)
   TCP_RCV_SCALE=0
   TCP_RST_DEBUG=LWIP_DBG_OFF
   TCP_RTO_DEBUG=LWIP_DBG_OFF
   TCP_SNDLOWAT(pcb)=LWIP_MIN(LWIP_MAX(((TCP_SND_BUF((pcb)))/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF((pcb))) - 1)
   TCP_SNDQUEUELOWAT(pcb)=LWIP_MAX(((TCP_SND_QUEUELEN((pcb)))/2), 5)
   TCP_SND_BUF(pcb)=(2 * TCP_MSS)
   TCP_SND_QUEUELEN(pcb)=((4 * (TCP_SND_BUF((pcb))) + (TCP_MSS - 1))/(TCP_MSS))
   TCP_STATS=0
   TCP_SYNMAXRTX=6
   TCP_TTL=(IP_DEFAULT_TTL)
   TCP_WND(pcb)=(4 * TCP_MSS)
   TCP_WND_DEBUG=LWIP_DBG_OFF
   TCP_WND_UPDATE_THRESHOLD(pcb)=LWIP_MIN((TCP_WND((pcb)) / 4), (TCP_MSS * 4))
   TIMERS_DEBUG=LWIP_DBG_OFF
   TIMERS_H=
   TMP_MAX=26
   tmrCOMMAND_CHANGE_PERIOD=( ( BaseType_t ) 4 )
   tmrCOMMAND_CHANGE_PERIOD_FROM_ISR=( ( BaseType_t ) 9 )
   tmrCOMMAND_DELETE=( ( BaseType_t ) 5 )
   tmrCOMMAND_EXECUTE_CALLBACK=( ( BaseType_t ) -1 )
   tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR=( ( BaseType_t ) -2 )
   tmrCOMMAND_RESET=( ( BaseType_t ) 2 )
   tmrCOMMAND_RESET_FROM_ISR=( ( BaseType_t ) 7 )
   tmrCOMMAND_START=( ( BaseType_t ) 1 )
   tmrCOMMAND_START_DONT_TRACE=( ( BaseType_t ) 0 )
   tmrCOMMAND_START_FROM_ISR=( ( BaseType_t ) 6 )
   tmrCOMMAND_STOP=( ( BaseType_t ) 3 )
   tmrCOMMAND_STOP_FROM_ISR=( ( BaseType_t ) 8 )
   tmrFIRST_FROM_ISR_COMMAND=( ( BaseType_t ) 6 )
   tmrTIMER_CALLBACK=TimerCallbackFunction_t
   traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue)=
   traceBLOCKING_ON_QUEUE_SEND(pxQueue)=
   TRACEBUF=
   traceCREATE_COUNTING_SEMAPHORE()=
   traceCREATE_COUNTING_SEMAPHORE_FAILED()=
   traceCREATE_MUTEX(pxNewQueue)=
   traceCREATE_MUTEX_FAILED()=
   traceEND()=
   traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToClear)=
   traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,uxBitsToClear)=
   traceEVENT_GROUP_CREATE(xEventGroup)=
   traceEVENT_GROUP_CREATE_FAILED()=
   traceEVENT_GROUP_DELETE(xEventGroup)=
   traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet)=
   traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBitsToSet)=
   traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet,uxBitsToWaitFor)=
   traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,uxBitsToWaitFor,xTimeoutOccurred)=( void ) xTimeoutOccurred
   traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBitsToWaitFor)=
   traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsToWaitFor,xTimeoutOccurred)=( void ) xTimeoutOccurred
   traceFREE(pvAddress,uiSize)=
   traceGIVE_MUTEX_RECURSIVE(pxMutex)=
   traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex)=
   traceINCREASE_TICK_COUNT(x)=
   traceLOW_POWER_IDLE_BEGIN()=
   traceLOW_POWER_IDLE_END()=
   traceMALLOC(pvAddress,uiSize)=
   traceMOVED_TASK_TO_READY_STATE(pxTCB)=
   tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ulParameter2,ret)=
   tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvParameter1,ulParameter2,ret)=
   traceQUEUE_CREATE(pxNewQueue)=
   traceQUEUE_CREATE_FAILED(ucQueueType)=
   traceQUEUE_DELETE(pxQueue)=
   traceQUEUE_PEEK(pxQueue)=
   traceQUEUE_PEEK_FROM_ISR(pxQueue)=
   traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue)=
   traceQUEUE_RECEIVE(pxQueue)=
   traceQUEUE_RECEIVE_FAILED(pxQueue)=
   traceQUEUE_RECEIVE_FROM_ISR(pxQueue)=
   traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue)=
   traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName)=
   traceQUEUE_SEND(pxQueue)=
   traceQUEUE_SEND_FAILED(pxQueue)=
   traceQUEUE_SEND_FROM_ISR(pxQueue)=
   traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue)=
   traceSTART()=
   traceTAKE_MUTEX_RECURSIVE(pxMutex)=
   traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex)=
   traceTASK_CREATE(pxNewTCB)=
   traceTASK_CREATE_FAILED()=
   traceTASK_DELAY()=
   traceTASK_DELAY_UNTIL()=
   traceTASK_DELETE(pxTaskToDelete)=
   traceTASK_INCREMENT_TICK(xTickCount)=
   traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,uxOriginalPriority)=
   traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInheritedPriority)=
   traceTASK_PRIORITY_SET(pxTask,uxNewPriority)=
   traceTASK_RESUME(pxTaskToResume)=
   traceTASK_RESUME_FROM_ISR(pxTaskToResume)=
   traceTASK_SUSPEND(pxTaskToSuspend)=
   traceTASK_SWITCHED_IN()=
   traceTASK_SWITCHED_OUT()=
   traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMessageValue)=
   traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageValueValue,xReturn)=
   traceTIMER_CREATE(pxNewTimer)=
   traceTIMER_CREATE_FAILED()=
   traceTIMER_EXPIRED(pxTimer)=
   TRASHIT(x)=
   true=1
   tskIDLE_PRIORITY=( ( UBaseType_t ) 0U )
   tskKERNEL_VERSION_BUILD=0
   tskKERNEL_VERSION_MAJOR=8
   tskKERNEL_VERSION_MINOR=2
   tskKERNEL_VERSION_NUMBER="V8.2.0"
   tskNO_AFFINITY=INT_MAX
   UCHAR_MAX=(SCHAR_MAX * 2 + 1)
   UDP_DEBUG=LWIP_DBG_OFF
   UDP_STATS=0
   UDP_TTL=(IP_DEFAULT_TTL)
   UINT16_C(x)=__UINT16_C(x)
   UINT16_MAX=__UINT16_MAX__
   UINT32_C(x)=__UINT32_C(x)
   UINT32_MAX=__UINT32_MAX__
   UINT64_C(x)=__UINT64_C(x)
   UINT64_MAX=__UINT64_MAX__
   UINT8_C(x)=__UINT8_C(x)
   UINT8_MAX=__UINT8_MAX__
   UINTMAX_C(x)=__UINTMAX_C(x)
   UINTMAX_MAX=__UINTMAX_MAX__
   UINTPTR_MAX=__UINTPTR_MAX__
   UINT_FAST16_MAX=__UINT_FAST16_MAX__
   UINT_FAST32_MAX=__UINT_FAST32_MAX__
   UINT_FAST64_MAX=__UINT_FAST64_MAX__
   UINT_FAST8_MAX=__UINT_FAST8_MAX__
   UINT_LEAST16_MAX=__UINT_LEAST16_MAX__
   UINT_LEAST32_MAX=__UINT_LEAST32_MAX__
   UINT_LEAST64_MAX=__UINT_LEAST64_MAX__
   UINT_LEAST8_MAX=__UINT_LEAST8_MAX__
   UINT_MAX=(INT_MAX * 2U + 1U)
   ULLONG_MAX=(LLONG_MAX * 2ULL + 1ULL)
   ULONG_LONG_MAX=(LONG_LONG_MAX * 2ULL + 1ULL)
   ULONG_MAX=(LONG_MAX * 2UL + 1UL)
   unsigned=signed
   UNTESTED_FUNCTION()={ ets_printf("Untested FreeRTOS function %s\r\n", __FUNCTION__); configASSERT(false); } while(0)
   USE_DNS=
   USHRT_MAX=(SHRT_MAX * 2 + 1)
   VECBASE=231
   vPortFreeAligned(pvBlockToFree)=vPortFree( pvBlockToFree )
   vQueueAddToRegistry(xQueue,pcName)=
   vQueueUnregisterQueue(xQueue)=
   vSemaphoreCreateBinary(xSemaphore)={ ( xSemaphore ) = xQueueGenericCreate( ( UBaseType_t ) 1, semSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_BINARY_SEMAPHORE ); if( ( xSemaphore ) != NULL ) { ( void ) xSemaphoreGive( ( xSemaphore ) ); } }
   vSemaphoreDelete(xSemaphore)=vQueueDelete( ( QueueHandle_t ) ( xSemaphore ) )
   WCHAR_MAX=__WCHAR_MAX__
   WCHAR_MIN=__WCHAR_MIN__
   WIFI_AMPDU_ENABLED=1
   WIFI_DYNAMIC_TX_BUFFER_NUM=CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM
   WIFI_IF_AP=ESP_IF_WIFI_AP
   WIFI_IF_STA=ESP_IF_WIFI_STA
   WIFI_INIT_CONFIG_DEFAULT()={ .event_handler = &esp_event_send, .static_rx_buf_num = CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM, .dynamic_rx_buf_num = CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM, .tx_buf_type = CONFIG_ESP32_WIFI_TX_BUFFER_TYPE, .static_tx_buf_num = WIFI_STATIC_TX_BUFFER_NUM, .dynamic_tx_buf_num = WIFI_DYNAMIC_TX_BUFFER_NUM, .ampdu_enable = WIFI_AMPDU_ENABLED, .nvs_enable = WIFI_NVS_ENABLED, .nano_enable = WIFI_NANO_FORMAT_ENABLED, .magic = WIFI_INIT_CONFIG_MAGIC};
   WIFI_INIT_CONFIG_MAGIC=0x1F2F3F4F
   WIFI_NANO_FORMAT_ENABLED=0
   WIFI_NVS_ENABLED=1
   WIFI_PROTOCOL_11B=1
   WIFI_PROTOCOL_11G=2
   WIFI_PROTOCOL_11N=4
   WIFI_PROTOCOL_LR=8
   WIFI_STATIC_TX_BUFFER_NUM=0
   WINDOWBASE=72
   WINDOWSTART=73
   WINT_MAX=__WINT_MAX__
   WINT_MIN=__WINT_MIN__
   write(s,dataptr,len)=lwip_write(s,dataptr,len)
   writev(s,iov,iovcnt)=lwip_writev(s,iov,iovcnt)
   X8_F="02x"
   XCHAL_ADDRESS_MISALIGNED=-1
   XCHAL_ALIGN_MAX=XCHAL_DATA_WIDTH
   XCHAL_BUILD_UNIQUE_ID=0x0005FE96
   XCHAL_BYTE0_FORMAT_LENGTHS=3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3
   XCHAL_CACHE_LINESIZE_MAX=XCHAL_DCACHE_LINESIZE
   XCHAL_CACHE_LINEWIDTH_MAX=XCHAL_DCACHE_LINEWIDTH
   XCHAL_CACHE_MEMCTL_DEFAULT=0x00000000
   XCHAL_CACHE_PREFCTL_DEFAULT=0x01044
   XCHAL_CACHE_SETSIZE_MAX=XCHAL_DCACHE_SETSIZE
   XCHAL_CACHE_SETWIDTH_MAX=XCHAL_DCACHE_SETWIDTH
   XCHAL_CA_BITS=4
   XCHAL_CA_BYPASS=2
   XCHAL_CA_BYPASSBUF=6
   XCHAL_CA_BYPASS_RW=0
   XCHAL_CA_ILLEGAL=15
   XCHAL_CA_ISOLATE=0
   XCHAL_CA_R=(0xC0 | 0x40000000)
   XCHAL_CA_RW=(0xE0 | 0x40000000)
   XCHAL_CA_RWX=(0xF0 | 0x40000000)
   XCHAL_CA_RX=(0xD0 | 0x40000000)
   XCHAL_CA_WRITEBACK=2
   XCHAL_CA_WRITEBACK_NOALLOC=2
   XCHAL_CA_WRITEBACK_NOALLOC_RW=0
   XCHAL_CA_WRITEBACK_RW=0
   XCHAL_CA_WRITETHRU=2
   XCHAL_CA_WRITETHRU_RW=0
   XCHAL_CLOCK_GATING_FUNCUNIT=1
   XCHAL_CLOCK_GATING_GLOBAL=1
   XCHAL_CORE_ID="esp32_v3_49_prod"
   XCHAL_CP0_IDENT=FPU
   XCHAL_CP0_NAME="FPU"
   XCHAL_CP0_SA_ALIGN=4
   XCHAL_CP0_SA_LIST(s)=XCHAL_SA_REG(s,0,0,1,0, fcr, 4, 4, 4,0x03E8, ur,232, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, fsr, 4, 4, 4,0x03E9, ur,233, 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f0, 4, 4, 4,0x0030, f,0 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f1, 4, 4, 4,0x0031, f,1 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f2, 4, 4, 4,0x0032, f,2 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f3, 4, 4, 4,0x0033, f,3 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f4, 4, 4, 4,0x0034, f,4 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f5, 4, 4, 4,0x0035, f,5 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f6, 4, 4, 4,0x0036, f,6 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f7, 4, 4, 4,0x0037, f,7 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f8, 4, 4, 4,0x0038, f,8 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f9, 4, 4, 4,0x0039, f,9 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f10, 4, 4, 4,0x003A, f,10 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f11, 4, 4, 4,0x003B, f,11 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f12, 4, 4, 4,0x003C, f,12 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f13, 4, 4, 4,0x003D, f,13 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f14, 4, 4, 4,0x003E, f,14 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f15, 4, 4, 4,0x003F, f,15 , 32,0,0,0)
   XCHAL_CP0_SA_NUM=18
   XCHAL_CP0_SA_SIZE=72
   XCHAL_CP1_NAME=0
   XCHAL_CP1_SA_ALIGN=1
   XCHAL_CP1_SA_CONTENTS_LIBDB=
   XCHAL_CP1_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP1_SA_LIST(s)=
   XCHAL_CP1_SA_NUM=0
   XCHAL_CP1_SA_SIZE=0
   XCHAL_CP2_NAME=0
   XCHAL_CP2_SA_ALIGN=1
   XCHAL_CP2_SA_CONTENTS_LIBDB=
   XCHAL_CP2_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP2_SA_LIST(s)=
   XCHAL_CP2_SA_NUM=0
   XCHAL_CP2_SA_SIZE=0
   XCHAL_CP3_NAME=0
   XCHAL_CP3_SA_ALIGN=1
   XCHAL_CP3_SA_CONTENTS_LIBDB=
   XCHAL_CP3_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP3_SA_LIST(s)=
   XCHAL_CP3_SA_NUM=0
   XCHAL_CP3_SA_SIZE=0
   XCHAL_CP4_NAME=0
   XCHAL_CP4_SA_ALIGN=1
   XCHAL_CP4_SA_CONTENTS_LIBDB=
   XCHAL_CP4_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP4_SA_LIST(s)=
   XCHAL_CP4_SA_NUM=0
   XCHAL_CP4_SA_SIZE=0
   XCHAL_CP5_NAME=0
   XCHAL_CP5_SA_ALIGN=1
   XCHAL_CP5_SA_CONTENTS_LIBDB=
   XCHAL_CP5_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP5_SA_LIST(s)=
   XCHAL_CP5_SA_NUM=0
   XCHAL_CP5_SA_SIZE=0
   XCHAL_CP6_NAME=0
   XCHAL_CP6_SA_ALIGN=1
   XCHAL_CP6_SA_CONTENTS_LIBDB=
   XCHAL_CP6_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP6_SA_LIST(s)=
   XCHAL_CP6_SA_NUM=0
   XCHAL_CP6_SA_SIZE=0
   XCHAL_CP7_NAME=0
   XCHAL_CP7_SA_ALIGN=1
   XCHAL_CP7_SA_CONTENTS_LIBDB=
   XCHAL_CP7_SA_CONTENTS_LIBDB_NUM=0
   XCHAL_CP7_SA_LIST(s)=
   XCHAL_CP7_SA_NUM=0
   XCHAL_CP7_SA_SIZE=0
   XCHAL_CPEXTRA_SA_ALIGN=XCHAL_TOTAL_SA_ALIGN
   XCHAL_CPEXTRA_SA_SIZE=XCHAL_TOTAL_SA_SIZE
   XCHAL_CPEXTRA_SA_SIZE_TOR2=XCHAL_CPEXTRA_SA_SIZE
   XCHAL_CP_ID_FPU=0
   XCHAL_CP_MASK=0x01
   XCHAL_CP_MAX=1
   XCHAL_CP_MAXCFG=8
   XCHAL_CP_NUM=1
   XCHAL_CP_PORT_MASK=0x00
   XCHAL_CP_SA_ALIGN(n)=_XCHAL_CP_SA_ALIGN(n)
   XCHAL_CP_SA_SIZE(n)=_XCHAL_CP_SA_SIZE(n)
   XCHAL_DATARAM0_BANKS=1
   XCHAL_DATARAM0_ECC_PARITY=0
   XCHAL_DATARAM0_PADDR=0x3FF80000
   XCHAL_DATARAM0_SIZE=524288
   XCHAL_DATARAM0_VADDR=0x3FF80000
   XCHAL_DATARAM1_BANKS=1
   XCHAL_DATARAM1_ECC_PARITY=0
   XCHAL_DATARAM1_PADDR=0x3F800000
   XCHAL_DATARAM1_SIZE=4194304
   XCHAL_DATARAM1_VADDR=0x3F800000
   XCHAL_DATAROM0_BANKS=1
   XCHAL_DATAROM0_ECC_PARITY=0
   XCHAL_DATAROM0_PADDR=0x3F400000
   XCHAL_DATAROM0_SIZE=4194304
   XCHAL_DATAROM0_VADDR=0x3F400000
   XCHAL_DATA_PIPE_DELAY=2
   XCHAL_DATA_WIDTH=4
   XCHAL_DBREAKC_LOADBREAK_BITS=1
   XCHAL_DBREAKC_LOADBREAK_MASK=0x40000000
   XCHAL_DBREAKC_LOADBREAK_NUM=2
   XCHAL_DBREAKC_LOADBREAK_SHIFT=30
   XCHAL_DBREAKC_MASK_BITS=6
   XCHAL_DBREAKC_MASK_MASK=0x0000003F
   XCHAL_DBREAKC_MASK_NUM=64
   XCHAL_DBREAKC_MASK_SHIFT=0
   XCHAL_DBREAKC_STOREBREAK_BITS=1
   XCHAL_DBREAKC_STOREBREAK_MASK=0x80000000
   XCHAL_DBREAKC_STOREBREAK_NUM=2
   XCHAL_DBREAKC_STOREBREAK_SHIFT=31
   XCHAL_DBREAKC_VALIDMASK=0xC000003F
   XCHAL_DCACHE_ACCESS_SIZE=1
   XCHAL_DCACHE_BANKS=0
   XCHAL_DCACHE_ECC_PARITY=0
   XCHAL_DCACHE_IS_COHERENT=0
   XCHAL_DCACHE_IS_WRITEBACK=0
   XCHAL_DCACHE_LINESIZE=4
   XCHAL_DCACHE_LINEWIDTH=2
   XCHAL_DCACHE_LINE_LOCKABLE=0
   XCHAL_DCACHE_SETSIZE=(1<<XCHAL_DCACHE_SETWIDTH)
   XCHAL_DCACHE_SETWIDTH=0
   XCHAL_DCACHE_SIZE=0
   XCHAL_DCACHE_TAG_D=0
   XCHAL_DCACHE_TAG_D_SHIFT=XCHAL_DCACHE_TAG_F_SHIFT
   XCHAL_DCACHE_TAG_F=0
   XCHAL_DCACHE_TAG_F_SHIFT=0
   XCHAL_DCACHE_TAG_L=0
   XCHAL_DCACHE_TAG_L_SHIFT=XCHAL_DCACHE_TAG_D_SHIFT
   XCHAL_DCACHE_TAG_V=0x1
   XCHAL_DCACHE_TAG_V_SHIFT=0
   XCHAL_DCACHE_WAYS=1
   XCHAL_DEBUGCAUSE_BREAKN_BITS=1
   XCHAL_DEBUGCAUSE_BREAKN_MASK=0x00000010
   XCHAL_DEBUGCAUSE_BREAKN_NUM=2
   XCHAL_DEBUGCAUSE_BREAKN_SHIFT=4
   XCHAL_DEBUGCAUSE_BREAK_BITS=1
   XCHAL_DEBUGCAUSE_BREAK_MASK=0x00000008
   XCHAL_DEBUGCAUSE_BREAK_NUM=2
   XCHAL_DEBUGCAUSE_BREAK_SHIFT=3
   XCHAL_DEBUGCAUSE_DBREAK_BITS=1
   XCHAL_DEBUGCAUSE_DBREAK_MASK=0x00000004
   XCHAL_DEBUGCAUSE_DBREAK_NUM=2
   XCHAL_DEBUGCAUSE_DBREAK_SHIFT=2
   XCHAL_DEBUGCAUSE_DEBUGINT_BITS=1
   XCHAL_DEBUGCAUSE_DEBUGINT_MASK=0x00000020
   XCHAL_DEBUGCAUSE_DEBUGINT_NUM=2
   XCHAL_DEBUGCAUSE_DEBUGINT_SHIFT=5
   XCHAL_DEBUGCAUSE_IBREAK_BITS=1
   XCHAL_DEBUGCAUSE_IBREAK_MASK=0x00000002
   XCHAL_DEBUGCAUSE_IBREAK_NUM=2
   XCHAL_DEBUGCAUSE_IBREAK_SHIFT=1
   XCHAL_DEBUGCAUSE_ICOUNT_BITS=1
   XCHAL_DEBUGCAUSE_ICOUNT_MASK=0x00000001
   XCHAL_DEBUGCAUSE_ICOUNT_NUM=2
   XCHAL_DEBUGCAUSE_ICOUNT_SHIFT=0
   XCHAL_DEBUGCAUSE_VALIDMASK=0x0000003F
   XCHAL_DEBUGLEVEL=6
   XCHAL_DEBUG_VECOFS=XCHAL_INTLEVEL6_VECOFS
   XCHAL_DEBUG_VECTOR_PADDR=XCHAL_INTLEVEL6_VECTOR_PADDR
   XCHAL_DEBUG_VECTOR_VADDR=XCHAL_INTLEVEL6_VECTOR_VADDR
   XCHAL_DOUBLEEXC_VECOFS=0x000003C0
   XCHAL_DOUBLEEXC_VECTOR_PADDR=0x400003C0
   XCHAL_DOUBLEEXC_VECTOR_VADDR=0x400003C0
   XCHAL_DRAM0_PADDR=XCHAL_DATARAM0_PADDR
   XCHAL_DRAM0_SIZE=XCHAL_DATARAM0_SIZE
   XCHAL_DRAM0_VADDR=XCHAL_DATARAM0_VADDR
   XCHAL_DRAM1_PADDR=XCHAL_DATARAM1_PADDR
   XCHAL_DRAM1_SIZE=XCHAL_DATARAM1_SIZE
   XCHAL_DRAM1_VADDR=XCHAL_DATARAM1_VADDR
   XCHAL_DROM0_PADDR=XCHAL_DATAROM0_PADDR
   XCHAL_DROM0_SIZE=XCHAL_DATAROM0_SIZE
   XCHAL_DROM0_VADDR=XCHAL_DATAROM0_VADDR
   XCHAL_DROM1_PADDR=XCHAL_DATAROM1_PADDR
   XCHAL_DROM1_SIZE=XCHAL_DATAROM1_SIZE
   XCHAL_DROM1_VADDR=XCHAL_DATAROM1_VADDR
   XCHAL_DTLB_ARF_ENTRIES=(1<<XCHAL_DTLB_ARF_ENTRIES_LOG2)
   XCHAL_DTLB_ARF_SETS=0
   XCHAL_DTLB_ARF_WAYS=0
   XCHAL_DTLB_MINWIRED_SETS=0
   XCHAL_DTLB_SET(n,what)=_XCHAL_DTLB_SET(n, _ ## what )
   XCHAL_DTLB_SET0_ARF=0
   XCHAL_DTLB_SET0_ASID_CONSTMASK=0
   XCHAL_DTLB_SET0_ASID_RESET=0
   XCHAL_DTLB_SET0_CA_CONSTMASK=0
   XCHAL_DTLB_SET0_CA_RESET=1
   XCHAL_DTLB_SET0_E0_CA_RESET=0x02
   XCHAL_DTLB_SET0_E0_PPN_CONST=0x00000000
   XCHAL_DTLB_SET0_E0_VPN_CONST=0x00000000
   XCHAL_DTLB_SET0_E1_CA_RESET=0x02
   XCHAL_DTLB_SET0_E1_PPN_CONST=0x20000000
   XCHAL_DTLB_SET0_E1_VPN_CONST=0x20000000
   XCHAL_DTLB_SET0_E2_CA_RESET=0x02
   XCHAL_DTLB_SET0_E2_PPN_CONST=0x40000000
   XCHAL_DTLB_SET0_E2_VPN_CONST=0x40000000
   XCHAL_DTLB_SET0_E3_CA_RESET=0x02
   XCHAL_DTLB_SET0_E3_PPN_CONST=0x60000000
   XCHAL_DTLB_SET0_E3_VPN_CONST=0x60000000
   XCHAL_DTLB_SET0_E4_CA_RESET=0x02
   XCHAL_DTLB_SET0_E4_PPN_CONST=0x80000000
   XCHAL_DTLB_SET0_E4_VPN_CONST=0x80000000
   XCHAL_DTLB_SET0_E5_CA_RESET=0x02
   XCHAL_DTLB_SET0_E5_PPN_CONST=0xA0000000
   XCHAL_DTLB_SET0_E5_VPN_CONST=0xA0000000
   XCHAL_DTLB_SET0_E6_CA_RESET=0x02
   XCHAL_DTLB_SET0_E6_PPN_CONST=0xC0000000
   XCHAL_DTLB_SET0_E6_VPN_CONST=0xC0000000
   XCHAL_DTLB_SET0_E7_CA_RESET=0x02
   XCHAL_DTLB_SET0_E7_PPN_CONST=0xE0000000
   XCHAL_DTLB_SET0_E7_VPN_CONST=0xE0000000
   XCHAL_DTLB_SET0_ENTRIES=8
   XCHAL_DTLB_SET0_ENTRIES_LOG2=3
   XCHAL_DTLB_SET0_PAGESIZES=1
   XCHAL_DTLB_SET0_PAGESZ_BITS=0
   XCHAL_DTLB_SET0_PAGESZ_LOG2_LIST=29
   XCHAL_DTLB_SET0_PAGESZ_LOG2_MAX=29
   XCHAL_DTLB_SET0_PAGESZ_LOG2_MIN=29
   XCHAL_DTLB_SET0_PPN_CONSTMASK=0xE0000000
   XCHAL_DTLB_SET0_PPN_RESET=0
   XCHAL_DTLB_SET0_VPN_CONSTMASK=0x00000000
   XCHAL_DTLB_SET0_VPN_RESET=0
   XCHAL_DTLB_SET0_WAY=0
   XCHAL_DTLB_SET0_WAYS=1
   XCHAL_DTLB_SETS=1
   XCHAL_DTLB_SET_E(n,i,what)=_XCHAL_DTLB_SET_E(n,i, _ ## what )
   XCHAL_DTLB_WAY0_SET=0
   XCHAL_DTLB_WAYS=1
   XCHAL_DTLB_WAY_BITS=0
   XCHAL_ERRATUM_453=0
   XCHAL_ERRATUM_497=0
   XCHAL_EXCCAUSE_ALLOCA=5
   XCHAL_EXCCAUSE_BITS=6
   XCHAL_EXCCAUSE_COPROCESSOR0_DISABLED=32
   XCHAL_EXCCAUSE_COPROCESSOR1_DISABLED=33
   XCHAL_EXCCAUSE_COPROCESSOR2_DISABLED=34
   XCHAL_EXCCAUSE_COPROCESSOR3_DISABLED=35
   XCHAL_EXCCAUSE_COPROCESSOR4_DISABLED=36
   XCHAL_EXCCAUSE_COPROCESSOR5_DISABLED=37
   XCHAL_EXCCAUSE_COPROCESSOR6_DISABLED=38
   XCHAL_EXCCAUSE_COPROCESSOR7_DISABLED=39
   XCHAL_EXCCAUSE_DTLB_MISS=24
   XCHAL_EXCCAUSE_DTLB_MULTIHIT=25
   XCHAL_EXCCAUSE_DTLB_PRIVILEGE=26
   XCHAL_EXCCAUSE_DTLB_SIZE_RESTRICTION=27
   XCHAL_EXCCAUSE_FETCH_CACHE_ATTRIBUTE=20
   XCHAL_EXCCAUSE_ILLEGAL_INSTRUCTION=0
   XCHAL_EXCCAUSE_INSTRUCTION_FETCH_ERROR=2
   XCHAL_EXCCAUSE_INTEGER_DIVIDE_BY_ZERO=6
   XCHAL_EXCCAUSE_ITLB_MISS=16
   XCHAL_EXCCAUSE_ITLB_MULTIHIT=17
   XCHAL_EXCCAUSE_ITLB_PRIVILEGE=18
   XCHAL_EXCCAUSE_ITLB_SIZE_RESTRICTION=19
   XCHAL_EXCCAUSE_LEVEL1_INTERRUPT=4
   XCHAL_EXCCAUSE_LOAD_CACHE_ATTRIBUTE=28
   XCHAL_EXCCAUSE_LOAD_STORE_ERROR=3
   XCHAL_EXCCAUSE_MASK=0x0000003F
   XCHAL_EXCCAUSE_NUM=64
   XCHAL_EXCCAUSE_PRIVILEGED=8
   XCHAL_EXCCAUSE_SHIFT=0
   XCHAL_EXCCAUSE_SPECULATION=7
   XCHAL_EXCCAUSE_STORE_CACHE_ATTRIBUTE=29
   XCHAL_EXCCAUSE_SYSTEM_CALL=1
   XCHAL_EXCCAUSE_UNALIGNED=9
   XCHAL_EXCCAUSE_VALIDMASK=0x0000003F
   XCHAL_EXCM_LEVEL=3
   XCHAL_EXCM_MASK=XCHAL_INTLEVEL_ANDBELOW_MASK(XCHAL_EXCM_LEVEL)
   XCHAL_EXTINT0_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT0_NUM)
   XCHAL_EXTINT0_MASK=(1 << XCHAL_EXTINT0_NUM)
   XCHAL_EXTINT0_NUM=0
   XCHAL_EXTINT10_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT10_NUM)
   XCHAL_EXTINT10_MASK=(1 << XCHAL_EXTINT10_NUM)
   XCHAL_EXTINT10_NUM=13
   XCHAL_EXTINT11_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT11_NUM)
   XCHAL_EXTINT11_MASK=(1 << XCHAL_EXTINT11_NUM)
   XCHAL_EXTINT11_NUM=14
   XCHAL_EXTINT12_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT12_NUM)
   XCHAL_EXTINT12_MASK=(1 << XCHAL_EXTINT12_NUM)
   XCHAL_EXTINT12_NUM=17
   XCHAL_EXTINT13_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT13_NUM)
   XCHAL_EXTINT13_MASK=(1 << XCHAL_EXTINT13_NUM)
   XCHAL_EXTINT13_NUM=18
   XCHAL_EXTINT14_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT14_NUM)
   XCHAL_EXTINT14_MASK=(1 << XCHAL_EXTINT14_NUM)
   XCHAL_EXTINT14_NUM=19
   XCHAL_EXTINT15_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT15_NUM)
   XCHAL_EXTINT15_MASK=(1 << XCHAL_EXTINT15_NUM)
   XCHAL_EXTINT15_NUM=20
   XCHAL_EXTINT16_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT16_NUM)
   XCHAL_EXTINT16_MASK=(1 << XCHAL_EXTINT16_NUM)
   XCHAL_EXTINT16_NUM=21
   XCHAL_EXTINT17_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT17_NUM)
   XCHAL_EXTINT17_MASK=(1 << XCHAL_EXTINT17_NUM)
   XCHAL_EXTINT17_NUM=22
   XCHAL_EXTINT18_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT18_NUM)
   XCHAL_EXTINT18_MASK=(1 << XCHAL_EXTINT18_NUM)
   XCHAL_EXTINT18_NUM=23
   XCHAL_EXTINT19_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT19_NUM)
   XCHAL_EXTINT19_MASK=(1 << XCHAL_EXTINT19_NUM)
   XCHAL_EXTINT19_NUM=24
   XCHAL_EXTINT1_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT1_NUM)
   XCHAL_EXTINT1_MASK=(1 << XCHAL_EXTINT1_NUM)
   XCHAL_EXTINT1_NUM=1
   XCHAL_EXTINT20_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT20_NUM)
   XCHAL_EXTINT20_MASK=(1 << XCHAL_EXTINT20_NUM)
   XCHAL_EXTINT20_NUM=25
   XCHAL_EXTINT21_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT21_NUM)
   XCHAL_EXTINT21_MASK=(1 << XCHAL_EXTINT21_NUM)
   XCHAL_EXTINT21_NUM=26
   XCHAL_EXTINT22_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT22_NUM)
   XCHAL_EXTINT22_MASK=(1 << XCHAL_EXTINT22_NUM)
   XCHAL_EXTINT22_NUM=27
   XCHAL_EXTINT23_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT23_NUM)
   XCHAL_EXTINT23_MASK=(1 << XCHAL_EXTINT23_NUM)
   XCHAL_EXTINT23_NUM=28
   XCHAL_EXTINT24_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT24_NUM)
   XCHAL_EXTINT24_MASK=(1 << XCHAL_EXTINT24_NUM)
   XCHAL_EXTINT24_NUM=30
   XCHAL_EXTINT25_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT25_NUM)
   XCHAL_EXTINT25_MASK=(1 << XCHAL_EXTINT25_NUM)
   XCHAL_EXTINT25_NUM=31
   XCHAL_EXTINT26_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT26_NUM)
   XCHAL_EXTINT26_MASK=(1 << XCHAL_EXTINT26_NUM)
   XCHAL_EXTINT27_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT27_NUM)
   XCHAL_EXTINT27_MASK=(1 << XCHAL_EXTINT27_NUM)
   XCHAL_EXTINT28_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT28_NUM)
   XCHAL_EXTINT28_MASK=(1 << XCHAL_EXTINT28_NUM)
   XCHAL_EXTINT29_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT29_NUM)
   XCHAL_EXTINT29_MASK=(1 << XCHAL_EXTINT29_NUM)
   XCHAL_EXTINT2_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT2_NUM)
   XCHAL_EXTINT2_MASK=(1 << XCHAL_EXTINT2_NUM)
   XCHAL_EXTINT2_NUM=2
   XCHAL_EXTINT30_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT30_NUM)
   XCHAL_EXTINT30_MASK=(1 << XCHAL_EXTINT30_NUM)
   XCHAL_EXTINT31_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT31_NUM)
   XCHAL_EXTINT31_MASK=(1 << XCHAL_EXTINT31_NUM)
   XCHAL_EXTINT3_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT3_NUM)
   XCHAL_EXTINT3_MASK=(1 << XCHAL_EXTINT3_NUM)
   XCHAL_EXTINT3_NUM=3
   XCHAL_EXTINT4_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT4_NUM)
   XCHAL_EXTINT4_MASK=(1 << XCHAL_EXTINT4_NUM)
   XCHAL_EXTINT4_NUM=4
   XCHAL_EXTINT5_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT5_NUM)
   XCHAL_EXTINT5_MASK=(1 << XCHAL_EXTINT5_NUM)
   XCHAL_EXTINT5_NUM=5
   XCHAL_EXTINT6_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT6_NUM)
   XCHAL_EXTINT6_MASK=(1 << XCHAL_EXTINT6_NUM)
   XCHAL_EXTINT6_NUM=8
   XCHAL_EXTINT7_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT7_NUM)
   XCHAL_EXTINT7_MASK=(1 << XCHAL_EXTINT7_NUM)
   XCHAL_EXTINT7_NUM=9
   XCHAL_EXTINT8_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT8_NUM)
   XCHAL_EXTINT8_MASK=(1 << XCHAL_EXTINT8_NUM)
   XCHAL_EXTINT8_NUM=10
   XCHAL_EXTINT9_LEVEL=XCHAL_INT_LEVEL(XCHAL_EXTINT9_NUM)
   XCHAL_EXTINT9_MASK=(1 << XCHAL_EXTINT9_NUM)
   XCHAL_EXTINT9_NUM=12
   XCHAL_EXTRA_SA_ALIGN=XCHAL_NCP_SA_ALIGN
   XCHAL_EXTRA_SA_SIZE=XCHAL_NCP_SA_SIZE
   XCHAL_FCA_LIST=XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION
   XCHAL_FIRST_HIGHPRI_LEVEL=(XCHAL_NUM_LOWPRI_LEVELS+1)
   XCHAL_HAVE_ABS=1
   XCHAL_HAVE_ABSOLUTE_LITERALS=0
   XCHAL_HAVE_ADDX=1
   XCHAL_HAVE_AXI=0
   XCHAL_HAVE_BBE16=0
   XCHAL_HAVE_BBE16_DESPREAD=0
   XCHAL_HAVE_BBE16_RSQRT=0
   XCHAL_HAVE_BBE16_VECDIV=0
   XCHAL_HAVE_BBENEP=0
   XCHAL_HAVE_BBP16=0
   XCHAL_HAVE_BE=0
   XCHAL_HAVE_BOOLEANS=1
   XCHAL_HAVE_BOOTLOADER=0
   XCHAL_HAVE_BSP3=0
   XCHAL_HAVE_BSP3_TRANSPOSE=0
   XCHAL_HAVE_CACHEATTR=0
   XCHAL_HAVE_CACHE_BLOCKOPS=0
   XCHAL_HAVE_CALL4AND12=1
   XCHAL_HAVE_CA_WRITEBACK_NOALLOC=0
   XCHAL_HAVE_CCOUNT=1
   XCHAL_HAVE_CLAMPS=1
   XCHAL_HAVE_CONNXD2=0
   XCHAL_HAVE_CONNXD2_DUALLSFLIX=0
   XCHAL_HAVE_CONST16=0
   XCHAL_HAVE_CP=1
   XCHAL_HAVE_DCACHE_DYN_WAYS=0
   XCHAL_HAVE_DCACHE_TEST=0
   XCHAL_HAVE_DEBUG=1
   XCHAL_HAVE_DEBUG_APB=1
   XCHAL_HAVE_DEBUG_ERI=1
   XCHAL_HAVE_DEBUG_EXTERN_INT=1
   XCHAL_HAVE_DEBUG_JTAG=1
   XCHAL_HAVE_DENSITY=1
   XCHAL_HAVE_DEPBITS=0
   XCHAL_HAVE_DFP=0
   XCHAL_HAVE_DFPU_SINGLE_DOUBLE=0
   XCHAL_HAVE_DFPU_SINGLE_ONLY=1
   XCHAL_HAVE_DFP_ACCEL=1
   XCHAL_HAVE_DFP_accel=XCHAL_HAVE_DFP_ACCEL
   XCHAL_HAVE_DFP_DIV=0
   XCHAL_HAVE_DFP_RECIP=0
   XCHAL_HAVE_DFP_RSQRT=0
   XCHAL_HAVE_DFP_SQRT=0
   XCHAL_HAVE_DIV32=1
   XCHAL_HAVE_EXCEPTIONS=1
   XCHAL_HAVE_EXCM=XCHAL_HAVE_XEA2
   XCHAL_HAVE_EXTERN_REGS=1
   XCHAL_HAVE_FLIX3=0
   XCHAL_HAVE_FP=1
   XCHAL_HAVE_FP_DIV=1
   XCHAL_HAVE_FP_RECIP=1
   XCHAL_HAVE_FP_RSQRT=1
   XCHAL_HAVE_FP_SQRT=1
   XCHAL_HAVE_FULL_RESET=1
   XCHAL_HAVE_FUSION=0
   XCHAL_HAVE_FUSION_16BIT_BASEBAND=0
   XCHAL_HAVE_FUSION_AES=0
   XCHAL_HAVE_FUSION_AVS=0
   XCHAL_HAVE_FUSION_BITOPS=0
   XCHAL_HAVE_FUSION_CONVENC=0
   XCHAL_HAVE_FUSION_FP=0
   XCHAL_HAVE_FUSION_LFSR_CRC=0
   XCHAL_HAVE_FUSION_LOW_POWER=0
   XCHAL_HAVE_FUSION_SOFTDEMAP=0
   XCHAL_HAVE_FUSION_VITERBI=0
   XCHAL_HAVE_GRIVPEP=0
   XCHAL_HAVE_GRIVPEP_HISTOGRAM=0
   XCHAL_HAVE_HALT=0
   XCHAL_HAVE_HIFI2=0
   XCHAL_HAVE_HIFI2EP=0
   XCHAL_HAVE_HIFI3=0
   XCHAL_HAVE_HIFI3_VFPU=0
   XCHAL_HAVE_HIFI4=0
   XCHAL_HAVE_HIFI4_VFPU=0
   XCHAL_HAVE_HIFIPRO=0
   XCHAL_HAVE_HIFI_MINI=0
   XCHAL_HAVE_HIGHLEVEL_INTERRUPTS=XCHAL_HAVE_HIGHPRI_INTERRUPTS
   XCHAL_HAVE_HIGHPRI_INTERRUPTS=1
   XCHAL_HAVE_ICACHE_DYN_WAYS=0
   XCHAL_HAVE_ICACHE_TEST=0
   XCHAL_HAVE_IDENTITY_MAP=1
   XCHAL_HAVE_IMEM_LOADSTORE=1
   XCHAL_HAVE_INTERRUPTS=1
   XCHAL_HAVE_L32R=1
   XCHAL_HAVE_LE=1
   XCHAL_HAVE_LOOPS=1
   XCHAL_HAVE_MAC16=1
   XCHAL_HAVE_MEM_ECC_PARITY=0
   XCHAL_HAVE_MIMIC_CACHEATTR=1
   XCHAL_HAVE_MINMAX=1
   XCHAL_HAVE_MP_INTERRUPTS=0
   XCHAL_HAVE_MP_RUNSTALL=0
   XCHAL_HAVE_MUL16=1
   XCHAL_HAVE_MUL32=1
   XCHAL_HAVE_MUL32_HIGH=1
   XCHAL_HAVE_MX=0
   XCHAL_HAVE_NMI=1
   XCHAL_HAVE_NSA=1
   XCHAL_HAVE_OCD=1
   XCHAL_HAVE_OCD_DIR_ARRAY=0
   XCHAL_HAVE_OCD_LS32DDR=1
   XCHAL_HAVE_OLD_EXC_ARCH=XCHAL_HAVE_XEA1
   XCHAL_HAVE_PDX4=0
   XCHAL_HAVE_PIF=1
   XCHAL_HAVE_PIF_REQ_ATTR=0
   XCHAL_HAVE_PIF_WR_RESP=0
   XCHAL_HAVE_PREDICTED_BRANCHES=0
   XCHAL_HAVE_PREFETCH=0
   XCHAL_HAVE_PREFETCH_L1=0
   XCHAL_HAVE_PRID=1
   XCHAL_HAVE_PSO=0
   XCHAL_HAVE_PSO_CDM=0
   XCHAL_HAVE_PSO_FULL_RETENTION=0
   XCHAL_HAVE_PTP_MMU=0
   XCHAL_HAVE_RELEASE_SYNC=1
   XCHAL_HAVE_S32C1I=1
   XCHAL_HAVE_SEXT=1
   XCHAL_HAVE_SPANNING_WAY=1
   XCHAL_HAVE_SPECULATION=0
   XCHAL_HAVE_SSP16=0
   XCHAL_HAVE_SSP16_VITERBI=0
   XCHAL_HAVE_TAP_MASTER=0
   XCHAL_HAVE_THREADPTR=1
   XCHAL_HAVE_TLBS=1
   XCHAL_HAVE_TRAX=1
   XCHAL_HAVE_TURBO16=0
   XCHAL_HAVE_USER_DPFPU=0
   XCHAL_HAVE_USER_SPFPU=0
   XCHAL_HAVE_VECBASE=1
   XCHAL_HAVE_VECTORFPU2005=0
   XCHAL_HAVE_VECTOR_SELECT=1
   XCHAL_HAVE_VECTRA1=0
   XCHAL_HAVE_VECTRALX=0
   XCHAL_HAVE_WIDE_BRANCHES=0
   XCHAL_HAVE_WINDOWED=1
   XCHAL_HAVE_XEA1=0
   XCHAL_HAVE_XEA2=1
   XCHAL_HAVE_XEAX=0
   XCHAL_HAVE_XLT_CACHEATTR=0
   XCHAL_HW_CONFIGID0=0xC2BCFFFE
   XCHAL_HW_CONFIGID1=0x1CC5FE96
   XCHAL_HW_CONFIGID_RELIABLE=1
   XCHAL_HW_MAX_VERSION=260003
   XCHAL_HW_MAX_VERSION_MAJOR=2600
   XCHAL_HW_MAX_VERSION_MINOR=3
   XCHAL_HW_MIN_VERSION=260003
   XCHAL_HW_MIN_VERSION_MAJOR=2600
   XCHAL_HW_MIN_VERSION_MINOR=3
   XCHAL_HW_RELEASE_AT(major,minor)=(XTHAL_REL_EQ( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
   XCHAL_HW_RELEASE_AT_OR_ABOVE(major,minor)=(XTHAL_REL_GE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
   XCHAL_HW_RELEASE_AT_OR_BELOW(major,minor)=(XTHAL_REL_LE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
   XCHAL_HW_RELEASE_MAJOR=XCHAL_HW_VERSION_MAJOR
   XCHAL_HW_RELEASE_MAJOR_AT(major)=((XCHAL_HW_VERSION_MAJOR == (major)) ? 1 : 0)
   XCHAL_HW_RELEASE_MINOR=XCHAL_HW_VERSION_MINOR
   XCHAL_HW_RELEASE_NAME=XCHAL_HW_VERSION_NAME
   XCHAL_HW_REL_LX6=1
   XCHAL_HW_REL_LX6_0=1
   XCHAL_HW_REL_LX6_0_3=1
   XCHAL_HW_VERSION=260003
   XCHAL_HW_VERSION_MAJOR=2600
   XCHAL_HW_VERSION_MINOR=3
   XCHAL_HW_VERSION_NAME="LX6.0.3"
   XCHAL_ICACHE_ACCESS_SIZE=1
   XCHAL_ICACHE_ECC_PARITY=0
   XCHAL_ICACHE_LINESIZE=4
   XCHAL_ICACHE_LINEWIDTH=2
   XCHAL_ICACHE_LINE_LOCKABLE=0
   XCHAL_ICACHE_SETSIZE=(1<<XCHAL_ICACHE_SETWIDTH)
   XCHAL_ICACHE_SETWIDTH=0
   XCHAL_ICACHE_SIZE=0
   XCHAL_ICACHE_TAG_F=0
   XCHAL_ICACHE_TAG_F_SHIFT=0
   XCHAL_ICACHE_TAG_L=0
   XCHAL_ICACHE_TAG_L_SHIFT=XCHAL_ICACHE_TAG_F_SHIFT
   XCHAL_ICACHE_TAG_V=0x1
   XCHAL_ICACHE_TAG_V_SHIFT=0
   XCHAL_ICACHE_WAYS=1
   XCHAL_INEXACT=-2
   XCHAL_INSTRAM0_ECC_PARITY=0
   XCHAL_INSTRAM0_PADDR=0x40000000
   XCHAL_INSTRAM0_SIZE=4194304
   XCHAL_INSTRAM0_VADDR=0x40000000
   XCHAL_INSTRAM1_ECC_PARITY=0
   XCHAL_INSTRAM1_PADDR=0x40400000
   XCHAL_INSTRAM1_SIZE=4194304
   XCHAL_INSTRAM1_VADDR=0x40400000
   XCHAL_INSTROM0_ECC_PARITY=0
   XCHAL_INSTROM0_PADDR=0x40800000
   XCHAL_INSTROM0_SIZE=4194304
   XCHAL_INSTROM0_VADDR=0x40800000
   XCHAL_INST_FETCH_WIDTH=4
   XCHAL_INST_ILLN=0xF06D
   XCHAL_INST_ILLN_BYTE0=0x6D
   XCHAL_INST_ILLN_BYTE1=0xF0
   XCHAL_INT0_EXTNUM=0
   XCHAL_INT0_LEVEL=1
   XCHAL_INT0_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT10_EXTNUM=8
   XCHAL_INT10_LEVEL=1
   XCHAL_INT10_TYPE=XTHAL_INTTYPE_EXTERN_EDGE
   XCHAL_INT11_LEVEL=3
   XCHAL_INT11_TYPE=XTHAL_INTTYPE_PROFILING
   XCHAL_INT12_EXTNUM=9
   XCHAL_INT12_LEVEL=1
   XCHAL_INT12_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT13_EXTNUM=10
   XCHAL_INT13_LEVEL=1
   XCHAL_INT13_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT14_EXTNUM=11
   XCHAL_INT14_LEVEL=7
   XCHAL_INT14_TYPE=XTHAL_INTTYPE_NMI
   XCHAL_INT15_LEVEL=3
   XCHAL_INT15_TYPE=XTHAL_INTTYPE_TIMER
   XCHAL_INT16_LEVEL=5
   XCHAL_INT16_TYPE=XTHAL_INTTYPE_TIMER
   XCHAL_INT17_EXTNUM=12
   XCHAL_INT17_LEVEL=1
   XCHAL_INT17_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT18_EXTNUM=13
   XCHAL_INT18_LEVEL=1
   XCHAL_INT18_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT19_EXTNUM=14
   XCHAL_INT19_LEVEL=2
   XCHAL_INT19_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT1_EXTNUM=1
   XCHAL_INT1_LEVEL=1
   XCHAL_INT1_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT20_EXTNUM=15
   XCHAL_INT20_LEVEL=2
   XCHAL_INT20_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT21_EXTNUM=16
   XCHAL_INT21_LEVEL=2
   XCHAL_INT21_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT22_EXTNUM=17
   XCHAL_INT22_LEVEL=3
   XCHAL_INT22_TYPE=XTHAL_INTTYPE_EXTERN_EDGE
   XCHAL_INT23_EXTNUM=18
   XCHAL_INT23_LEVEL=3
   XCHAL_INT23_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT24_EXTNUM=19
   XCHAL_INT24_LEVEL=4
   XCHAL_INT24_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT25_EXTNUM=20
   XCHAL_INT25_LEVEL=4
   XCHAL_INT25_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT26_EXTNUM=21
   XCHAL_INT26_LEVEL=5
   XCHAL_INT26_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT27_EXTNUM=22
   XCHAL_INT27_LEVEL=3
   XCHAL_INT27_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT28_EXTNUM=23
   XCHAL_INT28_LEVEL=4
   XCHAL_INT28_TYPE=XTHAL_INTTYPE_EXTERN_EDGE
   XCHAL_INT29_LEVEL=3
   XCHAL_INT29_TYPE=XTHAL_INTTYPE_SOFTWARE
   XCHAL_INT2_EXTNUM=2
   XCHAL_INT2_LEVEL=1
   XCHAL_INT2_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT30_EXTNUM=24
   XCHAL_INT30_LEVEL=4
   XCHAL_INT30_TYPE=XTHAL_INTTYPE_EXTERN_EDGE
   XCHAL_INT31_EXTNUM=25
   XCHAL_INT31_LEVEL=5
   XCHAL_INT31_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT3_EXTNUM=3
   XCHAL_INT3_LEVEL=1
   XCHAL_INT3_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT4_EXTNUM=4
   XCHAL_INT4_LEVEL=1
   XCHAL_INT4_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT5_EXTNUM=5
   XCHAL_INT5_LEVEL=1
   XCHAL_INT5_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT6_LEVEL=1
   XCHAL_INT6_TYPE=XTHAL_INTTYPE_TIMER
   XCHAL_INT7_LEVEL=1
   XCHAL_INT7_TYPE=XTHAL_INTTYPE_SOFTWARE
   XCHAL_INT8_EXTNUM=6
   XCHAL_INT8_LEVEL=1
   XCHAL_INT8_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INT9_EXTNUM=7
   XCHAL_INT9_LEVEL=1
   XCHAL_INT9_TYPE=XTHAL_INTTYPE_EXTERN_LEVEL
   XCHAL_INTCLEARABLE_MASK=(XCHAL_INTTYPE_MASK_SOFTWARE+XCHAL_INTTYPE_MASK_EXTERN_EDGE+XCHAL_INTTYPE_MASK_WRITE_ERROR)
   XCHAL_INTLEVEL0_ANDBELOW_MASK=0x00000000
   XCHAL_INTLEVEL0_MASK=0x00000000
   XCHAL_INTLEVEL10_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL10_MASK=0x00000000
   XCHAL_INTLEVEL11_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL11_MASK=0x00000000
   XCHAL_INTLEVEL12_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL12_MASK=0x00000000
   XCHAL_INTLEVEL13_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL13_MASK=0x00000000
   XCHAL_INTLEVEL14_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL14_MASK=0x00000000
   XCHAL_INTLEVEL15_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL15_MASK=0x00000000
   XCHAL_INTLEVEL1_ANDBELOW_MASK=0x000637FF
   XCHAL_INTLEVEL1_MASK=0x000637FF
   XCHAL_INTLEVEL2_ANDBELOW_MASK=0x003E37FF
   XCHAL_INTLEVEL2_MASK=0x00380000
   XCHAL_INTLEVEL2_VECOFS=0x00000180
   XCHAL_INTLEVEL2_VECTOR_PADDR=0x40000180
   XCHAL_INTLEVEL2_VECTOR_VADDR=0x40000180
   XCHAL_INTLEVEL3_ANDBELOW_MASK=0x28FEBFFF
   XCHAL_INTLEVEL3_MASK=0x28C08800
   XCHAL_INTLEVEL3_VECOFS=0x000001C0
   XCHAL_INTLEVEL3_VECTOR_PADDR=0x400001C0
   XCHAL_INTLEVEL3_VECTOR_VADDR=0x400001C0
   XCHAL_INTLEVEL4_ANDBELOW_MASK=0x7BFEBFFF
   XCHAL_INTLEVEL4_MASK=0x53000000
   XCHAL_INTLEVEL4_VECOFS=0x00000200
   XCHAL_INTLEVEL4_VECTOR_PADDR=0x40000200
   XCHAL_INTLEVEL4_VECTOR_VADDR=0x40000200
   XCHAL_INTLEVEL5_ANDBELOW_MASK=0xFFFFBFFF
   XCHAL_INTLEVEL5_MASK=0x84010000
   XCHAL_INTLEVEL5_VECOFS=0x00000240
   XCHAL_INTLEVEL5_VECTOR_PADDR=0x40000240
   XCHAL_INTLEVEL5_VECTOR_VADDR=0x40000240
   XCHAL_INTLEVEL6_ANDBELOW_MASK=0xFFFFBFFF
   XCHAL_INTLEVEL6_MASK=0x00000000
   XCHAL_INTLEVEL6_VECOFS=0x00000280
   XCHAL_INTLEVEL6_VECTOR_PADDR=0x40000280
   XCHAL_INTLEVEL6_VECTOR_VADDR=0x40000280
   XCHAL_INTLEVEL7_ANDBELOW_MASK=0xFFFFFFFF
   XCHAL_INTLEVEL7_MASK=0x00004000
   XCHAL_INTLEVEL7_NUM=14
   XCHAL_INTLEVEL7_VECOFS=XCHAL_NMI_VECOFS
   XCHAL_INTLEVEL7_VECTOR_PADDR=XCHAL_NMI_VECTOR_PADDR
   XCHAL_INTLEVEL7_VECTOR_VADDR=XCHAL_NMI_VECTOR_VADDR
   XCHAL_INTLEVEL8_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL8_MASK=0x00000000
   XCHAL_INTLEVEL9_ANDBELOW_MASK=XCHAL_INTLEVEL7_ANDBELOW_MASK
   XCHAL_INTLEVEL9_MASK=0x00000000
   XCHAL_INTLEVEL_ANDBELOW_MASK(n)=_XCHAL_INTLEVEL_ANDBELOWMASK(n)
   XCHAL_INTLEVEL_ANDBELOW_MASKS=XCHAL_INTLEVEL0_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL1_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL2_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL3_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL4_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL5_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL6_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL7_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL8_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL9_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL10_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL11_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL12_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL13_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL14_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL15_ANDBELOW_MASK
   XCHAL_INTLEVEL_MASK(n)=_XCHAL_INTLEVEL_MASK(n)
   XCHAL_INTLEVEL_MASKS=XCHAL_INTLEVEL0_MASK XCHAL_SEP XCHAL_INTLEVEL1_MASK XCHAL_SEP XCHAL_INTLEVEL2_MASK XCHAL_SEP XCHAL_INTLEVEL3_MASK XCHAL_SEP XCHAL_INTLEVEL4_MASK XCHAL_SEP XCHAL_INTLEVEL5_MASK XCHAL_SEP XCHAL_INTLEVEL6_MASK XCHAL_SEP XCHAL_INTLEVEL7_MASK XCHAL_SEP XCHAL_INTLEVEL8_MASK XCHAL_SEP XCHAL_INTLEVEL9_MASK XCHAL_SEP XCHAL_INTLEVEL10_MASK XCHAL_SEP XCHAL_INTLEVEL11_MASK XCHAL_SEP XCHAL_INTLEVEL12_MASK XCHAL_SEP XCHAL_INTLEVEL13_MASK XCHAL_SEP XCHAL_INTLEVEL14_MASK XCHAL_SEP XCHAL_INTLEVEL15_MASK
   XCHAL_INTLEVEL_NUM(n)=_XCHAL_INTLEVEL_NUM(n)
   XCHAL_INTLEVEL_VECTOR_VADDR(n)=_XCHAL_INTLEVEL_VECTOR_VADDR(n)
   XCHAL_INTSETTABLE_MASK=XCHAL_INTTYPE_MASK_SOFTWARE
   XCHAL_INTTYPE_MASKS=XCHAL_INTTYPE_MASK_UNCONFIGURED XCHAL_SEP XCHAL_INTTYPE_MASK_SOFTWARE XCHAL_SEP XCHAL_INTTYPE_MASK_EXTERN_EDGE XCHAL_SEP XCHAL_INTTYPE_MASK_EXTERN_LEVEL XCHAL_SEP XCHAL_INTTYPE_MASK_TIMER XCHAL_SEP XCHAL_INTTYPE_MASK_NMI XCHAL_SEP XCHAL_INTTYPE_MASK_WRITE_ERROR
   XCHAL_INTTYPE_MASK_EXTERN_EDGE=0x50400400
   XCHAL_INTTYPE_MASK_EXTERN_LEVEL=0x8FBE333F
   XCHAL_INTTYPE_MASK_NMI=0x00004000
   XCHAL_INTTYPE_MASK_PROFILING=0x00000800
   XCHAL_INTTYPE_MASK_SOFTWARE=0x20000080
   XCHAL_INTTYPE_MASK_TIMER=0x00018040
   XCHAL_INTTYPE_MASK_UNCONFIGURED=0x00000000
   XCHAL_INTTYPE_MASK_WRITE_ERROR=0x00000000
   XCHAL_INT_LEVEL(n)=_XCHAL_INT_LEVEL(n)
   XCHAL_INT_LEVELS=XCHAL_INT0_LEVEL XCHAL_SEP XCHAL_INT1_LEVEL XCHAL_SEP XCHAL_INT2_LEVEL XCHAL_SEP XCHAL_INT3_LEVEL XCHAL_SEP XCHAL_INT4_LEVEL XCHAL_SEP XCHAL_INT5_LEVEL XCHAL_SEP XCHAL_INT6_LEVEL XCHAL_SEP XCHAL_INT7_LEVEL XCHAL_SEP XCHAL_INT8_LEVEL XCHAL_SEP XCHAL_INT9_LEVEL XCHAL_SEP XCHAL_INT10_LEVEL XCHAL_SEP XCHAL_INT11_LEVEL XCHAL_SEP XCHAL_INT12_LEVEL XCHAL_SEP XCHAL_INT13_LEVEL XCHAL_SEP XCHAL_INT14_LEVEL XCHAL_SEP XCHAL_INT15_LEVEL XCHAL_SEP XCHAL_INT16_LEVEL XCHAL_SEP XCHAL_INT17_LEVEL XCHAL_SEP XCHAL_INT18_LEVEL XCHAL_SEP XCHAL_INT19_LEVEL XCHAL_SEP XCHAL_INT20_LEVEL XCHAL_SEP XCHAL_INT21_LEVEL XCHAL_SEP XCHAL_INT22_LEVEL XCHAL_SEP XCHAL_INT23_LEVEL XCHAL_SEP XCHAL_INT24_LEVEL XCHAL_SEP XCHAL_INT25_LEVEL XCHAL_SEP XCHAL_INT26_LEVEL XCHAL_SEP XCHAL_INT27_LEVEL XCHAL_SEP XCHAL_INT28_LEVEL XCHAL_SEP XCHAL_INT29_LEVEL XCHAL_SEP XCHAL_INT30_LEVEL XCHAL_SEP XCHAL_INT31_LEVEL
   XCHAL_INT_TYPE(n)=_XCHAL_INT_TYPE(n)
   XCHAL_INT_TYPES=XCHAL_INT0_TYPE XCHAL_SEP XCHAL_INT1_TYPE XCHAL_SEP XCHAL_INT2_TYPE XCHAL_SEP XCHAL_INT3_TYPE XCHAL_SEP XCHAL_INT4_TYPE XCHAL_SEP XCHAL_INT5_TYPE XCHAL_SEP XCHAL_INT6_TYPE XCHAL_SEP XCHAL_INT7_TYPE XCHAL_SEP XCHAL_INT8_TYPE XCHAL_SEP XCHAL_INT9_TYPE XCHAL_SEP XCHAL_INT10_TYPE XCHAL_SEP XCHAL_INT11_TYPE XCHAL_SEP XCHAL_INT12_TYPE XCHAL_SEP XCHAL_INT13_TYPE XCHAL_SEP XCHAL_INT14_TYPE XCHAL_SEP XCHAL_INT15_TYPE XCHAL_SEP XCHAL_INT16_TYPE XCHAL_SEP XCHAL_INT17_TYPE XCHAL_SEP XCHAL_INT18_TYPE XCHAL_SEP XCHAL_INT19_TYPE XCHAL_SEP XCHAL_INT20_TYPE XCHAL_SEP XCHAL_INT21_TYPE XCHAL_SEP XCHAL_INT22_TYPE XCHAL_SEP XCHAL_INT23_TYPE XCHAL_SEP XCHAL_INT24_TYPE XCHAL_SEP XCHAL_INT25_TYPE XCHAL_SEP XCHAL_INT26_TYPE XCHAL_SEP XCHAL_INT27_TYPE XCHAL_SEP XCHAL_INT28_TYPE XCHAL_SEP XCHAL_INT29_TYPE XCHAL_SEP XCHAL_INT30_TYPE XCHAL_SEP XCHAL_INT31_TYPE
   XCHAL_INVALID_ADDRESS=-3
   XCHAL_IRAM0_PADDR=XCHAL_INSTRAM0_PADDR
   XCHAL_IRAM0_SIZE=XCHAL_INSTRAM0_SIZE
   XCHAL_IRAM0_VADDR=XCHAL_INSTRAM0_VADDR
   XCHAL_IRAM1_PADDR=XCHAL_INSTRAM1_PADDR
   XCHAL_IRAM1_SIZE=XCHAL_INSTRAM1_SIZE
   XCHAL_IRAM1_VADDR=XCHAL_INSTRAM1_VADDR
   XCHAL_IROM0_PADDR=XCHAL_INSTROM0_PADDR
   XCHAL_IROM0_SIZE=XCHAL_INSTROM0_SIZE
   XCHAL_IROM0_VADDR=XCHAL_INSTROM0_VADDR
   XCHAL_IROM1_PADDR=XCHAL_INSTROM1_PADDR
   XCHAL_IROM1_SIZE=XCHAL_INSTROM1_SIZE
   XCHAL_IROM1_VADDR=XCHAL_INSTROM1_VADDR
   XCHAL_ITLB_ARF_ENTRIES=(1<<XCHAL_ITLB_ARF_ENTRIES_LOG2)
   XCHAL_ITLB_ARF_SETS=0
   XCHAL_ITLB_ARF_WAYS=0
   XCHAL_ITLB_MINWIRED_SETS=0
   XCHAL_ITLB_SET(n,what)=_XCHAL_ITLB_SET(n, _ ## what )
   XCHAL_ITLB_SET0_ARF=0
   XCHAL_ITLB_SET0_ASID_CONSTMASK=0
   XCHAL_ITLB_SET0_ASID_RESET=0
   XCHAL_ITLB_SET0_CA_CONSTMASK=0
   XCHAL_ITLB_SET0_CA_RESET=1
   XCHAL_ITLB_SET0_E0_CA_RESET=0x02
   XCHAL_ITLB_SET0_E0_PPN_CONST=0x00000000
   XCHAL_ITLB_SET0_E0_VPN_CONST=0x00000000
   XCHAL_ITLB_SET0_E1_CA_RESET=0x02
   XCHAL_ITLB_SET0_E1_PPN_CONST=0x20000000
   XCHAL_ITLB_SET0_E1_VPN_CONST=0x20000000
   XCHAL_ITLB_SET0_E2_CA_RESET=0x02
   XCHAL_ITLB_SET0_E2_PPN_CONST=0x40000000
   XCHAL_ITLB_SET0_E2_VPN_CONST=0x40000000
   XCHAL_ITLB_SET0_E3_CA_RESET=0x02
   XCHAL_ITLB_SET0_E3_PPN_CONST=0x60000000
   XCHAL_ITLB_SET0_E3_VPN_CONST=0x60000000
   XCHAL_ITLB_SET0_E4_CA_RESET=0x02
   XCHAL_ITLB_SET0_E4_PPN_CONST=0x80000000
   XCHAL_ITLB_SET0_E4_VPN_CONST=0x80000000
   XCHAL_ITLB_SET0_E5_CA_RESET=0x02
   XCHAL_ITLB_SET0_E5_PPN_CONST=0xA0000000
   XCHAL_ITLB_SET0_E5_VPN_CONST=0xA0000000
   XCHAL_ITLB_SET0_E6_CA_RESET=0x02
   XCHAL_ITLB_SET0_E6_PPN_CONST=0xC0000000
   XCHAL_ITLB_SET0_E6_VPN_CONST=0xC0000000
   XCHAL_ITLB_SET0_E7_CA_RESET=0x02
   XCHAL_ITLB_SET0_E7_PPN_CONST=0xE0000000
   XCHAL_ITLB_SET0_E7_VPN_CONST=0xE0000000
   XCHAL_ITLB_SET0_ENTRIES=8
   XCHAL_ITLB_SET0_ENTRIES_LOG2=3
   XCHAL_ITLB_SET0_PAGESIZES=1
   XCHAL_ITLB_SET0_PAGESZ_BITS=0
   XCHAL_ITLB_SET0_PAGESZ_LOG2_LIST=29
   XCHAL_ITLB_SET0_PAGESZ_LOG2_MAX=29
   XCHAL_ITLB_SET0_PAGESZ_LOG2_MIN=29
   XCHAL_ITLB_SET0_PPN_CONSTMASK=0xE0000000
   XCHAL_ITLB_SET0_PPN_RESET=0
   XCHAL_ITLB_SET0_VPN_CONSTMASK=0x00000000
   XCHAL_ITLB_SET0_VPN_RESET=0
   XCHAL_ITLB_SET0_WAY=0
   XCHAL_ITLB_SET0_WAYS=1
   XCHAL_ITLB_SETS=1
   XCHAL_ITLB_SET_E(n,i,what)=_XCHAL_ITLB_SET_E(n,i, _ ## what )
   XCHAL_ITLB_WAY0_SET=0
   XCHAL_ITLB_WAYS=1
   XCHAL_ITLB_WAY_BITS=0
   XCHAL_KERNELEXC_VECTOR_PADDR=XCHAL_KERNEL_VECTOR_PADDR
   XCHAL_KERNELEXC_VECTOR_VADDR=XCHAL_KERNEL_VECTOR_VADDR
   XCHAL_KERNEL_VECOFS=0x00000300
   XCHAL_KERNEL_VECTOR_PADDR=0x40000300
   XCHAL_KERNEL_VECTOR_VADDR=0x40000300
   XCHAL_LCA_LIST=XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION
   XCHAL_LOOP_BUFFER_SIZE=256
   XCHAL_LOWPRI_MASK=XCHAL_INTLEVEL1_ANDBELOW_MASK
   XCHAL_MAX_INSTRUCTION_SIZE=3
   XCHAL_MAYHAVE_ERRATUM_XEA1KWIN=(XCHAL_HAVE_XEA1 && (XCHAL_HW_RELEASE_AT_OR_BELOW(1040,2) != 0 || XCHAL_HW_RELEASE_AT(1050,0)))
   XCHAL_MEMORY_ORDER=XTHAL_LITTLEENDIAN
   XCHAL_MMU_ASID_BITS=0
   XCHAL_MMU_ASID_INVALID=0
   XCHAL_MMU_ASID_KERNEL=0
   XCHAL_MMU_CA_BITS=4
   XCHAL_MMU_MAX_PTE_PAGE_SIZE=29
   XCHAL_MMU_MIN_PTE_PAGE_SIZE=29
   XCHAL_MMU_RINGS=1
   XCHAL_MMU_RING_BITS=0
   XCHAL_MMU_SR_BITS=0
   XCHAL_NCP_SA_ALIGN=4
   XCHAL_NCP_SA_LIST(s)=XCHAL_SA_REG(s,1,2,1,1, threadptr, 4, 4, 4,0x03E7, ur,231, 32,0,0,0) XCHAL_SA_REG(s,1,0,0,1, acclo, 4, 4, 4,0x0210, sr,16 , 32,0,0,0) XCHAL_SA_REG(s,1,0,0,1, acchi, 4, 4, 4,0x0211, sr,17 , 8,0,0,0) XCHAL_SA_REG(s,0,0,0,1, br, 4, 4, 4,0x0204, sr,4 , 16,0,0,0) XCHAL_SA_REG(s,0,0,0,1, scompare1, 4, 4, 4,0x020C, sr,12 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m0, 4, 4, 4,0x0220, sr,32 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m1, 4, 4, 4,0x0221, sr,33 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m2, 4, 4, 4,0x0222, sr,34 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m3, 4, 4, 4,0x0223, sr,35 , 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64r_lo, 4, 4, 4,0x03EA, ur,234, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64r_hi, 4, 4, 4,0x03EB, ur,235, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64s, 4, 4, 4,0x03EC, ur,236, 32,0,0,0)
   XCHAL_NCP_SA_NUM=12
   XCHAL_NCP_SA_SIZE=48
   XCHAL_NMILEVEL=7
   XCHAL_NMI_INTERRUPT=14
   XCHAL_NMI_VECOFS=0x000002C0
   XCHAL_NMI_VECTOR_PADDR=0x400002C0
   XCHAL_NMI_VECTOR_VADDR=0x400002C0
   XCHAL_NO_PAGES_MAPPED=-5
   XCHAL_NUM_AREGS=64
   XCHAL_NUM_AREGS_LOG2=6
   XCHAL_NUM_CONTEXTS=1
   XCHAL_NUM_DATARAM=2
   XCHAL_NUM_DATAROM=1
   XCHAL_NUM_DBREAK=2
   XCHAL_NUM_DRAM=XCHAL_NUM_DATARAM
   XCHAL_NUM_DROM=XCHAL_NUM_DATAROM
   XCHAL_NUM_EXTINTERRUPTS=26
   XCHAL_NUM_IBREAK=2
   XCHAL_NUM_INSTRAM=2
   XCHAL_NUM_INSTROM=1
   XCHAL_NUM_INTERRUPTS=32
   XCHAL_NUM_INTERRUPTS_LOG2=5
   XCHAL_NUM_INTLEVELS=6
   XCHAL_NUM_IRAM=XCHAL_NUM_INSTRAM
   XCHAL_NUM_IROM=XCHAL_NUM_INSTROM
   XCHAL_NUM_LOADSTORE_UNITS=1
   XCHAL_NUM_LOWPRI_LEVELS=1
   XCHAL_NUM_MISC_REGS=4
   XCHAL_NUM_PERF_COUNTERS=2
   XCHAL_NUM_TIMERS=3
   XCHAL_NUM_URAM=0
   XCHAL_NUM_WRITEBUFFER_ENTRIES=4
   XCHAL_NUM_XLMI=1
   XCHAL_OP0_FORMAT_LENGTHS=3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3
   XCHAL_PREFETCH_BLOCK_ENTRIES=0
   XCHAL_PREFETCH_CASTOUT_LINES=0
   XCHAL_PREFETCH_ENTRIES=0
   XCHAL_PROFILING_INTERRUPT=11
   XCHAL_PROGRAMEXC_VECTOR_PADDR=XCHAL_USER_VECTOR_PADDR
   XCHAL_PROGRAMEXC_VECTOR_VADDR=XCHAL_USER_VECTOR_VADDR
   XCHAL_PS_CALLINC_BITS=2
   XCHAL_PS_CALLINC_MASK=0x00030000
   XCHAL_PS_CALLINC_NUM=4
   XCHAL_PS_CALLINC_SHIFT=16
   XCHAL_PS_EXCM_BITS=1
   XCHAL_PS_EXCM_MASK=0x00000010
   XCHAL_PS_EXCM_NUM=2
   XCHAL_PS_EXCM_SHIFT=4
   XCHAL_PS_INTLEVEL_BITS=4
   XCHAL_PS_INTLEVEL_MASK=0x0000000F
   XCHAL_PS_INTLEVEL_NUM=16
   XCHAL_PS_INTLEVEL_SHIFT=0
   XCHAL_PS_OWB_BITS=4
   XCHAL_PS_OWB_MASK=0x00000F00
   XCHAL_PS_OWB_NUM=16
   XCHAL_PS_OWB_SHIFT=8
   XCHAL_PS_RING_BITS=2
   XCHAL_PS_RING_MASK=0x000000C0
   XCHAL_PS_RING_NUM=4
   XCHAL_PS_RING_SHIFT=6
   XCHAL_PS_UM_BITS=1
   XCHAL_PS_UM_MASK=0x00000020
   XCHAL_PS_UM_NUM=2
   XCHAL_PS_UM_SHIFT=5
   XCHAL_PS_VALIDMASK=0x00070F3F
   XCHAL_PS_WOE_BITS=1
   XCHAL_PS_WOE_MASK=0x00040000
   XCHAL_PS_WOE_NUM=2
   XCHAL_PS_WOE_SHIFT=18
   XCHAL_RESET_VECBASE_OVERLAP=0
   XCHAL_RESET_VECTOR0_PADDR=0x50000000
   XCHAL_RESET_VECTOR0_VADDR=0x50000000
   XCHAL_RESET_VECTOR1_PADDR=0x40000400
   XCHAL_RESET_VECTOR1_VADDR=0x40000400
   XCHAL_RESET_VECTOR_PADDR=0x40000400
   XCHAL_RESET_VECTOR_VADDR=0x40000400
   XCHAL_SCA_LIST=XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION
   XCHAL_SEP2=},{
   XCHAL_SEP=,
   XCHAL_SNOOP_LB_MEMCTL_DEFAULT=(_MEMCTL_SNOOP_EN | _MEMCTL_L0IBUF_EN)
   XCHAL_SPANNING_WAY=0
   XCHAL_STACKEDEXC_VECTOR_PADDR=XCHAL_KERNEL_VECTOR_PADDR
   XCHAL_STACKEDEXC_VECTOR_VADDR=XCHAL_KERNEL_VECTOR_VADDR
   XCHAL_SUCCESS=0
   XCHAL_SW_VERSION=1100003
   XCHAL_TIMER0_INTERRUPT=6
   XCHAL_TIMER1_INTERRUPT=15
   XCHAL_TIMER2_INTERRUPT=16
   XCHAL_TIMER3_INTERRUPT=XTHAL_TIMER_UNCONFIGURED
   XCHAL_TIMER_INTERRUPT(n)=_XCHAL_TIMER_INTERRUPT(n)
   XCHAL_TIMER_INTERRUPTS=XCHAL_TIMER0_INTERRUPT XCHAL_SEP XCHAL_TIMER1_INTERRUPT XCHAL_SEP XCHAL_TIMER2_INTERRUPT XCHAL_SEP XCHAL_TIMER3_INTERRUPT
   XCHAL_TOTAL_SA_ALIGN=4
   XCHAL_TOTAL_SA_SIZE=128
   XCHAL_TRAX_ATB_WIDTH=32
   XCHAL_TRAX_MEM_SHAREABLE=1
   XCHAL_TRAX_MEM_SIZE=16384
   XCHAL_TRAX_TIME_WIDTH=0
   XCHAL_UNALIGNED_LOAD_EXCEPTION=0
   XCHAL_UNALIGNED_LOAD_HW=1
   XCHAL_UNALIGNED_STORE_EXCEPTION=0
   XCHAL_UNALIGNED_STORE_HW=1
   XCHAL_UNSUPPORTED_ON_THIS_ARCH=-4
   XCHAL_USEREXC_VECTOR_PADDR=XCHAL_USER_VECTOR_PADDR
   XCHAL_USEREXC_VECTOR_VADDR=XCHAL_USER_VECTOR_VADDR
   XCHAL_USER_VECOFS=0x00000340
   XCHAL_USER_VECTOR_PADDR=0x40000340
   XCHAL_USER_VECTOR_VADDR=0x40000340
   XCHAL_USE_MEMCTL=(((XCHAL_LOOP_BUFFER_SIZE > 0) || XCHAL_DCACHE_IS_COHERENT || XCHAL_HAVE_ICACHE_DYN_WAYS || XCHAL_HAVE_DCACHE_DYN_WAYS) && (XCHAL_HW_MIN_VERSION >= XTENSA_HWVERSION_RE_2012_0))
   XCHAL_VECBASE_RESET_PADDR=0x40000000
   XCHAL_VECBASE_RESET_VADDR=0x40000000
   XCHAL_WINDOW_OF12_VECOFS=0x00000100
   XCHAL_WINDOW_OF4_VECOFS=0x00000000
   XCHAL_WINDOW_OF8_VECOFS=0x00000080
   XCHAL_WINDOW_UF12_VECOFS=0x00000140
   XCHAL_WINDOW_UF4_VECOFS=0x00000040
   XCHAL_WINDOW_UF8_VECOFS=0x000000C0
   XCHAL_WINDOW_VECTORS_PADDR=0x40000000
   XCHAL_WINDOW_VECTORS_VADDR=0x40000000
   XCHAL_XEA_VERSION=2
   XCHAL_XLMI0_ECC_PARITY=0
   XCHAL_XLMI0_PADDR=0x3FF00000
   XCHAL_XLMI0_SIZE=524288
   XCHAL_XLMI0_VADDR=0x3FF00000
   XCJOIN(a,b)=_XCJOIN(a,b)
   xCoRoutineHandle=CoRoutineHandle_t
   xList=List_t
   xListItem=ListItem_t
   xMemoryRegion=MemoryRegion_t
   xQueueAltPeek(xQueue,pvBuffer,xTicksToWait)=xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )
   xQueueAltReceive(xQueue,pvBuffer,xTicksToWait)=xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )
   xQueueAltSendToBack(xQueue,pvItemToQueue,xTicksToWait)=xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
   xQueueAltSendToFront(xQueue,pvItemToQueue,xTicksToWait)=xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )
   xQueueCreate(uxQueueLength,uxItemSize)=xQueueGenericCreate( ( uxQueueLength ), ( uxItemSize ), ( queueQUEUE_TYPE_BASE ) )
   xQueueHandle=QueueHandle_t
   xQueueOverwrite(xQueue,pvItemToQueue)=xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), 0, queueOVERWRITE )
   xQueueOverwriteFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken)=xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueOVERWRITE )
   xQueuePeek(xQueue,pvBuffer,xTicksToWait)=xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )
   xQueueReceive(xQueue,pvBuffer,xTicksToWait)=xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )
   xQueueReset(xQueue)=xQueueGenericReset( xQueue, pdFALSE )
   xQueueSend(xQueue,pvItemToQueue,xTicksToWait)=xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
   xQueueSendFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken)=xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )
   xQueueSendToBack(xQueue,pvItemToQueue,xTicksToWait)=xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
   xQueueSendToBackFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken)=xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )
   xQueueSendToFront(xQueue,pvItemToQueue,xTicksToWait)=xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )
   xQueueSendToFrontFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken)=xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_FRONT )
   xQueueSetHandle=QueueSetHandle_t
   xQueueSetMemberHandle=QueueSetMemberHandle_t
   xSemaphoreAltGive(xSemaphore)=xQueueAltGenericSend( ( QueueHandle_t ) ( xSemaphore ), NULL, semGIVE_BLOCK_TIME, queueSEND_TO_BACK )
   xSemaphoreAltTake(xSemaphore,xBlockTime)=xQueueAltGenericReceive( ( QueueHandle_t ) ( xSemaphore ), NULL, ( xBlockTime ), pdFALSE )
   xSemaphoreCreateBinary()=xQueueGenericCreate( ( UBaseType_t ) 1, semSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_BINARY_SEMAPHORE )
   xSemaphoreCreateCounting(uxMaxCount,uxInitialCount)=xQueueCreateCountingSemaphore( ( uxMaxCount ), ( uxInitialCount ) )
   xSemaphoreCreateMutex()=xQueueCreateMutex( queueQUEUE_TYPE_MUTEX )
   xSemaphoreCreateRecursiveMutex()=xQueueCreateMutex( queueQUEUE_TYPE_RECURSIVE_MUTEX )
   xSemaphoreGetMutexHolder(xSemaphore)=xQueueGetMutexHolder( ( xSemaphore ) )
   xSemaphoreGive(xSemaphore)=xQueueGenericSend( ( QueueHandle_t ) ( xSemaphore ), NULL, semGIVE_BLOCK_TIME, queueSEND_TO_BACK )
   xSemaphoreGiveFromISR(xSemaphore,pxHigherPriorityTaskWoken)=xQueueGiveFromISR( ( QueueHandle_t ) ( xSemaphore ), ( pxHigherPriorityTaskWoken ) )
   xSemaphoreGiveRecursive(xMutex)=xQueueGiveMutexRecursive( ( xMutex ) )
   xSemaphoreHandle=SemaphoreHandle_t
   xSemaphoreTake(xSemaphore,xBlockTime)=xQueueGenericReceive( ( QueueHandle_t ) ( xSemaphore ), NULL, ( xBlockTime ), pdFALSE )
   xSemaphoreTakeFromISR(xSemaphore,pxHigherPriorityTaskWoken)=xQueueReceiveFromISR( ( QueueHandle_t ) ( xSemaphore ), NULL, ( pxHigherPriorityTaskWoken ) )
   xSemaphoreTakeRecursive(xMutex,xBlockTime)=xQueueTakeMutexRecursive( ( xMutex ), ( xBlockTime ) )
   XSHAL_ABI=XTHAL_ABI_WINDOWED
   XSHAL_ALLVALID_CACHEATTR_BYPASS=0x22222222
   XSHAL_ALLVALID_CACHEATTR_DEFAULT=XSHAL_ALLVALID_CACHEATTR_WRITEBACK
   XSHAL_ALLVALID_CACHEATTR_WRITEALLOC=0x22221112
   XSHAL_ALLVALID_CACHEATTR_WRITEBACK=0x22221112
   XSHAL_ALLVALID_CACHEATTR_WRITETHRU=0x22221112
   XSHAL_CACHEATTR_BYPASS=XSHAL_XT2000_CACHEATTR_BYPASS
   XSHAL_CACHEATTR_DEFAULT=XSHAL_XT2000_CACHEATTR_DEFAULT
   XSHAL_CLIB=XTHAL_CLIB_NEWLIB
   XSHAL_DEBUG_VECTOR_ISROM=XSHAL_INTLEVEL6_VECTOR_ISROM
   XSHAL_DEBUG_VECTOR_SIZE=XSHAL_INTLEVEL6_VECTOR_SIZE
   XSHAL_DOUBLEEXC_VECTOR_ISROM=0
   XSHAL_DOUBLEEXC_VECTOR_SIZE=0x00000040
   XSHAL_FLOATING_POINT_ABI=0
   XSHAL_HAVE_TEXT_SECTION_LITERALS=1
   XSHAL_INTLEVEL2_VECTOR_ISROM=0
   XSHAL_INTLEVEL2_VECTOR_SIZE=0x00000038
   XSHAL_INTLEVEL3_VECTOR_ISROM=0
   XSHAL_INTLEVEL3_VECTOR_SIZE=0x00000038
   XSHAL_INTLEVEL4_VECTOR_ISROM=0
   XSHAL_INTLEVEL4_VECTOR_SIZE=0x00000038
   XSHAL_INTLEVEL5_VECTOR_ISROM=0
   XSHAL_INTLEVEL5_VECTOR_SIZE=0x00000038
   XSHAL_INTLEVEL6_VECTOR_ISROM=0
   XSHAL_INTLEVEL6_VECTOR_SIZE=0x00000038
   XSHAL_INTLEVEL7_VECTOR_SIZE=XSHAL_NMI_VECTOR_SIZE
   XSHAL_IOBLOCK_BYPASS_PADDR=0x90000000
   XSHAL_IOBLOCK_BYPASS_SIZE=0x0E000000
   XSHAL_IOBLOCK_BYPASS_VADDR=0x90000000
   XSHAL_IOBLOCK_CACHED_PADDR=0x70000000
   XSHAL_IOBLOCK_CACHED_SIZE=0x0E000000
   XSHAL_IOBLOCK_CACHED_VADDR=0x70000000
   XSHAL_ISS_CACHEATTR_BYPASS=XSHAL_TRAPNULL_CACHEATTR_BYPASS
   XSHAL_ISS_CACHEATTR_DEFAULT=XSHAL_TRAPNULL_CACHEATTR_WRITEBACK
   XSHAL_ISS_CACHEATTR_WRITEALLOC=XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC
   XSHAL_ISS_CACHEATTR_WRITEBACK=XSHAL_TRAPNULL_CACHEATTR_WRITEBACK
   XSHAL_ISS_CACHEATTR_WRITETHRU=XSHAL_TRAPNULL_CACHEATTR_WRITETHRU
   XSHAL_ISS_PIPE_REGIONS=0
   XSHAL_ISS_SDRAM_REGIONS=0
   XSHAL_KERNELEXC_VECTOR_SIZE=XSHAL_KERNEL_VECTOR_SIZE
   XSHAL_KERNEL_VECTOR_ISROM=0
   XSHAL_KERNEL_VECTOR_SIZE=0x00000038
   XSHAL_MAGIC_EXIT=0x0
   XSHAL_NMI_VECTOR_ISROM=0
   XSHAL_NMI_VECTOR_SIZE=0x00000038
   XSHAL_PROGRAMEXC_VECTOR_SIZE=XSHAL_USER_VECTOR_SIZE
   XSHAL_RAM_AVAIL_VADDR=0x60000000
   XSHAL_RAM_AVAIL_VSIZE=0x20000000
   XSHAL_RAM_BYPASS_PADDR=0xA0000000
   XSHAL_RAM_BYPASS_PSIZE=0x20000000
   XSHAL_RAM_BYPASS_VADDR=0xA0000000
   XSHAL_RAM_PADDR=0x60000000
   XSHAL_RAM_PSIZE=0x20000000
   XSHAL_RAM_SIZE=XSHAL_RAM_PSIZE
   XSHAL_RAM_VADDR=0x60000000
   XSHAL_RAM_VSIZE=0x20000000
   XSHAL_RESET_VECTOR_ISROM=0
   XSHAL_RESET_VECTOR_PADDR=0x40000400
   XSHAL_RESET_VECTOR_SIZE=0x00000300
   XSHAL_RESET_VECTOR_VADDR=0x40000400
   XSHAL_ROM_AVAIL_VADDR=0x50000000
   XSHAL_ROM_AVAIL_VSIZE=0x01000000
   XSHAL_ROM_PADDR=0x50000000
   XSHAL_ROM_SIZE=0x01000000
   XSHAL_ROM_VADDR=0x50000000
   XSHAL_SIMIO_BYPASS_VADDR=0xC0000000
   XSHAL_SIMIO_CACHED_VADDR=0xC0000000
   XSHAL_SIMIO_PADDR=0xC0000000
   XSHAL_SIMIO_SIZE=0x20000000
   XSHAL_STACKEDEXC_VECTOR_SIZE=XSHAL_KERNEL_VECTOR_SIZE
   XSHAL_STATIC_VECTOR_SELECT=1
   XSHAL_STRICT_CACHEATTR_BYPASS=0xFFFF222F
   XSHAL_STRICT_CACHEATTR_DEFAULT=XSHAL_STRICT_CACHEATTR_WRITEBACK
   XSHAL_STRICT_CACHEATTR_WRITEALLOC=0xFFFF111F
   XSHAL_STRICT_CACHEATTR_WRITEBACK=0xFFFF111F
   XSHAL_STRICT_CACHEATTR_WRITETHRU=0xFFFF111F
   XSHAL_TRAPNULL_CACHEATTR_BYPASS=0x2222222F
   XSHAL_TRAPNULL_CACHEATTR_DEFAULT=XSHAL_TRAPNULL_CACHEATTR_WRITEBACK
   XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC=0x2222111F
   XSHAL_TRAPNULL_CACHEATTR_WRITEBACK=0x2222111F
   XSHAL_TRAPNULL_CACHEATTR_WRITETHRU=0x2222111F
   XSHAL_USEREXC_VECTOR_SIZE=XSHAL_USER_VECTOR_SIZE
   XSHAL_USER_VECTOR_ISROM=0
   XSHAL_USER_VECTOR_SIZE=0x00000038
   XSHAL_USE_ABSOLUTE_LITERALS=0
   XSHAL_USE_FLOATING_POINT=1
   XSHAL_VECTORS_PACKED=0
   XSHAL_WINDOW_VECTORS_ISROM=0
   XSHAL_WINDOW_VECTORS_SIZE=0x00000178
   XSHAL_XT2000_CACHEATTR_BYPASS=0xFF22222F
   XSHAL_XT2000_CACHEATTR_DEFAULT=XSHAL_XT2000_CACHEATTR_WRITEBACK
   XSHAL_XT2000_CACHEATTR_WRITEALLOC=0xFF22111F
   XSHAL_XT2000_CACHEATTR_WRITEBACK=0xFF22111F
   XSHAL_XT2000_CACHEATTR_WRITETHRU=0xFF22111F
   XSHAL_XT2000_PIPE_REGIONS=0x00000000
   XSHAL_XT2000_SDRAM_REGIONS=0x00000440
   xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParameters,uxPriority,pxCreatedTask)=xTaskCreatePinnedToCore( ( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvParameters ), ( uxPriority ), ( pxCreatedTask ), tskNO_AFFINITY )
   xTaskHandle=TaskHandle_t
   xTaskNotifyGive(xTaskToNotify)=xTaskNotify( ( xTaskToNotify ), 0, eIncrement );
   xTaskParameters=TaskParameters_t
   xTaskStatusType=TaskStatus_t
   XTENSA_CONFIG_CORE_H=
   XTENSA_CONFIG_CORE_MATMAP_H=
   XTENSA_CONFIG_H=
   XTENSA_CONFIG_SYSTEM_H=
   XTENSA_CONTEXT_H=
   XTENSA_COREBITS_H=
   XTENSA_HAL_H=
   XTENSA_HWCIDSCHEME_RA_2004_1=1100
   XTENSA_HWCIDSCHEME_RA_2005_1=1100
   XTENSA_HWCIDSCHEME_RA_2005_2=1100
   XTENSA_HWCIDSCHEME_RA_2005_3=1100
   XTENSA_HWCIDSCHEME_RA_2006_4=1100
   XTENSA_HWCIDSCHEME_RA_2006_5=1100
   XTENSA_HWCIDSCHEME_RA_2006_6=1100
   XTENSA_HWCIDSCHEME_RA_2007_7=1100
   XTENSA_HWCIDSCHEME_RA_2008_8=1100
   XTENSA_HWCIDSCHEME_RB_2006_0=1100
   XTENSA_HWCIDSCHEME_RB_2007_1=1100
   XTENSA_HWCIDSCHEME_RB_2007_2=1100
   XTENSA_HWCIDSCHEME_RB_2007_2_MP=1100
   XTENSA_HWCIDSCHEME_RB_2008_3=1100
   XTENSA_HWCIDSCHEME_RB_2008_4=1100
   XTENSA_HWCIDSCHEME_RB_2009_5=1100
   XTENSA_HWCIDSCHEME_RC_2009_0=1100
   XTENSA_HWCIDSCHEME_RC_2010_1=1100
   XTENSA_HWCIDSCHEME_RC_2010_2=1100
   XTENSA_HWCIDSCHEME_RC_2011_3=1100
   XTENSA_HWCIDSCHEME_RD_2010_0=1100
   XTENSA_HWCIDSCHEME_RD_2011_1=1100
   XTENSA_HWCIDSCHEME_RD_2011_2=1100
   XTENSA_HWCIDSCHEME_RD_2011_3=1100
   XTENSA_HWCIDSCHEME_RD_2012_4=1100
   XTENSA_HWCIDSCHEME_RD_2012_5=1100
   XTENSA_HWCIDSCHEME_RE_2012_0=1100
   XTENSA_HWCIDSCHEME_RE_2012_1=1100
   XTENSA_HWCIDSCHEME_RE_2013_2=1100
   XTENSA_HWCIDSCHEME_RE_2013_3=1100
   XTENSA_HWCIDSCHEME_RE_2013_4=1100
   XTENSA_HWCIDSCHEME_RE_2014_5=1100
   XTENSA_HWCIDSCHEME_RE_2015_6=1100
   XTENSA_HWCIDSCHEME_RF_2014_0=1100
   XTENSA_HWCIDSCHEME_RF_2014_1=1100
   XTENSA_HWCIDSCHEME_RF_2015_2=1100
   XTENSA_HWCIDSCHEME_RF_2015_3=1100
   XTENSA_HWCIDSCHEME_RG_2015_0=1100
   XTENSA_HWCIDSCHEME_T1020_0=10
   XTENSA_HWCIDSCHEME_T1020_1=10
   XTENSA_HWCIDSCHEME_T1020_2=10
   XTENSA_HWCIDSCHEME_T1020_2B=10
   XTENSA_HWCIDSCHEME_T1020_3=10
   XTENSA_HWCIDSCHEME_T1020_4=10
   XTENSA_HWCIDSCHEME_T1030_0=10
   XTENSA_HWCIDSCHEME_T1030_1=10
   XTENSA_HWCIDSCHEME_T1030_2=10
   XTENSA_HWCIDSCHEME_T1030_3=10
   XTENSA_HWCIDSCHEME_T1040_0=10
   XTENSA_HWCIDSCHEME_T1040_1=01
   XTENSA_HWCIDSCHEME_T1040_1P=10
   XTENSA_HWCIDSCHEME_T1040_2=01
   XTENSA_HWCIDSCHEME_T1040_3=01
   XTENSA_HWCIDSCHEME_T1050_0=1100
   XTENSA_HWCIDSCHEME_T1050_1=1100
   XTENSA_HWCIDSCHEME_T1050_2=1100
   XTENSA_HWCIDSCHEME_T1050_3=1100
   XTENSA_HWCIDSCHEME_T1050_4=1100
   XTENSA_HWCIDSCHEME_T1050_5=1100
   XTENSA_HWCIDVERS_RA_2004_1=3
   XTENSA_HWCIDVERS_RA_2005_1=20
   XTENSA_HWCIDVERS_RA_2005_2=21
   XTENSA_HWCIDVERS_RA_2005_3=22
   XTENSA_HWCIDVERS_RA_2006_4=23
   XTENSA_HWCIDVERS_RA_2006_5=24
   XTENSA_HWCIDVERS_RA_2006_6=25
   XTENSA_HWCIDVERS_RA_2007_7=26
   XTENSA_HWCIDVERS_RA_2008_8=27
   XTENSA_HWCIDVERS_RB_2006_0=48
   XTENSA_HWCIDVERS_RB_2007_1=49
   XTENSA_HWCIDVERS_RB_2007_2=52
   XTENSA_HWCIDVERS_RB_2007_2_MP=64
   XTENSA_HWCIDVERS_RB_2008_3=53
   XTENSA_HWCIDVERS_RB_2008_4=54
   XTENSA_HWCIDVERS_RB_2009_5=55
   XTENSA_HWCIDVERS_RC_2009_0=65
   XTENSA_HWCIDVERS_RC_2010_1=66
   XTENSA_HWCIDVERS_RC_2010_2=67
   XTENSA_HWCIDVERS_RC_2011_3=68
   XTENSA_HWCIDVERS_RD_2010_0=80
   XTENSA_HWCIDVERS_RD_2011_1=81
   XTENSA_HWCIDVERS_RD_2011_2=82
   XTENSA_HWCIDVERS_RD_2011_3=83
   XTENSA_HWCIDVERS_RD_2012_4=84
   XTENSA_HWCIDVERS_RD_2012_5=85
   XTENSA_HWCIDVERS_RE_2012_0=96
   XTENSA_HWCIDVERS_RE_2012_1=97
   XTENSA_HWCIDVERS_RE_2013_2=98
   XTENSA_HWCIDVERS_RE_2013_3=99
   XTENSA_HWCIDVERS_RE_2013_4=100
   XTENSA_HWCIDVERS_RE_2014_5=101
   XTENSA_HWCIDVERS_RE_2015_6=102
   XTENSA_HWCIDVERS_RF_2014_0=112
   XTENSA_HWCIDVERS_RF_2014_1=113
   XTENSA_HWCIDVERS_RF_2015_2=114
   XTENSA_HWCIDVERS_RF_2015_3=115
   XTENSA_HWCIDVERS_RG_2015_0=128
   XTENSA_HWCIDVERS_T1020_0=2
   XTENSA_HWCIDVERS_T1020_1=3
   XTENSA_HWCIDVERS_T1020_2=4
   XTENSA_HWCIDVERS_T1020_2B=5
   XTENSA_HWCIDVERS_T1020_3=6
   XTENSA_HWCIDVERS_T1020_4=7
   XTENSA_HWCIDVERS_T1030_0=9
   XTENSA_HWCIDVERS_T1030_1=10
   XTENSA_HWCIDVERS_T1030_2=11
   XTENSA_HWCIDVERS_T1030_3=12
   XTENSA_HWCIDVERS_T1040_0=15
   XTENSA_HWCIDVERS_T1040_1=32
   XTENSA_HWCIDVERS_T1040_1P=16
   XTENSA_HWCIDVERS_T1040_2=33
   XTENSA_HWCIDVERS_T1040_3=34
   XTENSA_HWCIDVERS_T1050_0=1
   XTENSA_HWCIDVERS_T1050_1=2
   XTENSA_HWCIDVERS_T1050_2=4
   XTENSA_HWCIDVERS_T1050_3=6
   XTENSA_HWCIDVERS_T1050_4=7
   XTENSA_HWCIDVERS_T1050_5=8
   XTENSA_HWVERSION_RA_2004_1=210000
   XTENSA_HWVERSION_RA_2005_1=210001
   XTENSA_HWVERSION_RA_2005_2=210002
   XTENSA_HWVERSION_RA_2005_3=210003
   XTENSA_HWVERSION_RA_2006_4=210004
   XTENSA_HWVERSION_RA_2006_5=210005
   XTENSA_HWVERSION_RA_2006_6=210006
   XTENSA_HWVERSION_RA_2007_7=210007
   XTENSA_HWVERSION_RA_2008_8=210008
   XTENSA_HWVERSION_RB_2006_0=220000
   XTENSA_HWVERSION_RB_2007_1=220001
   XTENSA_HWVERSION_RB_2007_2=221000
   XTENSA_HWVERSION_RB_2007_2_MP=221100
   XTENSA_HWVERSION_RB_2008_3=221001
   XTENSA_HWVERSION_RB_2008_4=221002
   XTENSA_HWVERSION_RB_2009_5=221003
   XTENSA_HWVERSION_RC_2009_0=230000
   XTENSA_HWVERSION_RC_2010_1=230001
   XTENSA_HWVERSION_RC_2010_2=230002
   XTENSA_HWVERSION_RC_2011_3=230003
   XTENSA_HWVERSION_RD_2010_0=240000
   XTENSA_HWVERSION_RD_2011_1=240001
   XTENSA_HWVERSION_RD_2011_2=240002
   XTENSA_HWVERSION_RD_2011_3=240003
   XTENSA_HWVERSION_RD_2012_4=240004
   XTENSA_HWVERSION_RD_2012_5=240005
   XTENSA_HWVERSION_RE_2012_0=250000
   XTENSA_HWVERSION_RE_2012_1=250001
   XTENSA_HWVERSION_RE_2013_2=250002
   XTENSA_HWVERSION_RE_2013_3=250003
   XTENSA_HWVERSION_RE_2013_4=250004
   XTENSA_HWVERSION_RE_2014_5=250005
   XTENSA_HWVERSION_RE_2015_6=250006
   XTENSA_HWVERSION_RF_2014_0=260000
   XTENSA_HWVERSION_RF_2014_1=260001
   XTENSA_HWVERSION_RF_2015_2=260002
   XTENSA_HWVERSION_RF_2015_3=260003
   XTENSA_HWVERSION_RG_2015_0=270000
   XTENSA_HWVERSION_T1020_0=102000
   XTENSA_HWVERSION_T1020_1=102001
   XTENSA_HWVERSION_T1020_2=102002
   XTENSA_HWVERSION_T1020_2B=102002
   XTENSA_HWVERSION_T1020_3=102003
   XTENSA_HWVERSION_T1020_4=102004
   XTENSA_HWVERSION_T1030_0=103000
   XTENSA_HWVERSION_T1030_1=103001
   XTENSA_HWVERSION_T1030_2=103002
   XTENSA_HWVERSION_T1030_3=103003
   XTENSA_HWVERSION_T1040_0=104000
   XTENSA_HWVERSION_T1040_1=104001
   XTENSA_HWVERSION_T1040_1P=104001
   XTENSA_HWVERSION_T1040_2=104002
   XTENSA_HWVERSION_T1040_3=104003
   XTENSA_HWVERSION_T1050_0=105000
   XTENSA_HWVERSION_T1050_1=105001
   XTENSA_HWVERSION_T1050_2=105002
   XTENSA_HWVERSION_T1050_3=105003
   XTENSA_HWVERSION_T1050_4=105004
   XTENSA_HWVERSION_T1050_5=105005
   XTENSA_RELEASE_CANONICAL_NAME="RF-2015.3"
   XTENSA_RELEASE_NAME="RF-2015.3"
   XTENSA_SPECREG_H=
   XTENSA_SWVERSION=XTENSA_SWVERSION_RF_2015_3
   XTENSA_SWVERSION_10_0_0=XTENSA_SWVERSION_RE_2012_0
   XTENSA_SWVERSION_10_0_1=XTENSA_SWVERSION_RE_2012_1
   XTENSA_SWVERSION_10_0_2=XTENSA_SWVERSION_RE_2013_2
   XTENSA_SWVERSION_10_0_3=XTENSA_SWVERSION_RE_2013_3
   XTENSA_SWVERSION_10_0_4=XTENSA_SWVERSION_RE_2013_4
   XTENSA_SWVERSION_10_0_5=XTENSA_SWVERSION_RE_2014_5
   XTENSA_SWVERSION_10_0_6=XTENSA_SWVERSION_RE_2015_6
   XTENSA_SWVERSION_11_0_0=XTENSA_SWVERSION_RF_2014_0
   XTENSA_SWVERSION_11_0_1=XTENSA_SWVERSION_RF_2014_1
   XTENSA_SWVERSION_11_0_2=XTENSA_SWVERSION_RF_2015_2
   XTENSA_SWVERSION_11_0_3=XTENSA_SWVERSION_RF_2015_3
   XTENSA_SWVERSION_12_0_0=XTENSA_SWVERSION_RG_2015_0
   XTENSA_SWVERSION_6_0_0=XTENSA_SWVERSION_RA_2004_1
   XTENSA_SWVERSION_6_0_1=XTENSA_SWVERSION_RA_2005_1
   XTENSA_SWVERSION_6_0_2=XTENSA_SWVERSION_RA_2005_2
   XTENSA_SWVERSION_6_0_3=XTENSA_SWVERSION_RA_2005_3
   XTENSA_SWVERSION_6_0_4=XTENSA_SWVERSION_RA_2006_4
   XTENSA_SWVERSION_6_0_5=XTENSA_SWVERSION_RA_2006_5
   XTENSA_SWVERSION_6_0_6=XTENSA_SWVERSION_RA_2006_6
   XTENSA_SWVERSION_6_0_7=XTENSA_SWVERSION_RA_2007_7
   XTENSA_SWVERSION_6_0_8=XTENSA_SWVERSION_RA_2008_8
   XTENSA_SWVERSION_7_0_0=XTENSA_SWVERSION_RB_2006_0
   XTENSA_SWVERSION_7_0_1=XTENSA_SWVERSION_RB_2007_1
   XTENSA_SWVERSION_7_1_0=XTENSA_SWVERSION_RB_2007_2
   XTENSA_SWVERSION_7_1_1=XTENSA_SWVERSION_RB_2008_3
   XTENSA_SWVERSION_7_1_2=XTENSA_SWVERSION_RB_2008_4
   XTENSA_SWVERSION_7_1_3=XTENSA_SWVERSION_RB_2009_5
   XTENSA_SWVERSION_7_1_8_MP=XTENSA_SWVERSION_RB_2007_2_MP
   XTENSA_SWVERSION_8_0_0=XTENSA_SWVERSION_RC_2009_0
   XTENSA_SWVERSION_8_0_1=XTENSA_SWVERSION_RC_2010_1
   XTENSA_SWVERSION_8_0_2=XTENSA_SWVERSION_RC_2010_2
   XTENSA_SWVERSION_8_0_3=XTENSA_SWVERSION_RC_2011_3
   XTENSA_SWVERSION_9_0_0=XTENSA_SWVERSION_RD_2010_0
   XTENSA_SWVERSION_9_0_1=XTENSA_SWVERSION_RD_2011_1
   XTENSA_SWVERSION_9_0_2=XTENSA_SWVERSION_RD_2011_2
   XTENSA_SWVERSION_9_0_3=XTENSA_SWVERSION_RD_2011_3
   XTENSA_SWVERSION_9_0_4=XTENSA_SWVERSION_RD_2012_4
   XTENSA_SWVERSION_9_0_5=XTENSA_SWVERSION_RD_2012_5
   XTENSA_SWVERSION_CANONICAL_NAME="11.0.3"
   XTENSA_SWVERSION_LICENSE_NAME="11.0"
   XTENSA_SWVERSION_MAJORMID_NAME="11.0"
   XTENSA_SWVERSION_MAJOR_NAME="11"
   XTENSA_SWVERSION_NAME="11.0.3"
   XTENSA_SWVERSION_RA_2004_1=600000
   XTENSA_SWVERSION_RA_2005_1=600001
   XTENSA_SWVERSION_RA_2005_2=600002
   XTENSA_SWVERSION_RA_2005_3=600003
   XTENSA_SWVERSION_RA_2006_4=600004
   XTENSA_SWVERSION_RA_2006_5=600005
   XTENSA_SWVERSION_RA_2006_6=600006
   XTENSA_SWVERSION_RA_2007_7=600007
   XTENSA_SWVERSION_RA_2008_8=600008
   XTENSA_SWVERSION_RB_2006_0=700000
   XTENSA_SWVERSION_RB_2007_1=700001
   XTENSA_SWVERSION_RB_2007_2=701000
   XTENSA_SWVERSION_RB_2007_2_MP=701100
   XTENSA_SWVERSION_RB_2008_3=701001
   XTENSA_SWVERSION_RB_2008_4=701002
   XTENSA_SWVERSION_RB_2009_5=701003
   XTENSA_SWVERSION_RC_2009_0=800000
   XTENSA_SWVERSION_RC_2010_1=800001
   XTENSA_SWVERSION_RC_2010_2=800002
   XTENSA_SWVERSION_RC_2011_3=800003
   XTENSA_SWVERSION_RD_2010_0=900000
   XTENSA_SWVERSION_RD_2011_1=900001
   XTENSA_SWVERSION_RD_2011_2=900002
   XTENSA_SWVERSION_RD_2011_3=900003
   XTENSA_SWVERSION_RD_2012_4=900004
   XTENSA_SWVERSION_RD_2012_5=900005
   XTENSA_SWVERSION_RE_2012_0=1000000
   XTENSA_SWVERSION_RE_2012_1=1000001
   XTENSA_SWVERSION_RE_2013_2=1000002
   XTENSA_SWVERSION_RE_2013_3=1000003
   XTENSA_SWVERSION_RE_2013_4=1000004
   XTENSA_SWVERSION_RE_2014_5=1000005
   XTENSA_SWVERSION_RE_2015_6=1000006
   XTENSA_SWVERSION_RF_2014_0=1100000
   XTENSA_SWVERSION_RF_2014_1=1100001
   XTENSA_SWVERSION_RF_2015_2=1100002
   XTENSA_SWVERSION_RF_2015_3=1100003
   XTENSA_SWVERSION_RG_2015_0=1200000
   XTENSA_SWVERSION_T1020_0=102000
   XTENSA_SWVERSION_T1020_1=102001
   XTENSA_SWVERSION_T1020_2=102002
   XTENSA_SWVERSION_T1020_2B=102002
   XTENSA_SWVERSION_T1020_3=102003
   XTENSA_SWVERSION_T1020_4=102004
   XTENSA_SWVERSION_T1030_0=103000
   XTENSA_SWVERSION_T1030_1=103001
   XTENSA_SWVERSION_T1030_2=103002
   XTENSA_SWVERSION_T1030_3=103003
   XTENSA_SWVERSION_T1040_0=104000
   XTENSA_SWVERSION_T1040_1=104001
   XTENSA_SWVERSION_T1040_1P=104001
   XTENSA_SWVERSION_T1040_1_PREHOTFIX=XTENSA_SWVERSION_T1040_1P
   XTENSA_SWVERSION_T1040_2=104002
   XTENSA_SWVERSION_T1040_3=104003
   XTENSA_SWVERSION_T1050_0=105000
   XTENSA_SWVERSION_T1050_1=105001
   XTENSA_SWVERSION_T1050_2=105002
   XTENSA_SWVERSION_T1050_3=105003
   XTENSA_SWVERSION_T1050_4=105004
   XTENSA_SWVERSION_T1050_5=105005
   XTENSA_VERSIONS_H=
   XTHAL_ABI_CALL0=1
   XTHAL_ABI_WINDOWED=0
   XTHAL_AMB_ALLOCATE=2
   XTHAL_AMB_COHERENT=6
   XTHAL_AMB_EXCEPTION=0
   XTHAL_AMB_GUARD=5
   XTHAL_AMB_HITCACHE=1
   XTHAL_AMB_ISOLATE=4
   XTHAL_AMB_WRITETHRU=3
   XTHAL_AM_ALLOCATE=(1<<XTHAL_AMB_ALLOCATE)
   XTHAL_AM_COHERENT=(1<<XTHAL_AMB_COHERENT)
   XTHAL_AM_EXCEPTION=(1<<XTHAL_AMB_EXCEPTION)
   XTHAL_AM_GUARD=(1<<XTHAL_AMB_GUARD)
   XTHAL_AM_HITCACHE=(1<<XTHAL_AMB_HITCACHE)
   XTHAL_AM_ISOLATE=(1<<XTHAL_AMB_ISOLATE)
   XTHAL_AM_WRITETHRU=(1<<XTHAL_AMB_WRITETHRU)
   XTHAL_BIGENDIAN=1
   XTHAL_CAFLAG_EXACT=0x000200
   XTHAL_CAFLAG_EXPAND=0x000100
   XTHAL_CAFLAG_NO_AUTO_INV=0x001000
   XTHAL_CAFLAG_NO_AUTO_WB=0x000800
   XTHAL_CAFLAG_NO_PARTIAL=0x000400
   XTHAL_CLIB_NEWLIB=0
   XTHAL_CLIB_UCLIBC=1
   XTHAL_CLIB_XCLIB=2
   XTHAL_DCACHE_PREFETCH(n)=(0x800F0000+((n)&0xF))
   XTHAL_DCACHE_PREFETCH_HIGH=XTHAL_DCACHE_PREFETCH(8)
   XTHAL_DCACHE_PREFETCH_L1=0x90001000
   XTHAL_DCACHE_PREFETCH_L1_OFF=0x90000000
   XTHAL_DCACHE_PREFETCH_LOW=XTHAL_DCACHE_PREFETCH(4)
   XTHAL_DCACHE_PREFETCH_MEDIUM=XTHAL_DCACHE_PREFETCH(5)
   XTHAL_DCACHE_PREFETCH_OFF=XTHAL_DCACHE_PREFETCH(0)
   XTHAL_DISASM_BUFSIZE=80
   XTHAL_DISASM_OPT_ADDR=0x0001
   XTHAL_DISASM_OPT_ALL=0x0FFF
   XTHAL_DISASM_OPT_OPCODE=0x0004
   XTHAL_DISASM_OPT_OPHEX=0x0002
   XTHAL_DISASM_OPT_PARMS=0x0008
   XTHAL_FAM_BYPASS=0x000
   XTHAL_FAM_CACHED=0x006
   XTHAL_FAM_EXCEPTION=0x001
   XTHAL_FUZZY_AND(a,b)=(((a)==0 || (b)==0) ? 0 : ((a)==1 && (b)==1) ? 1 : XTHAL_MAYBE)
   XTHAL_FUZZY_NOT(a)=(((a)==0 || (a)==1) ? (1-(a)) : XTHAL_MAYBE)
   XTHAL_FUZZY_OR(a,b)=(((a)==1 || (b)==1) ? 1 : ((a)==0 && (b)==0) ? 0 : XTHAL_MAYBE)
   xthal_get_intread=xthal_get_interrupt
   XTHAL_ICACHE_PREFETCH(n)=(0x80F00000+(((n)&0xF)<<4))
   XTHAL_ICACHE_PREFETCH_HIGH=XTHAL_ICACHE_PREFETCH(8)
   XTHAL_ICACHE_PREFETCH_L1=0xA0002000
   XTHAL_ICACHE_PREFETCH_L1_OFF=0xA0000000
   XTHAL_ICACHE_PREFETCH_LOW=XTHAL_ICACHE_PREFETCH(4)
   XTHAL_ICACHE_PREFETCH_MEDIUM=XTHAL_ICACHE_PREFETCH(5)
   XTHAL_ICACHE_PREFETCH_OFF=XTHAL_ICACHE_PREFETCH(0)
   XTHAL_INST_ILL=0x000000
   XTHAL_INTTYPE_EXTERN_EDGE=2
   XTHAL_INTTYPE_EXTERN_LEVEL=3
   XTHAL_INTTYPE_NMI=5
   XTHAL_INTTYPE_PROFILING=7
   XTHAL_INTTYPE_SOFTWARE=1
   XTHAL_INTTYPE_TIMER=4
   XTHAL_INTTYPE_UNCONFIGURED=0
   XTHAL_INTTYPE_WRITE_ERROR=6
   XTHAL_LAM_BYPASS=0x000
   XTHAL_LAM_BYPASSG=0x020
   XTHAL_LAM_CACHED=0x006
   XTHAL_LAM_CACHED_NOALLOC=0x002
   XTHAL_LAM_COHCACHED=0x046
   XTHAL_LAM_EXCEPTION=0x001
   XTHAL_LAM_ISOLATE=0x012
   XTHAL_LAM_NACACHED=XTHAL_LAM_CACHED_NOALLOC
   XTHAL_LAM_NACACHEDG=0x022
   XTHAL_LITTLEENDIAN=0
   XTHAL_MAJOR_REV=XTHAL_RELEASE_MAJOR
   XTHAL_MAX_CPS=8
   XTHAL_MAX_INTERRUPTS=32
   XTHAL_MAX_INTLEVELS=16
   XTHAL_MAX_INTTYPES=8
   XTHAL_MAX_TIMERS=4
   XTHAL_MAYBE=-1
   XTHAL_MEMEP_ECC=2
   XTHAL_MEMEP_F_CORRECTABLE=16
   XTHAL_MEMEP_F_DCACHE_DATA=4
   XTHAL_MEMEP_F_DCACHE_TAG=5
   XTHAL_MEMEP_F_ICACHE_DATA=6
   XTHAL_MEMEP_F_ICACHE_TAG=7
   XTHAL_MEMEP_F_LOCAL=0
   XTHAL_MEMEP_PARITY=1
   XTHAL_MINOR_REV=XTHAL_RELEASE_MINOR
   XTHAL_NO_MAPPING=-6
   XTHAL_PAM_BYPASS=0x000
   XTHAL_PAM_BYPASS_BUF=0x010
   XTHAL_PAM_CACHED_NOALLOC=0x030
   XTHAL_PAM_WRITEBACK=0x1F0
   XTHAL_PAM_WRITEBACK_NOALLOC=0x0F0
   XTHAL_PAM_WRITETHRU=0x0B0
   XTHAL_PREFETCH_BLOCKS(n)=(0x0000000F80000000ULL + (((unsigned long long)_XTHAL_PREFETCH_BLOCKS(n))<<48))
   XTHAL_PREFETCH_DISABLE=0xFFFF0000
   XTHAL_PREFETCH_ENABLE=-1
   XTHAL_RELEASE_MAJOR=11000
   XTHAL_RELEASE_MINOR=3
   XTHAL_RELEASE_NAME="11.0.3"
   XTHAL_REL_11=1
   XTHAL_REL_11_0=1
   XTHAL_REL_11_0_3=1
   XTHAL_REL_EQ(maja,mina,majb,minb)=((maja) == (majb) && (mina) == (minb))
   XTHAL_REL_GE(maja,mina,majb,minb)=((maja) > (majb) || ((maja) == (majb) && (mina) >= (minb)))
   XTHAL_REL_GT(maja,mina,majb,minb)=((maja) > (majb) || ((maja) == (majb) && (mina) > (minb)))
   XTHAL_REL_LE(maja,mina,majb,minb)=((maja) < (majb) || ((maja) == (majb) && (mina) <= (minb)))
   XTHAL_REL_LT(maja,mina,majb,minb)=((maja) < (majb) || ((maja) == (majb) && (mina) < (minb)))
   XTHAL_SAM_BYPASS=0x028
   XTHAL_SAM_COHWRITEBACK=0x066
   XTHAL_SAM_EXCEPTION=0x001
   XTHAL_SAM_ISOLATE=0x032
   XTHAL_SAM_WRITEBACK=0x026
   XTHAL_SAM_WRITEBACK_NOALLOC=0x022
   XTHAL_SAM_WRITETHRU=0x02A
   xthal_set_cache_prefetch=xthal_set_cache_prefetch_long
   xthal_set_cache_prefetch_nw=xthal_set_cache_prefetch_long_nw
   XTHAL_TIMER_UNASSIGNED=XTHAL_TIMER_UNCONFIGURED
   XTHAL_TIMER_UNCONFIGURED=-1
   xTimeOutType=TimeOut_t
   xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )
   xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHigherPriorityTaskWoken)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )
   xTimerDelete(xTimer,xTicksToWait)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTicksToWait ) )
   xTimerHandle=TimerHandle_t
   xTimerReset(xTimer,xTicksToWait)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
   xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
   xTimerStart(xTimer,xTicksToWait)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
   xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
   xTimerStop(xTimer,xTicksToWait)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksToWait ) )
   xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)=xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )
   XTOS_COREF_PSO=0x00000001
   XTOS_COREF_PSO_SHIFT=0
   XTOS_DISABLE_ALL_INTERRUPTS=XTOS_SET_INTLEVEL(15)
   XTOS_DISABLE_EXCM_INTERRUPTS=XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL)
   XTOS_DISABLE_LOWPRI_INTERRUPTS=XTOS_SET_INTLEVEL(XCHAL_NUM_LOWPRI_LEVELS)
   XTOS_ENABLE_INTERRUPTS=XTOS_SET_INTLEVEL(0)
   XTOS_KEEPON_DEBUG=0x00001000
   XTOS_KEEPON_DEBUG_SHIFT=12
   XTOS_KEEPON_MEM=0x00000100
   XTOS_KEEPON_MEM_SHIFT=8
   XTOS_MASK_EXCM_INTERRUPTS=XTOS_SET_MIN_INTLEVEL(XCHAL_EXCM_LEVEL)
   XTOS_MASK_LOWPRI_INTERRUPTS=XTOS_SET_MIN_INTLEVEL(XCHAL_NUM_LOWPRI_LEVELS)
   XTOS_RESTORE_INTLEVEL(restoreval)=do{ unsigned __tmp = (restoreval); __asm__ __volatile__( "wsr	%0, " XTSTR(PS) " ; rsync\n" : : "a" (__tmp) : "memory" ); }while(0)
   XTOS_RESTORE_JUST_INTLEVEL(restoreval)=_xtos_set_intlevel(restoreval)
   XTOS_SET_INTLEVEL(intlevel)=({ unsigned __tmp; __asm__ __volatile__( "rsil	%0, " XTSTR(intlevel) "\n" : "=a" (__tmp) : : "memory" ); __tmp;})
   XTOS_SET_MIN_INTLEVEL(intlevel)=({ unsigned __tmp, __tmp2, __tmp3; __asm__ __volatile__( "rsr	%0, " XTSTR(PS) "\n" "movi	%2, " XTSTR(intlevel) "\n" "extui	%1, %0, 0, 4\n" "blt	%2, %1, 1f\n" "rsil	%0, " XTSTR(intlevel) "\n" "1:\n" : "=a" (__tmp), "=&a" (__tmp2), "=&a" (__tmp3) : : "memory" ); __tmp;})
   XTRUNTIME_H=
   XTSTR(x)=_XTSTR(x)
   XT_CLIB_CONTEXT_AREA_SIZE=0
   XT_CLOCK_FREQ=(CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ * 1000000)
   XT_CP0_SA=0
   XT_CP1_SA=ALIGNUP(XCHAL_CP1_SA_ALIGN, XT_CP0_SA + XCHAL_CP0_SA_SIZE)
   XT_CP2_SA=ALIGNUP(XCHAL_CP2_SA_ALIGN, XT_CP1_SA + XCHAL_CP1_SA_SIZE)
   XT_CP3_SA=ALIGNUP(XCHAL_CP3_SA_ALIGN, XT_CP2_SA + XCHAL_CP2_SA_SIZE)
   XT_CP4_SA=ALIGNUP(XCHAL_CP4_SA_ALIGN, XT_CP3_SA + XCHAL_CP3_SA_SIZE)
   XT_CP5_SA=ALIGNUP(XCHAL_CP5_SA_ALIGN, XT_CP4_SA + XCHAL_CP4_SA_SIZE)
   XT_CP6_SA=ALIGNUP(XCHAL_CP6_SA_ALIGN, XT_CP5_SA + XCHAL_CP5_SA_SIZE)
   XT_CP7_SA=ALIGNUP(XCHAL_CP7_SA_ALIGN, XT_CP6_SA + XCHAL_CP6_SA_SIZE)
   XT_CPENABLE=0
   XT_CPSTORED=2
   XT_CP_ASA=8
   XT_CP_CS_ST=4
   XT_CP_SA_SIZE=ALIGNUP(16, XT_CP7_SA + XCHAL_CP7_SA_SIZE)
   XT_CP_SIZE=(12 + XT_CP_SA_SIZE + XCHAL_TOTAL_SA_ALIGN)
   XT_SOL_FRMSZ=ALIGNUP(0x10, XtSolFrameSize)
   XT_STACK_EXTRA=(XT_XTRA_SIZE)
   XT_STACK_EXTRA_CLIB=(XT_XTRA_SIZE + XT_CLIB_CONTEXT_AREA_SIZE)
   XT_STACK_MIN_SIZE=((XT_XTRA_SIZE + XT_USER_SIZE) / sizeof(unsigned char))
   XT_STK_EXTRA=ALIGNUP(XCHAL_EXTRA_SA_ALIGN, XT_STK_NEXT1)
   XT_STK_FRMSZ=(ALIGNUP(0x10, XT_STK_NEXT2) + 0x20)
   XT_STK_NEXT1=sizeof(XtExcFrame)
   XT_STK_NEXT2=(XT_STK_EXTRA + XCHAL_EXTRA_SA_SIZE)
   XT_TIMER_INDEX=0
   XT_USER_SIZE=0x400
   XT_USE_THREAD_SAFE_CLIB=0
   XT_XTRA_SIZE=(XT_STK_FRMSZ + STK_INTEXC_EXTRA + 0x20 + XT_CP_SIZE)
   _AND=,
   _ANSIDECL_H_=
   _ANSI_STDDEF_H=
   _ATEXIT_DYNAMIC_ALLOC=1
   _ATEXIT_INIT={_NULL, 0, {_NULL}, _NULL}
   _ATEXIT_SIZE=32
   _ATTRIBUTE(attrs)=__attribute__ (attrs)
   _BEGIN_STD_C=
   _BSDTYPES_DEFINED=
   _BSD_PTRDIFF_T_=
   _BSD_SIZE_T_=
   _BSD_SIZE_T_DEFINED_=
   _BSD_WCHAR_T_=
   _CAST_VOID=(void)
   _CLOCKID_T_=unsigned long
   _CLOCK_T_=unsigned long
   _CONST=const
   _DEFUN(name,arglist,args)=name(args)
   _DEFUN_VOID(name)=name(_NOARGS)
   _DOTS=, ...
   _ELIDABLE_INLINE=static __inline__
   _END_STD_C=
   _ETSTR(v)=# v
   _ETS_SET_INTLEVEL(intlevel)=({ unsigned __tmp; __asm__ __volatile__( "rsil   %0, " _ETSTR(intlevel) "\n" : "=a" (__tmp) : : "memory" ); })
   _EXFNPTR(name,proto)=(* name) proto
   _EXFUN(name,proto)=name proto
   _EXFUN_NOTHROW(name,proto)=name proto _NOTHROW
   _EXPARM(name,proto)=(* name) proto
   _flockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))
   _FSEEK_OPTIMIZATION=1
   _FSTDIO=
   _funlockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
   _FVWRITE_IN_STREAMIO=1
   _GCC_LIMITS_H_=
   _GCC_MAX_ALIGN_T=
   _GCC_NEXT_LIMITS_H=
   _GCC_PTRDIFF_T=
   _GCC_SIZE_T=
   _GCC_WCHAR_T=
   _GCC_WRAP_STDINT_H=
   _GLOBAL_ATEXIT=(_GLOBAL_REENT->_atexit)
   _GLOBAL_REENT=_global_impure_ptr
   _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL=1
   _HAVE_LONG_DOUBLE=1
   _HAVE_STDC=
   _IO(x,y)=(IOC_VOID|((x)<<8)|(y))
   _IOFBF=0
   _IOLBF=1
   _IONBF=2
   _IOR(x,y,t)=(IOC_OUT|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y))
   _IOW(x,y,t)=(IOC_IN|(((long)sizeof(t)&IOCPARM_MASK)<<16)|((x)<<8)|(y))
   _Kmax=(sizeof (size_t) << 3)
   _LDBL_EQ_DBL=1
   _LIBC_LIMITS_H_=1
   _LIMITS_H___=
   _LONG_DOUBLE=long double
   _MACHINE__DEFAULT_TYPES_H=
   _MACHINE__TYPES_H=
   _MACHSTDLIB_H_=
   _MACHTYPES_H_=
   _MB_LEN_MAX=1
   _MEMCTL_L0IBUF_EN=0x01
   _MEMCTL_SNOOP_EN=0x00
   _MQTT_CONFIG_H_=
   _MQTT_H_=
   _NANO_FORMATTED_IO=1
   _NEWLIB_ALLOCA_H=
   _NEWLIB_STDIO_H=
   _NEWLIB_VERSION="2.2.0"
   _NOARGS=void
   _NOINLINE=__attribute__ ((__noinline__))
   _NOINLINE_STATIC=_NOINLINE static
   _NOTHROW=
   _NULL=0
   _PARAMS(paramlist)=paramlist
   _POINTER_INT=long
   _POSIX2_RE_DUP_MAX=255
   _PTR=void *
   _PTRDIFF_T=
   _PTRDIFF_T_=
   _PTRDIFF_T_DECLARED=
   _RAND48_ADD=(0x000b)
   _RAND48_MULT_0=(0xe66d)
   _RAND48_MULT_1=(0xdeec)
   _RAND48_MULT_2=(0x0005)
   _RAND48_SEED_0=(0x330e)
   _RAND48_SEED_1=(0xabcd)
   _RAND48_SEED_2=(0x1234)
   _READ_WRITE_BUFSIZE_TYPE=int
   _READ_WRITE_RETURN_TYPE=int
   _REENT=(__getreent())
   _REENT_ASCTIME_BUF(ptr)=((ptr)->_asctime_buf)
   _REENT_ASCTIME_SIZE=26
   _REENT_CHECK(var,what,type,size,init)=do { struct _reent *_r = (var); if (_r->what == NULL) { _r->what = (type)malloc(size); __reent_assert(_r->what); init; } } while (0)
   _REENT_CHECK_ASCTIME_BUF(var)=_REENT_CHECK(var, _asctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var)->_asctime_buf, 0, _REENT_ASCTIME_SIZE))
   _REENT_CHECK_EMERGENCY(var)=_REENT_CHECK(var, _emergency, char *, _REENT_EMERGENCY_SIZE, )
   _REENT_CHECK_MISC(var)=_REENT_CHECK(var, _misc, struct _misc_reent *, sizeof *((var)->_misc), _REENT_INIT_MISC(var))
   _REENT_CHECK_MP(var)=_REENT_CHECK(var, _mp, struct _mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var))
   _REENT_CHECK_RAND48(var)=_REENT_CHECK(var, _r48, struct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_RAND48((var)))
   _REENT_CHECK_SIGNAL_BUF(var)=_REENT_CHECK(var, _signal_buf, char *, _REENT_SIGNAL_SIZE, )
   _REENT_CHECK_TM(var)=_REENT_CHECK(var, _localtime_buf, struct __tm *, sizeof *((var)->_localtime_buf), )
   _REENT_EMERGENCY(ptr)=((ptr)->_emergency)
   _REENT_EMERGENCY_SIZE=25
   _REENT_GETDATE_ERR_P(ptr)=(&((ptr)->_misc->_getdate_err))
   _REENT_INIT(var)={ 0, (__FILE *)&__sf_fake_stdin, (__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_stderr, 0, _NULL, 0, 0, "C", _NULL, _NULL, 0, 0, _NULL, _NULL, _NULL, _NULL, _NULL, _REENT_INIT_ATEXIT {_NULL, 0, _NULL}, _NULL, _NULL, _NULL }
   _REENT_INIT_ATEXIT=_NULL, _ATEXIT_INIT,
   _REENT_INIT_MISC(var)=do { struct _reent *_r = (var); _r->_misc->_strtok_last = _NULL; _r->_misc->_mblen_state.__count = 0; _r->_misc->_mblen_state.__value.__wch = 0; _r->_misc->_wctomb_state.__count = 0; _r->_misc->_wctomb_state.__value.__wch = 0; _r->_misc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_state.__value.__wch = 0; _r->_misc->_mbrlen_state.__count = 0; _r->_misc->_mbrlen_state.__value.__wch = 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_misc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_mbsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_state.__value.__wch = 0; _r->_misc->_wcrtomb_state.__count = 0; _r->_misc->_wcrtomb_state.__value.__wch = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->_misc->_wcsrtombs_state.__value.__wch = 0; _r->_misc->_l64a_buf[0] = '\0'; _r->_misc->_getdate_err = 0; } while (0)
   _REENT_INIT_MP(var)=do { struct _reent *_r = (var); _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while (0)
   _REENT_INIT_PTR(var)={ memset((var), 0, sizeof(*(var))); (var)->_stdin = (__FILE *)&__sf_fake_stdin; (var)->_stdout = (__FILE *)&__sf_fake_stdout; (var)->_stderr = (__FILE *)&__sf_fake_stderr; (var)->_current_locale = "C"; }
   _REENT_INIT_RAND48(var)=do { struct _reent *_r = (var); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48->_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _RAND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; _r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mult[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD; _r->_r48->_rand_next = 1; } while (0)
   _REENT_L64A_BUF(ptr)=((ptr)->_misc->_l64a_buf)
   _REENT_MBLEN_STATE(ptr)=((ptr)->_misc->_mblen_state)
   _REENT_MBRLEN_STATE(ptr)=((ptr)->_misc->_mbrlen_state)
   _REENT_MBRTOWC_STATE(ptr)=((ptr)->_misc->_mbrtowc_state)
   _REENT_MBSRTOWCS_STATE(ptr)=((ptr)->_misc->_mbsrtowcs_state)
   _REENT_MBTOWC_STATE(ptr)=((ptr)->_misc->_mbtowc_state)
   _REENT_MP_FREELIST(ptr)=((ptr)->_mp->_freelist)
   _REENT_MP_P5S(ptr)=((ptr)->_mp->_p5s)
   _REENT_MP_RESULT(ptr)=((ptr)->_mp->_result)
   _REENT_MP_RESULT_K(ptr)=((ptr)->_mp->_result_k)
   _REENT_RAND48_ADD(ptr)=((ptr)->_r48->_add)
   _REENT_RAND48_MULT(ptr)=((ptr)->_r48->_mult)
   _REENT_RAND48_SEED(ptr)=((ptr)->_r48->_seed)
   _REENT_RAND_NEXT(ptr)=((ptr)->_r48->_rand_next)
   _REENT_SIGNAL_BUF(ptr)=((ptr)->_signal_buf)
   _REENT_SIGNAL_SIZE=24
   _REENT_SIGNGAM(ptr)=((ptr)->_gamma_signgam)
   _REENT_SMALL=
   _REENT_SMALL_CHECK_INIT(ptr)=do { if ((ptr) && !(ptr)->__sdidinit) __sinit (ptr); } while (0)
   _REENT_STRTOK_LAST(ptr)=((ptr)->_misc->_strtok_last)
   _REENT_TM(ptr)=((ptr)->_localtime_buf)
   _REENT_WCRTOMB_STATE(ptr)=((ptr)->_misc->_wcrtomb_state)
   _REENT_WCSRTOMBS_STATE(ptr)=((ptr)->_misc->_wcsrtombs_state)
   _REENT_WCTOMB_STATE(ptr)=((ptr)->_misc->_wctomb_state)
   _RING_BUF_H_=
   _ROM_ETS_SYS_H_=
   _SIGNED=signed
   _SIZET_=
   _SIZE_T=
   _SIZE_T_=
   _SIZE_T_DECLARED=
   _SIZE_T_DEFINED=
   _SIZE_T_DEFINED_=
   _STDBOOL_H=
   _STDDEF_H=
   _STDDEF_H_=
   _stderr_r(x)=((x)->_stderr)
   _STDINT_H=
   _stdin_r(x)=((x)->_stdin)
   _STDIO_H_=
   _STDLIB_H_=
   _stdout_r(x)=((x)->_stdout)
   _STRING_H_=
   _ST_INT32=__attribute__ ((__mode__ (__SI__)))
   _SYS_CDEFS_H_=
   _SYS_FEATURES_H=
   _SYS_QUEUE_H_=
   _SYS_REENT_H_=
   _SYS_SIZE_T_H=
   _SYS_TYPES_FD_SET=
   _SYS_TYPES_H=
   _SYS__INTSUP_H=
   _SYS__TYPES_H=
   _TCPIP_ADAPTER_H_=
   _TIMER_T_=unsigned long
   _TIME_T_=long
   _T_PTRDIFF=
   _T_PTRDIFF_=
   _T_SIZE=
   _T_SIZE_=
   _T_WCHAR=
   _T_WCHAR_=
   _UNBUF_STREAM_OPT=1
   _VOID=void
   _VOLATILE=volatile
   _WANT_REENT_SMALL=1
   _WCHAR_T=
   _WCHAR_T_=
   _WCHAR_T_DECLARED=
   _WCHAR_T_DEFINED=
   _WCHAR_T_DEFINED_=
   _WCHAR_T_H=
   _WIDE_ORIENT=1
   _WINT_T=
   _XCHAL_CP_SA_ALIGN(n)=XCHAL_CP ## n ## _SA_ALIGN
   _XCHAL_CP_SA_SIZE(n)=XCHAL_CP ## n ## _SA_SIZE
   _XCHAL_DTLB_SET(n,_what)=XCHAL_DTLB_SET ## n ## _what
   _XCHAL_DTLB_SET_E(n,i,_what)=XCHAL_DTLB_SET ## n ## _E ## i ## _what
   _XCHAL_INTLEVEL_ANDBELOWMASK(n)=XCHAL_INTLEVEL ## n ## _ANDBELOW_MASK
   _XCHAL_INTLEVEL_MASK(n)=XCHAL_INTLEVEL ## n ## _MASK
   _XCHAL_INTLEVEL_NUM(n)=XCHAL_INTLEVEL ## n ## _NUM
   _XCHAL_INTLEVEL_VECTOR_VADDR(n)=XCHAL_INTLEVEL ## n ## _VECTOR_VADDR
   _XCHAL_INT_LEVEL(n)=XCHAL_INT ## n ## _LEVEL
   _XCHAL_INT_TYPE(n)=XCHAL_INT ## n ## _TYPE
   _XCHAL_ITLB_SET(n,_what)=XCHAL_ITLB_SET ## n ## _what
   _XCHAL_ITLB_SET_E(n,i,_what)=XCHAL_ITLB_SET ## n ## _E ## i ## _what
   _XCHAL_TIMER_INTERRUPT(n)=XCHAL_TIMER ## n ## _INTERRUPT
   _XCJOIN(a,b)=a ## b
   _XTENSA_CORE_CONFIGURATION_H=
   _XTENSA_CORE_TIE_H=
   _XTENSA_LOCK_H__=
   _XTENSA_xt_core_HEADER=
   _XTHAL_PREFETCH_BLOCKS(n)=((n)<0?0:(n)<5?(n):(n)<15?((n)>>1)+2:9)
   _xtos_clear_saved_intenable=_xtos_ints_off
   _XTOS_CORE_STATE_H_=
   _xtos_set_execption_handler=_xtos_set_exception_handler
   _xtos_set_saved_intenable=_xtos_ints_on
   _XTRUNTIME_FRAMES_H_=
   _XTSTR(x)=# x
   __aligned(x)=__attribute__((__aligned__(x)))
   __always_inline=__attribute__((__always_inline__))
   __ASMNAME(cname)=__XSTRING (__USER_LABEL_PREFIX__) cname
   __attribute_format_strfmon__(a,b)=
   __ATTRIBUTE_IMPURE_PTR__=
   __attribute_malloc__=
   __attribute_pure__=
   __BEGIN_DECLS=
   __bool_true_false_are_defined=1
   __bounded=
   __BSD_VISIBLE=1
   __BUFSIZ__=128
   __builtin_constant_p(exp)=0
   __builtin_offsetof(T,m)=((size_t) &((T *)0)->m)
   __builtin_types_compatible_p(x,y)=__builtin_types_compatible_p(sizeof(x),sizeof(y))
   __builtin_va_arg(ap,type)=*(typeof(type) *)ap
   __caddr_t_defined=
   __CC_SUPPORTS_DYNAMIC_ARRAY_INIT=1
   __CC_SUPPORTS_INLINE=1
   __CC_SUPPORTS_VARADIC_XXX=1
   __CC_SUPPORTS_WARNING=1
   __CC_SUPPORTS___FUNC__=1
   __CC_SUPPORTS___INLINE=1
   __CC_SUPPORTS___INLINE__=1
   __CDT_PARSER__=1
   __clockid_t_defined=
   __clock_t_defined=
   __compar_fn_t_defined=
   __compiler_membar()=__asm __volatile(" " : : : "memory")
   __complex__=_Complex
   __CONCAT(x,y)=__CONCAT1(x,y)
   __CONCAT1(x,y)=x ## y
   __const=const
   __containerof(x,s,m)=({ const volatile __typeof__(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
   __COPYRIGHT(s)=struct __hack
   __COUNTER__=0
   __daddr_t_defined=
   __DATE__="Jul 23 2017"
   __dead2=__attribute__((__noreturn__))
   __DECONST(type,var)=((type)(__uintptr_t)(const void *)(var))
   __DEQUALIFY(type,var)=((type)(__uintptr_t)(const volatile void *)(var))
   __DEVOLATILE(type,var)=((type)(__uintptr_t)(volatile void *)(var))
   __DHCPS_H__=
   __DOTS=, ...
   __DYNAMIC_REENT__=
   __END_DECLS=
   __ESP_CROSSCORE_INT_H=
   __ESP_EVENT_H__=
   __ESP_INTERFACE_H__=
   __ESP_WIFI_H__=
   __ESP_WIFI_TYPES_H__=
   __EXPORT=
   __exported=__attribute__((__visibility__("default")))
   __extension__=
   __fastcall=__attribute__((__fastcall__))
   __FBSDID(s)=struct __hack
   __FILE__="file"
   __flexarr=[0]
   __format_arg(fmtarg)=__attribute__((__format_arg__ (fmtarg)))
   __generic(expr,t,yes,no)=_Generic(expr, t: yes, default: no)
   __GNUCLIKE_ASM=3
   __GNUCLIKE_BUILTIN_CONSTANT_P=1
   __GNUCLIKE_BUILTIN_MEMCPY=1
   __GNUCLIKE_BUILTIN_NEXT_ARG=1
   __GNUCLIKE_BUILTIN_STDARG=1
   __GNUCLIKE_BUILTIN_VAALIST=1
   __GNUCLIKE_BUILTIN_VARARGS=1
   __GNUCLIKE_CTOR_SECTION_HANDLING=1
   __GNUCLIKE_MATH_BUILTIN_CONSTANTS=
   __GNUCLIKE_MATH_BUILTIN_RELOPS=
   __GNUCLIKE___OFFSETOF=1
   __GNUCLIKE___SECTION=1
   __GNUCLIKE___TYPEOF=1
   __GNUC_PREREQ(maj,min)=((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   __GNUC_PREREQ__(ma,mi)=__GNUC_PREREQ(ma, mi)
   __GNUC_VA_LIST=
   __GNUC_VA_LIST_COMPATIBILITY=1
   __has_builtin(x)=0
   __has_extension=__has_feature
   __has_feature(x)=0
   __have_longlong64=1
   __hidden=__attribute__((__visibility__("hidden")))
   __IEEE_LITTLE_ENDIAN=
   __imag__=(int)
   __IMPORT=
   __int16_t_defined=1
   __int32_t_defined=1
   __int64_t_defined=1
   __int8_t_defined=1
   __INTTYPES_DEFINED__=
   __int_fast16_t_defined=1
   __int_fast32_t_defined=1
   __int_fast64_t_defined=1
   __int_fast8_t_defined=1
   __int_least16_t_defined=1
   __int_least32_t_defined=1
   __int_least64_t_defined=1
   __int_least8_t_defined=1
   __INT_WCHAR_T_H=
   __ISO_C_VISIBLE=2011
   __LINE__=1
   __lock_acquire(lock)=_lock_acquire(&(lock))
   __lock_acquire_recursive(lock)=_lock_acquire_recursive(&(lock))
   __lock_close(lock)=_lock_close(&(lock))
   __lock_close_recursive(lock)=_lock_close_recursive(&(lock))
   __LOCK_INIT(CLASS,NAME)=CLASS _lock_t NAME = 0;
   __lock_init(lock)=_lock_init(&(lock))
   __LOCK_INIT_RECURSIVE(CLASS,NAME)=CLASS _lock_t NAME = 0;
   __lock_init_recursive(lock)=_lock_init_recursive(&(lock))
   __lock_release(lock)=_lock_release(&(lock))
   __lock_release_recursive(lock)=_lock_release_recursive(&(lock))
   __lock_try_acquire(lock)=_lock_try_acquire(&(lock))
   __lock_try_acquire_recursive(lock)=_lock_try_acquire_recursive(&(lock))
   __Long=long
   __long_double_t=long double
   __malloc_like=__attribute__((__malloc__))
   __need_NULL=
   __need_size_t=
   __need_wchar_t=
   __need_wint_t=
   __need___va_list=
   __NEWLIB_H__=1
   __NEWLIB_MINOR__=1
   __NEWLIB__=2
   __noinline=__attribute__ ((__noinline__))
   __nonnull(x)=__attribute__((__nonnull__(x)))
   __null=(void *)0
   __offsetof(type,field)=offsetof(type, field)
   __offsetof__(x)=(x)
   __P(protos)=protos
   __packed=__attribute__((__packed__))
   __PMT(args)=args
   __POSIX_VISIBLE=200809
   __predict_false(exp)=__builtin_expect((exp), 0)
   __predict_true(exp)=__builtin_expect((exp), 1)
   __printf0like(fmtarg,firstvararg)=
   __printflike(fmtarg,firstvararg)=__attribute__((__format__ (__printf__, fmtarg, firstvararg)))
   __PTRDIFF_T=
   __ptrvalue=
   __ptr_t=void *
   __pure2=__attribute__((__const__))
   __pure=__attribute__((__pure__))
   __RAND_MAX=0x7fffffff
   __rangeof(type,start,end)=(__offsetof(type, end) - __offsetof(type, start))
   __RCSID(s)=struct __hack
   __RCSID_SOURCE(s)=struct __hack
   __real__=(int)
   __reent_assert(x)=((void)0)
   __restrict=restrict
   __returns_twice=__attribute__((__returns_twice__))
   __SAPP=0x0100
   __scanflike(fmtarg,firstvararg)=__attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
   __SCCSID(s)=struct __hack
   __sclearerr(p)=((void)((p)->_flags &= ~(__SERR|__SEOF)))
   __section(x)=__attribute__((__section__(x)))
   __SEOF=0x0020
   __SERR=0x0040
   __sfeof(p)=((int)(((p)->_flags & __SEOF) != 0))
   __sferror(p)=((int)(((p)->_flags & __SERR) != 0))
   __sfileno(p)=((p)->_file)
   __sgetc_r(__ptr,__p)=__sgetc_raw_r(__ptr, __p)
   __sgetc_raw_r(__ptr,__f)=(--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
   __signed=signed
   __SIZE_T=
   __size_t__=
   __SL64=0x8000
   __SLBF=0x0001
   __SMBF=0x0080
   __SNBF=0x0002
   __SNLK=0x0001
   __SNPT=0x0800
   __SOFF=0x1000
   __SOPT=0x0400
   __SORD=0x2000
   __sputc_r(__ptr,__c,__p)=__sputc_raw_r(__ptr, __c, __p)
   __sputc_raw_r(__ptr,__c,__p)=(--(__p)->_w < 0 ? (__p)->_w >= (__p)->_lbfsize ? (*(__p)->_p = (__c)), *(__p)->_p != '\n' ? (int)*(__p)->_p++ : __swbuf_r(__ptr, '\n', __p) : __swbuf_r(__ptr, (int)(__c), __p) : (*(__p)->_p = (__c), (int)*(__p)->_p++))
   __SRD=0x0004
   __SRW=0x0010
   __SSTR=0x0200
   __stdcall=
   __STDINT_EXP(x)=__##x##__
   __strfmonlike(fmtarg,firstvararg)=__attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
   __strftimelike(fmtarg,firstvararg)=__attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
   __STRING(x)=#x
   __strong_reference(sym,aliassym)=extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
   __SWID=0x2000
   __SWR=0x0008
   __sym_compat(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@" #verid)
   __sym_default(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@@" #verid)
   __SYS_CONFIG_H__=
   __thread=
   __THROW=
   __timer_t_defined=
   __timespec_defined=
   __time_t_defined=
   __TIME__="17:18:16"
   __unbounded=
   __unused=__attribute__((__unused__))
   __used=__attribute__((__used__))
   __u_char_defined=
   __u_int_defined=
   __u_long_defined=
   __u_short_defined=
   __VALIST=__gnuc_va_list
   __volatile=volatile
   __warn_references(sym,msg)=__asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
   __WCHAR_T=
   __wchar_t__=
   __weak_reference(sym,alias)=__asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
   __XSI_VISIBLE=700
   __XSTRING(x)=__STRING(x)
   ___int16_t_defined=1
   ___int32_t_defined=1
   ___int64_t_defined=1
   ___int8_t_defined=1
   ___int_least16_t_defined=
   ___int_least32_t_defined=
   ___int_least64_t_defined=
   ___int_least8_t_defined=
   ___int_ptrdiff_t_h=
   ___int_size_t_h=
   ___int_wchar_t_h=

Macro definitions (from files actually parsed):
   BLINK_GPIO=CONFIG_BLINK_GPIO
   CONFIG_BLINK_GPIO=2
   JONAS_PROJ_H_=
   mqtt_host="192.168.1.71"
   mqtt_port=1002
   TZNZ="NZST-12:00:00NZDT-13:00:00,M10.1.0,M3.3.0"

Unresolved includes (from headers in index):
   Unresolved inclusion: soc/soc.h in file file:/home/jonas/esp32/esp-idf/components/esp32/include/rom/ets_sys.h
   file:/home/jonas/esp32/esp-idf/components/esp32/include/esp_err.h is not indexed
   file:/home/jonas/esp32/esp-idf/components/esp32/include/esp_err.h is not indexed
   file:/home/jonas/esp32/esp-idf/components/esp32/include/esp_err.h is not indexed
   Unresolved inclusion: lwipopts.h in file file:/home/jonas/esp32/esp-idf/components/lwip/include/lwip/lwip/opt.h
   Unresolved inclusion: arch/cc.h in file file:/home/jonas/esp32/esp-idf/components/lwip/include/lwip/lwip/arch.h

Written on Sun Jul 23 17:18:16 NZST 2017
